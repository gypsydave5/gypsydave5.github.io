<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[My Static Org Blog]]></title>
<description><![CDATA[My Static Org Blog]]></description>
<link></link>
<lastBuildDate>Wed, 16 Sep 2020 23:57:00 +0100</lastBuildDate>
<item>
  <title><![CDATA[Why learn about... bits, bytes and binary]]></title>
  <description><![CDATA[
<p>
One of the goals of computer programming is to provide the user of our
software with a good <i>abstraction</i>; we don't want our web browsers to be
forcing us to think about HTTP requests, we want to click links and see
pages. We don't want to know how an object is created in memory in
JavaScript, we just want to use it to display cat videos in our browser.
</p>

<p>
But often we're exposed to some of the hideous truths buried beneath our
comfortable abstractions. Perhaps because of an error in our code. Or
because we're having to work with our computers at a more fundamental
level. Or it's because some clever sod decided that all the user
entitlements would be modelled using a bit mask.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Anyway, this is an article about bits, bytes and binary. It's also about
octal and hexadecimal, but that doesn't make for as catchy a title.
</p>

<div id="outline-container-orgc90d58f" class="outline-2">
<h2 id="who-is-this-for">Who is this for?</h2>
<div class="outline-text-2" id="text-who-is-this-for">
<p>
This is for any software developer, but will probably be of most use to
those who (like me) do not have a computer science background. It would
be helpful if they have some experience of using a Unix-like system
(OSX, Linux), and of writing colours in CSS. But this is not necessary.
</p>

<p>
The focus is on understanding the meaning of a bit and a byte, and on
reading and understanding binary, octal and hexidecimal numbers. The
skills developed are meant to be practical; they are applicable to a
wide range of subjects that are encountered by a software developer:
</p>

<ul class="org-ul">
<li>file permissions</li>
<li>IP addresses and networking</li>
<li>Reading stack traces</li>
<li>CSS colours</li>
</ul>

<p>
We will not examine less applicatble topics like binary arithmetic.
</p>

<p>
Oh and it might be fun in a geeky kinda way.
</p>
</div>
</div>

<div id="outline-container-org44e54a3" class="outline-2">
<h2 id="a-bit">A Bit</h2>
<div class="outline-text-2" id="text-a-bit">
<p>
What's a bit? It's fundamentally a pun - a contraction of the words
<i>binary digit</i>. A bit is a digit in <i>binary</i>. Let's get back to bits in
a minute - what's binary?
</p>
</div>
</div>

<div id="outline-container-orge2f084d" class="outline-2">
<h2 id="binary">Binary</h2>
<div class="outline-text-2" id="text-binary">
<p>
You can count - I'm assuming you can count. In the decimal counting
system using Arab numerals - the counting system that's been popular in
Western Europe (and then the rest of the world) since the
Renaissance,<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> there are ten digits:
</p>

<pre class="example">
0 1 2 3 4 5 6 7 8 9
</pre>

<p>
When we represent <i>any</i> number in decimal, we use these numerals. But we
don't just write them in any order; the position of each numeral tell us
how many of a power of ten goes in to make the number.
</p>

<p>
For instance
</p>

<pre class="example">
1337
</pre>

<p>
Is a number made up of
</p>

<ul class="org-ul">
<li>one lot of the third power of ten - 'ten to the three' - a thousand</li>
<li>three lots of the second power of ten - 'ten to the two' - three
hundreds</li>
<li>three lots of the first power of ten - 'ten to the one'- three tens</li>
<li>and seven lots of the zeroth power of ten - 'ten to the zero' - seven
ones</li>
</ul>

<p>
It might seem a bit odd to think of the final digit representing <code>n</code>
lots of the zeroth power of ten, but I hope you can see how it fits in
with the rest of the digits. This is probably how you've been counting
for most of your life, but probably without thinking of each of the
digits as representing a count of a power of ten.
</p>

<p>
But why represent numbers using ten digits?<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> Why not, say, two?
</p>

<pre class="example">
0 1
</pre>

<p>
And so we have <i>binary</i>, a number system based on using two digits to
represent every number. Each digit in a binary number represents a
<i>power of two</i>, just as every digit in a decimal number represented a
<i>power of ten</i>.
</p>

<p>
So
</p>

<pre class="example">
1101
</pre>

<p>
Means
</p>

<ul class="org-ul">
<li>one lot of the third power of two (1 * 2<sup>3</sup> = 1 * 8 = 8)</li>
<li>one lotof the second power of two (1 * 2<sup>2</sup> = 1 * 4 = 4)</li>
<li>zero lots of thefirst power of two (0 * 2<sup>1</sup> = 0 * 2 = 0)</li>
<li>and one lot of the zeroth power of two (1 * 2<sup>0</sup> = 1 * 1 = 1)</li>
</ul>

<p>
So the number represented by <code>1101</code> is 8 + 4 + 1 &#x2013; it's 13
</p>
</div>
</div>

<div id="outline-container-org1c36649" class="outline-2">
<h2 id="back-to-the-bits">Back to the Bits</h2>
<div class="outline-text-2" id="text-back-to-the-bits">
<p>
So now we have an answer to the question 'what is a bit?' - it's a
binary digit, or in other words it's a <code>0</code> or a <code>1</code>. Actually, why is it
either of those symbols? We could choose anything - we could use üôÇ and
üôÉ, or üëç and üëé, or <i>anything</i> we like. Remember, it's just a
<i>representation</i> of a number - it's not actually a number itself.<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup>
</p>

<p>
Now, inside your computer, at any one time, everything that's going on
is kept as a series of high- and low-voltage ???registers??? in memory
and (solid state) disk. We use these many millions of ???boxes with
voltages in??? to represent <i>everything</i> that we ever do on a computer.
</p>

<p>
And when we represent these voltages, we do so as binary digits - as
bits. We say the low-voltage ???box??? is <code>0</code> and the high voltage
???box??? is <code>1</code>. This, if you like, is the original abstraction of all
computing - the moment it stops being elecronic engineering and becomes
something else - we can stop thinking about the hardware and start
thinking about&#x2026; bits.
</p>
</div>
</div>

<div id="outline-container-orgda10f33" class="outline-2">
<h2 id="practical-one-integers">Practical one: integers</h2>
<div class="outline-text-2" id="text-practical-one-integers">
<p>
It probably won't surprise you that one of the easiest things to encode
into bits are integers - whole numbers. We've pretty much done it above.
So we know that the number
</p>

<pre class="example">
1101
</pre>

<p>
is thirteen.
</p>

<p>
But how do we write <i>negative</i> integers? We can't just write
</p>

<pre class="example">
-1101
</pre>

<p>
because all we have to play with is =0=s and =1=s? The obvious answer is
to just use a zero or one to mark a number as being positive or
negative. So we could have <code>0</code> means positive, and <code>1</code> means negative,
giving us
</p>

<pre class="example">
01101
</pre>

<p>
for thirteen and
</p>

<pre class="example">
11101
</pre>

<p>
for minus thirteen.<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>
</p>

<p>
But it doesn't take a genius to see a problem here: how can we tell the
difference between <code>11101</code> as "minus thirteen" and <code>11101</code> as
"twenty-nine" - which is what we'd get if we counted that first <code>1</code> as
one lot of two to the power of four (sixteen) - ?
</p>

<p>
This is an example of a bigger problem: when do we stop reading the
bits? What tells us - or the computer - that this bit is the end of a
number (or a character, or a string, or a an object) and the next one is
the beginning of another?
</p>
</div>
</div>

<div id="outline-container-orgd5f1d8c" class="outline-2">
<h2 id="bytes">Bytes</h2>
<div class="outline-text-2" id="text-bytes">
<p>
This is where <i>bytes</i> come in. A byte is a collection of bits - yes,
this is definitely a pun about biting things. In every computer you will
come across a byte is made up of <i>eight</i> bits:<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup>
</p>

<pre class="example">
10101010
</pre>

<p>
or
</p>

<pre class="example">
11111111
</pre>

<p>
A byte gives us a way of knowing when to stop - think of it like a word
in a natural language; if all the letters were mushed together without
spaces we'd find it hard to know when one word stopped and the next one
began.<sup><a id="fnr.7" class="footref" href="#fn.7">7</a></sup>
</p>

<p>
So now we can store unsigned integers (without a plus or a minus sign)
in a byte. Hooray! We can successfully count all the way up to&#x2026;
two-hundred and fifty-five. Well, that sucks, as I'm pretty sure I can
think of bigger numbers. This is why we can use more than one byte when
we're representing a number.
</p>

<p>
If we use two bytes
</p>

<pre class="example">
11111111 11111111
</pre>

<p>
We can get up to sixty-five thousand five hundred and thirty-five. Don't
trust me - go and count for yourself. I'll wait.
</p>

<p>
Throw another two bytes at the problem
</p>

<pre class="example">
11111111 11111111 11111111 11111111
</pre>

<p>
And we can reach the heady heights of&#x2026; 4294967295. Which is a very big
number.
</p>

<p>
I'll let you in to a trick: the biggest number that you can represent
using binary is 2<sup>n</sup> -1, where n is the number of digits in your number.
So I calculated the above number by working out 2<sup>16</sup> - 1. Don't worry: I
didn't use my fingers&#x2026;<sup><a id="fnr.8" class="footref" href="#fn.8">8</a></sup>
</p>

<p>
Great, so now we can calculate big numbers, and we know when to stop
reading the numbers - we just need to know how many bytes they're made
of. But what about those pesky negative integers? How do we know whether
</p>

<pre class="example">
11111111
</pre>

<p>
is two-hundred and fifty-five or minus one-hundred and twenty-seven?
</p>

<p>
This is why computers - and computer programming languages - have
<i>types</i>. Yes, there are other reasons to have types - please, Haskell
programmers, don't have a fit. But this is the most general case A type
will tell you not only how many bytes a 'thing' takes up in memory, but
also what sort of a thing it is. So if you know that <i>those</i> four bytes
over there are a signed integer:
</p>

<pre class="example">
10000000 00000000 00000000 00000100
</pre>

<p>
Then you know that it's the number -4. But if it's an <i>unsigned</i> integer
then it's the number 2147483652. And if it's a floating point number, or
a string, or perhaps an object&#x2026;
</p>

<p>
A lot of programming languages do you, me and everyone else the
significant service of hiding all of this from our eyes - Ruby will
automatically turn one size of integer into another size of integer when
it gets too big to be stored in a certain number of bytes. Other
languages side step the issue by having only <i>one</i> type for all numbers;
JavaScript uses a 64 bit double precision float for every number.<sup><a id="fnr.9" class="footref" href="#fn.9">9</a></sup>
</p>

<p>
Some programming languages - usually lower level ones - will tell you
<i>exactly</i> how much space in memory one of your values is taking up,
which can give a programmer more control over the amount of memory the
program is using. In Rust, for instance, you can have a <code>uint32</code> - an
unsigned, thirty-two bit integer. That information, combined with what
we've learned above, gives us enough information to know
</p>

<ul class="org-ul">
<li>that the value takes up four bytes (32 / 8 = 4)</li>
<li>that the maximum value of a <code>uint32</code> is 4294967295 (2 ^ 32 - 1)</li>
</ul>

<p>
Sometimes this is useful, sometimes it's not. But it's always good to
know.
</p>
</div>
</div>

<div id="outline-container-org1e0e4cf" class="outline-2">
<h2 id="not-just-binary-1-css-and-hexadecimal">Not just binary 1: CSS and Hexadecimal</h2>
<div class="outline-text-2" id="text-not-just-binary-1-css-and-hexadecimal">
<p>
Binary 'thinking' leaks out of lower level programs and out into the way
we write things that, on the face of it, really shouldn't be related.
For instance, one of the first things I ever wrote as a program probably
looked something like
</p>

<pre class="example">
body {
  background-color: #FFFFFF;
}
</pre>

<p>
Yes, CSS! What the hell were all the Fs about? Why on earth was that
<i>white</i>? I remember experimenting with different values to see what
worked and what didn't - the joy of programming!
</p>

<p>
What's weird is that one of the first things we do in simple web
programming turns out to be a great example of binary numbers making a
surprise appearance. You see, <code>FFFFFF</code> is actually a twenty-four bit
number, represented in <i>hexadecimal</i> notation.
</p>

<p>
Hexadecimal is just counting in base sixteen ('hexa' like six, as in
hexagon, 'decimal' like ten - it's Greek&#x2026;). Now when we used binary we
got rid of a lot of digits - everything that wasn't <code>1</code> or <code>0</code>. But for
base sixeteen we need another six digits to make the total up to
sixteen. So we just start counting using letters! <code>A</code> is ten, <code>B</code> is
eleven and so on up to <code>F</code> being fifteen.
</p>

<p>
So we can count up to twenty like this (starting at zero, naturally):
</p>

<pre class="example">
0
1
2
3
4
5
6
7
8
9
A
B
C
D
E
F
10
11
12
13
14
</pre>

<p>
Big woop. So what? Why on earth would you use a base of sixteen when
you've got decimal - everybody's favourite and universally popular?
</p>

<p>
Hexadecimal is useful because it <i>plays nicely with binary</i>. Sounds
weird, right? Let me explain: because sixteen is the fourth power of two
('two to the four'), each hexadecimal digit can represent <i>four</i> binary
digits - with no carry over.
</p>

<p>
When we represent a binary number in decimal we can never be sure how
many binary digits will be used for one decimal digit.
</p>

<pre class="example">
1001
</pre>

<p>
becomes
</p>

<pre class="example">
9
</pre>

<p>
only one digit
</p>

<pre class="example">
1010
</pre>

<p>
becomes
</p>

<pre class="example">
10
</pre>

<p>
two digits!
</p>

<p>
But because the first four bits in a binary number are for all numbers
from zero to fifteen, they map perfectly on to a single hexadecimal
digit.<sup><a id="fnr.10" class="footref" href="#fn.10">10</a></sup>
</p>

<p>
For instance
</p>

<pre class="example">
|                    |        |        |        |        |        |        |        |        |        |
</pre>

<ul class="org-ul">
<li><p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<tbody>
<tr>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
<td class="org-left">:-:</td>
</tr>
</tbody>
</table>
<p>
#+END<sub>EXAMPLE</sub>
</p>

<p>
binary | <code>1101</code> | <code>1110</code> | <code>1010</code> | <code>1101</code> | <code>1011</code> | <code>1110</code> | <code>1110</code>
</p>
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">
</colgroup>
<tbody>
<tr>
<td class="org-left"><code>1111</code></td>
<td class="org-left"><code>0001</code></td>
<td class="org-left"><code>0000</code></td>
<td class="org-left"><code>0001</code> decimal</td>
<td class="org-right">13</td>
<td class="org-right">14</td>
<td class="org-right">10</td>
<td class="org-right">13</td>
<td class="org-right">11</td>
</tr>
</tbody>
</table>
<p>
14 | 14 | 15 | 1 | 0 | 1 hexadecimal | D | E | A | D | B | E | E | F |
1 | 0 | 1
</p></li>
</ul>

<p>
This demonstrates another useful aspect of hexadecimal: writing fun
messages.
</p>

<p>
So hexadecimal is really good at representing known 'blocks' of binary
information - four bits to each hexadecimal digit.
</p>

<p>
And if there are two digits, then there are eight bits&#x2026; it's a byte!
So what we're seeing here is a three byte - twenty-four bit - number,
written out in hexadecimal notation.
</p>

<p>
But&#x2026; why do this for a <i>colour</i>?
</p>

<p>
Each of those bytes represents a component of the colour being
described - red, green and blue. So by writin it out in hexadecimal you
get some visual indication of when each element begins and ends - it's
two hex digits - and you also know that the length of the number will
always be six digits. And it's one hell of a lot easier to read than it
would be in decimal (0 to 16777215 anyone&#x2026;?).
</p>
</div>
</div>

<div id="outline-container-org493c331" class="outline-2">
<h2 id="not-just-binary-2-file-permissions-and-octal">Not just binary 2: File Permissions and Octal</h2>
<div class="outline-text-2" id="text-not-just-binary-2-file-permissions-and-octal">
<p>
The other number system that comes up with some regularity (although
less than hexidecimal) is <i>octal</i>, which uses eight as the base. Again,
this base is no accident; a single octal digit can represent <i>three</i>
bits:
</p>

<pre class="example">
        |          |          |          |
-       | :-:      | :-:      | :-:      | :-:
binary  | `101101` | `110110` | `010010` | `111111`
decimal | 45       | 54       | 18       | 63
octal   | 55       | 66       | 22       | 77
</pre>

<p>
A single octal digit can represent numbers from 0 to 7, and two of them
can represent numbers from 0 to 63.
</p>

<p>
One of the strangest, but also most interesting, uses of octal is in
representing file permissions in Unix. If you're in front of a Linux or
Mac computer right now, open a terminal session and type <code>ls -l</code>. You
should see something like this:
</p>

<pre class="example">
total 80
-rw-r--r--   1 davidwic  1482096370    897  9 Jun 22:06 README.md
-rw-r--r--   1 davidwic  1482096370    127 20 Jun 08:45 config.toml
drwxr-xr-x  27 davidwic  1482096370    864  9 Jun 22:06 drafts
drwxr-xr-x   8 davidwic  1482096370    256 19 Jun 01:42 extras
drwxr-xr-x   6 davidwic  1482096370    192  5 Jun 21:24 images
drwxr-xr-x   3 davidwic  1482096370     96  9 Jun 22:06 pages
drwxr-xr-x  66 davidwic  1482096370   2112 13 Jul 00:16 posts
-rwxr-xr-x   1 davidwic  1482096370    138 19 Jun 00:26 publish-on-s3.sh
-rwxr-xr-x   1 davidwic  1482096370    334  9 Jun 22:12 publish.sh
-rw-r--r--   1 davidwic  1482096370    259 17 Jun 21:45 serve.go
drwxr-xr-x  12 davidwic  1482096370    384 19 Jun 22:48 site
drwxr-xr-x   3 davidwic  1482096370     96 19 Jun 00:24 templates
-rw-r--r--@  1 davidwic  1482096370  18110 30 Jun 23:33 test.html
</pre>

<p>
The column on the right represents the <i>file permissions</i> for each file.
The first character shows whether its a directory (a <code>d</code>), and the other
nine show =r=ead, =w=rite and e=x=ecute permissions for the owner, the
owner's group and everyone else.
</p>

<p>
So if a directory could be read, written and executed by the owner it
would say
</p>

<pre class="example">
drwx------
</pre>

<p>
And if a file could be read by everyone
</p>

<pre class="example">
-r--r--r--
</pre>

<p>
Fun times.
</p>

<p>
But we don't really need the letters - the position of the flags give us
all the information we need. If we say that <code>0</code> represents disabled, and
<code>1</code> represents enabled, and ignoring the directory flag, we could write
the file permission above as
</p>

<pre class="example">
100100100
</pre>

<p>
Oh hey look - a binary number!
</p>

<p>
Now look at the repeating pattern - it goes Read, Write and Execute
three times. We could break this up into groups of three bits:
</p>

<pre class="example">
100 100 100
</pre>

<p>
But after our brush with hexidecimal we know that each of those groups
of three binary numerals can be written as a single octal numeral:
</p>

<pre class="example">
444
</pre>

<p>
For that one, but for the directory that can only be used by the owner:
</p>

<pre class="example">
700
</pre>

<p>
These magic octal file permission numbers come up <i>disturbingly</i> often -
more often than you'd think was necessary in the twenty first century.
For instance, exciting modern programming language Go
<a href="https://golang.org/pkg/os/#FileMode">needed to model file
permissions</a>, it did so by using as 32 bit <i>number</i> where the nine
'least significant bits' (i.e.¬†the end of the number) represented
<code>rwxrwxrwx</code> permissions as above. The same occurs in Python, and
<a href="https://nodejs.org/api/fs.html#fs_file_modes">NodeJS</a>.
</p>

<p>
Treating numbers as flags has some exciting - or gnarly - side effects.
For instance, if you wanted to make creating permissions a bit more
readable you could do something like
</p>

<pre class="example">
owner_read = 0400
owner_write = 0200
group_read = 0040
other_read = 0004

permission = owner_read + owner_write + group_read + other_read // =&gt; 0644
</pre>

<p>
Which reads better - but we don't want to do this:
</p>

<pre class="example">
permission = other_read + other_read + other_read // =&gt; 0020 - group write!
</pre>

<p>
But there <i>is</i> a way around this - we can use a special set of operators
that work on numbers <i>at the bit</i> level, treating each bit as a boolean
flag.
</p>
</div>
</div>

<div id="outline-container-org12f686a" class="outline-2">
<h2 id="bitwise-operations">Bitwise Operations</h2>
<div class="outline-text-2" id="text-bitwise-operations">
<p>
Look, I'm not sure I should be telling you this - it's pretty low level
and nasty. But we've come this far and we can't turn back now.
</p>

<p>
So you're used to booleans when you're programming - things like <code>True</code>
and <code>False</code> - and the operations that we can perform on them - things
like <i>and</i> and <i>or</i>. They probably look something like this in your
language (this is in Ruby):
</p>

<div class="org-src-container">
<pre class="src src-ruby"><span style="color: #333333; font-weight: bold;">true</span> &amp;&amp; <span style="color: #333333; font-weight: bold;">true</span> == <span style="color: #333333; font-weight: bold;">true</span>
<span style="color: #333333; font-weight: bold;">false</span> &amp;&amp; <span style="color: #333333; font-weight: bold;">true</span> == <span style="color: #333333; font-weight: bold;">false</span>
<span style="color: #333333; font-weight: bold;">false</span> || <span style="color: #333333; font-weight: bold;">true</span> == <span style="color: #333333; font-weight: bold;">true</span>
<span style="color: #333333; font-weight: bold;">false</span> || <span style="color: #333333; font-weight: bold;">false</span> == <span style="color: #333333; font-weight: bold;">false</span>
</pre>
</div>

<p>
<code>&amp;&amp;</code> is the boolean 'and' operator, and <code>||</code> is the boolean 'or'
operator. There are others (like 'not'), but let's focus on these two.
</p>

<p>
What if we treated the binary digit <code>0</code> as false, and the binary digit
<code>1</code> as true?<sup><a id="fnr.11" class="footref" href="#fn.11">11</a></sup> We could do something very similar:
</p>

<pre class="example">
1 &amp; 1 == 1
1 &amp; 0 == 0
1 | 0 == 1
0 | 0 == 0
</pre>

<p>
Most programming languages will have these operators - <code>&amp;</code> is 'bitwise
and', and <code>|</code> is 'bitwise or'. They work by looking at numbers as a
series of bits and comparing the bits at the equivalent positions. They
then treat the two bits they're comparing like booleans above, and they
use the resulting bit to construct a new number - the result. It's
probably easier to see than to describe - let's stick another two digits
on to the examples above:
</p>

<pre class="example">
001 &amp; 101 == 001 // only the last bit is set in both numbers
101 &amp; 111 == 101 // only the first and last bits are set in both numbers
100 | 010 == 110 // the first or the second bits are set in both numbers
001 | 000 == 001 // are you getting the hang of it now?
</pre>

<p>
By using the <code>|</code> operator when constructing file permissions as above,
we can avoid the bits 'overflowing' into the next digit and changing the
permission - we can think of <code>|</code> as having the meaning 'apply
permission' in this context.<sup><a id="fnr.12" class="footref" href="#fn.12">12</a></sup>
</p>

<pre class="example">
permission =  004 | 004 | 004 // =&gt; 004 - no matter how many times you 'apply' it!
</pre>

<p>
and <code>&amp;</code> makes a funky way to test for which file permissions have been
set.
</p>

<pre class="example">
other_execute = 0001
if current_file.permissions &amp; other_execute != other_execute {
  // don't have execute permission!
}
</pre>

<p>
This works because, if the last bit isn't set in the
<code>current_file.permissions</code>, the result of <code>&amp;=ing it with =0001</code> will
<i>always</i> be <code>0</code>
</p>

<pre class="example">
0000 &amp; 0001 // =&gt; 0000
0006 &amp; 0001 // =&gt; 0000
0742 &amp; 0001 // =&gt; 0000
0001 &amp; 0001 // =&gt; 0001
0777 &amp; 0001 // =&gt; 0001
</pre>

<p>
There are other bitwise operators - really, really funky ones that
produce an 'exclusive or', shift bits to the left and right, and invert
all the bits in a number ('bitwise not'). Take a look at them if you
have time.<sup><a id="fnr.13" class="footref" href="#fn.13">13</a></sup>
</p>
</div>
</div>

<div id="outline-container-orgb29de51" class="outline-2">
<h2 id="conclusion">Conclusion</h2>
<div class="outline-text-2" id="text-conclusion">
<p>
Bits are useful as they're pretty much as low level as you <i>can</i> go when
programming. When you know that an integer is stored in 64 bits, it will
give you a good idea of just how large that number can be.
</p>

<p>
Bytes are probably the smallest abstraction that you'll work with on a
day to day basis. You'll usually see them when dealing with raw
information - byte arrays and byte streams. They form the building block
of larger data structures, like strings.
</p>

<p>
Number systems like hexadecimal and octal are a common way to show data
of a number of bytes conveniently. They let you reason about the size of
the data (the number of bits needed), while also providing a convenient
way of showing that data.
</p>
</div>
</div>

<div id="outline-container-org56effd5" class="outline-2">
<h2 id="appendix-using-dc-to-handle-conversion">Appendix: using <code>dc</code> to handle conversion</h2>
<div class="outline-text-2" id="text-appendix-using-dc-to-handle-conversion">
<p>
Working with binary, octal and hexadecimal - and converting between them
all and decimal - can be a pain in backside. To avoid trying to do all
the maths on your fingers (and toes), I recommend using some sort of
calculator. Vavious tools are available online to do this for you, but a
tool is available at your fingertips if you're on a Unix-like system:
<code>dc</code>, the desk calculator.
</p>

<p>
We can tell <code>dc</code> to use different bases for input and output by using
the <code>i</code> and <code>o</code> commands - so
</p>

<pre class="example">
2 i 16 o
</pre>

<p>
will tell <code>dc</code> to use binary as its input and to output numbers in
hexadecimal. We can then input a binary number and then use <code>p</code> to print
it out as hexadecimal.
</p>

<pre class="example">
16 o 2 i 1111 p
</pre>

<p>
will return
</p>

<pre class="example">
f
</pre>

<p>
You can run this calculation through <code>dc</code> either by running it
interactively (start <code>dc</code> and then type in the expression), or by
sending the expression in with a flag
</p>

<pre class="example">
dc -e '16 o 2 i 1111 p'
</pre>

<p>
or piping it through on standard input
</p>

<pre class="example">
echo '16 o 2 i 1111 p' | dc
</pre>

<p>
It's a quick way to do the conversion, although it does takes some
practice to remember how to use <code>dc</code>.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
I've worked at that company - the clever sod left years ago, but
he is still 'fondly' remembered&#x2026;
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
As opposed to Roman numerals, which are only really popular now
on clocks and copyright notices.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
There are <i>great</i> reasons to do this, not least because we've got
ten fingers.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
Not wanting to get too philosophical about this, but it's
interesting how quickly we can get to some vary rarified ideas
when we talk about computers - questions like "what <i>is</i> a
number?" don't come up very often in everyday conversation. This
should be a hint to us that we're either doing something very
clever and difficult, or something completely pointless.
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
This is <i>not</i> how it works in real computers - I'm sorry to
mislead you. If you're <i>really</i> interested in this stuff - and I
mean really interested, as I think I'm pretty interested but even
I find this a bit tedious - you should read some articles on
<a href="https://en.wikipedia.org/wiki/Two%27s_complement">two's
complement</a>. The reason you use two's complement rather than
another way of encoding numbers is to permit the performance of
binary arithmetic on the bits in identical ways whether the
number is positive or negative. But as I'm not covering that here
then I'm happy to gloss over it and push on with the more useful
stuff.
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
There is no <i>necessity</i> behind having eight bits in a byte, and
in fact a lot of early computer systems used six or seven bits as
their <i>byte size</i>. But eight is standard these days. To avoid
confusion an eight bit byte is often referred to as an 'octet'.
This can also <i>increase</i> confusion so I'm not going to do that
here.
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7">7</a></sup> <div class="footpara"><p class="footpara">
Hard&#x2026; but not impossible. Ancient Greek was written in ALL
CAPITALS WITHTHESPACESREMOVED. And you think it's
hardReadingThingsInCamelCase&#x2026;
</p></div></div>

<div class="footdef"><sup><a id="fn.8" class="footnum" href="#fnr.8">8</a></sup> <div class="footpara"><p class="footpara">
I used <code>dc</code>, the standard Unix desk calculator. More about it
later.
</p></div></div>

<div class="footdef"><sup><a id="fn.9" class="footnum" href="#fnr.9">9</a></sup> <div class="footpara"><p class="footpara">
Which leads to a lot of craziness.
</p></div></div>

<div class="footdef"><sup><a id="fn.10" class="footnum" href="#fnr.10">10</a></sup> <div class="footpara"><p class="footpara">
We actually do something very similar everyday with decimal
numbers: it is customary to group the digits of large numbers
into threes, making them easier to read - i.e.¬†=1 345 383 398=.
</p></div></div>

<div class="footdef"><sup><a id="fn.11" class="footnum" href="#fnr.11">11</a></sup> <div class="footpara"><p class="footpara">
This should not be too much of a leap for those of you familiar
with JavaScript's definition of truth&#x2026;
</p></div></div>

<div class="footdef"><sup><a id="fn.12" class="footnum" href="#fnr.12">12</a></sup> <div class="footpara"><p class="footpara">
This should not be too much of a leap for those of you familiar
with JavaScript's definition of truth&#x2026;
</p></div></div>

<div class="footdef"><sup><a id="fn.13" class="footnum" href="#fnr.13">13</a></sup> <div class="footpara"><p class="footpara">
'Bit shifting' makes for an efficient, if obscure, way of
multiplying and dividing by two while rounding down.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/why.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[HTTP - Request and Response Message]]></title>
  <description><![CDATA[
<p>
The goal of this article is to examine and explain the HyperText
Transfer Protocol (HTTP) message types for a request and a response. Why
learn about HTTP? Because it's <i>fundamental</i> to a lot of the software we
build today - if it wasn't for HTTP
</p>

<ul class="org-ul">
<li>your JavaScript application in the browser wouldn't work</li>
<li>your API wouldn't be able to be used, let alone be RESTful</li>
<li>none of the 100s of microservice you've created could talk to each
other</li>
</ul>

<div id="outline-container-org99690bf" class="outline-2">
<h2 id="who-is-this-for">Who is this for?</h2>
<div class="outline-text-2" id="text-who-is-this-for">
<p>
This is for every software developer, but especially for <i>web</i>
developers; people who build software either in the browser, or as
backend web servers. Especially for them as their programs are almost
entirely dependent upon HTTP to work.
</p>

<p>
This first part will cover the basics of HTTP, and an overview of the
HTTP message structure, both request and response. I've tried to make it
practical so there's some examples you can run on the command line in a
Unix like system (Linux, BSD, OSX), but which should work given some
tweaking for a Windows system.
</p>

<p>
By then end we should have covered
</p>

<ul class="org-ul">
<li>the difference between the Internet and the (World Wide) Web</li>
<li>How HTTP is built on top of Internet protocols</li>
<li>how to use netcat to send TCP messages</li>
<li>using netcat to send and receive HTTP messages, and their anatomy</li>
<li>understood the benefits of plain text in communication</li>
</ul>
</div>
</div>

<div id="outline-container-org2a02ba1" class="outline-2">
<h2 id="what-is-the-internet-what-is-the-web">What is the Internet? What is the web?</h2>
<div class="outline-text-2" id="text-what-is-the-internet-what-is-the-web">
<p>
First up, the Internet is <i>not</i> the same as the web.
</p>

<p>
<i>An</i> internet is a collection of computer networks that are connected
together.
</p>

<p>
<i>The</i> Internet is <i>all</i> the computer networks in the world that are
connected to each other. Every. Damn. One.
</p>

<p>
And the web is&#x2026; well, we'll get to that.
</p>

<p>
In the beginning&#x2026; there weren't many computers at all. Maybe five? And
they were used for exciting things like calculating the yield of nuclear
bombs. But people realised they could do more with them if they could
communicate with each other. My computer could ask your computer to do
some of the work, and we'd get done in half the time.
</p>

<p>
But to communicate you need to share something - a language, a set of
signs. When someone says 'Hello' and they hold out their hand, what you
do next communicates a meaning - you can shake hands, or you can refuse.
You understand what the outheld hand means, you know what the
conventional responses are, and the other party knows what you mean when
you shake (or don't).
</p>

<p>
This is <i>protocol</i> - a series of conventions that govern communication.
The only other place that we talk about protocols tend to be when
interacting with royalty - we call the Queen "your Majesty" the first
time we address her, "ma'am" to rhyme with "ham" afterwards, and <i>we
never touch her</i>. This is how we behave to get along with the Queen.
</p>

<p>
Another protocol: you walk into a cafe, you sit down. And &#x2026; then what
happens? You expect the waiter to come over and take your order. They
will say something like 'Hi, what would you like to drink?', and you'll
say 'a coffee, please', and maybe there'll be a quick chat about milk,
sugar, or which one of the hundreds of different coffees you'd like.
What you don't do is walk into the cafe, walk up to the register and say
'skinny mocha to go please'&#x2026; or do you? It depends - you can tell what
you're meant to do when you walk in to most cafes and coffeeshops. We
learn the correct protocol very quickly (we often copy others) and then
we know what we're meant to do.
</p>

<p>
The early Internet was built on a series of protocols - the Internet
Protocol suite. For instance, one of these is the Internet Protocol
(IP) - a set of rules that the computers could conform to, to allow them
to communicate with each other no matter what operating system they were
using.
</p>

<p>
Protocols can stack up on top of each other. Say we walk into the cafe,,
sit down, the waiter comes over and says "Bonjour, qu'est-ce que vous
voulez boire"&#x2026; we know we're using the "ordering coffee in a cafe"
protocol, but instead of using the English 'protocol' to communicate it
the waiter is doing it in French. Why? Well, maybe you're in France.
What's interesting is that, even if you don't speak French, you kinda
know what they're saying because, well, it's a cafe - you know the
protocol. Instead of using the 'English' protocol, the waiter is using
'French' to communicate the 'Cafe' protocol - they hope you understand
French, and that you know what to do in a cafe.
</p>

<p>
The Transmission Communication Protocol (TCP) is another protocol that's
usually implemented on top of the Internet Protocol - and written as
"TCP/IP" ("TCP over IP"). TCP is a protocol that we should care about,
as it's the protocol that is used to implement the HyperText
Transmission Protocol - HTTP.
</p>

<p>
And that's the Web - things built on HTTP. Things like websites, and
webservices and your browser and all of this wonderful world we get to
live in 'online'.
</p>
</div>
</div>

<div id="outline-container-org1431970" class="outline-2">
<h2 id="worlds-simplest-chat-netcat-nc">World's Simplest Chat: netcat (<code>nc</code>)</h2>
<div class="outline-text-2" id="text-worlds-simplest-chat-netcat-nc">
<p>
Communication is often a two way thing - in TCP it definitely is.
</p>

<p>
To communicate we need two more pieces of information: who is going to
start the conversation, and where they are going to talk to. You may
have experienced the awkwardness when both people are waiting for the
other one to say something - luckily humans have quick ways to escape
this impasse, but computers need to be explicit.
</p>

<p>
In networking we call the computer waiting for messages a <i>server</i> (like
the waiter, giving you things), and the computer sending the messages a
<i>client</i> (like a &#x2026; client).
</p>

<p>
The 'where' is the IP address of a computer, and a <i>port</i> on that
computer. The IP address is a big number uniquely identifies a computer
on a network, and a port is like a port for a country - a place where
things go in and out. This is also a number. Computers have more than
one port because it's nice for a computer to talk to more than one
computer at once.
</p>

<p>
netcat "is used for just about anything under the sun involving TCP" -
we can use it to see what sending and receiving messages over TCP
actually looks like by starting a server and a client on our computer.
</p>

<p>
But <i>we</i> are going to be the client and the server!
</p>

<hr>

<p>
Demo netcat and play along!
</p>

<p>
server: <code>nc -l 8000</code> client: <code>nc localhost 8000</code>
</p>

<p>
Send some messages See them pop up in the other session
</p>

<hr>
</div>
</div>

<div id="outline-container-org293f2ba" class="outline-2">
<h2 id="question">Question:</h2>
<div class="outline-text-2" id="text-question">
<ul class="org-ul">
<li>What do you think HTTP looks like, if it uses TCP?</li>
<li>How could you find out using netcat?</li>

<li>Client on the web is something like a <i>web browser</i></li>
<li>A Server is a webserver - what we do every day</li>
<li>The web works over TCP - just like what we saw with netcat</li>
<li>What if we changed the client to a browser?</li>
</ul>
</div>
</div>

<div id="outline-container-orgd20e62e" class="outline-2">
<h2 id="the-http-request-message">The HTTP Request Message</h2>
<div class="outline-text-2" id="text-the-http-request-message">
<p>
We should see something like&#x2026;
</p>

<pre class="example">
GET / HTTP/1.1
Host: localhost:8080
Upgrade-Insecure-Requests: 1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Safari/605.1.15
Accept-Language: en-gb
Accept-Encoding: gzip, deflate
Connection: keep-alive
</pre>

<p>
Every time you request a page with your browser, this is what it sends
to a server.
</p>

<p>
Which, although it's pretty gnarly, you can read pretty easily if you
know how.
</p>

<p>
There are <i>three</i> parts to the request message:
</p>

<ul class="org-ul">
<li>the <i>request line</i>, which is the first line of the message</li>
<li>the <i>headers</i>, which are every line after the request line. These are
optional</li>
<li>and, after a blank line, an optional <i>body</i>.</li>
</ul>
</div>

<div id="outline-container-org3d74017" class="outline-3">
<h3 id="request-line">Request line</h3>
<div class="outline-text-3" id="text-request-line">
<p>
Has three parts, each separated by a space.
</p>

<ul class="org-ul">
<li>The <i>request method</i> (<code>GET</code>)</li>
<li>The <i>request target</i> or path (<code>/</code>)</li>
<li>The <i>HTTP version</i> (<code>HTTP/1.1</code>)</li>
</ul>

<p>
Cool. But what should we send back to the browser?
</p>
</div>
</div>
</div>

<div id="outline-container-org8586883" class="outline-2">
<h2 id="the-http-response-message">The HTTP Response Message</h2>
<div class="outline-text-2" id="text-the-http-response-message">
</div>

<div id="outline-container-orgf9ff130" class="outline-3">
<h3 id="orgf9ff130">Q: What do we send back? How can we find out what a valid response</h3>
<div class="outline-text-3" id="text-orgf9ff130">
<p>
message looks
</p>
<p>
:CUSTOM<sub>ID</sub>: q-what-do-we-send-back-how-can-we-find-out-what-a-valid-response-message-looks
</p>

<p>
like?
</p>

<ol class="org-ol">
<li>A server on the web is a domain name (like <code>example.com</code>)</li>
<li>The web works over TCP - just like what we saw with netcat</li>
<li>What if we changed the server to a webserver on the internet?</li>
<li>We just need to point our netcat client at something other than
localhost</li>
</ol>

<p>
client: <code>nc -c -v example.com 80</code>
</p>

<p>
Why port 80? Because this is the conventional port for servers to be
listening on for HTTP requests. When you use a browser it always
<i>assumes</i> you want port 80 of the server you're communicating with. So
we're opening up a connection to the server at example.com.
</p>

<ul class="org-ul">
<li>the <code>-v</code> makes netcat <i>verbose</i> - so that we know it's working!</li>
<li>the <code>-c</code> fixes the line endings so that they conform with HTTP - don't
worry about it</li>
</ul>

<p>
We know what a valid HTTP request message looks like, but let's send an
invalid one for now
</p>

<pre class="example">
bum
</pre>

<p>
We get back the response:
</p>

<pre class="example">
HTTP/1.1 400 Bad Request
Server: squid
Mime-Version: 1.0
Date: Fri, 06 Sep 2019 07:51:41 GMT
Content-Type: text/html;charset=utf-8
Content-Length: 3836
X-Squid-Error: ERR_INVALID_REQ 0
X-Cache: MISS from IMP-cache
X-Cache-Lookup: NONE from IMP-cache:3128
Via: 1.1 IMP-cache (squid)
Connection: close


&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;ERROR: The requested URL could not be retrieved&lt;/title&gt;

...
</pre>

<p>
Once again, this breaks down into three parts:
</p>

<ul class="org-ul">
<li>the <i>status line</i></li>
<li>some (optional) headers</li>
<li>an optional body after an empty line</li>
</ul>

<p>
the body should be familiar - it's the HyperText Markup Language (HTML)!
</p>
</div>
</div>

<div id="outline-container-org114fd3a" class="outline-3">
<h3 id="status-line">Status line</h3>
<div class="outline-text-3" id="text-status-line">
<p>
is once again very similar to the request line. It's made of
</p>

<ul class="org-ul">
<li>The <i>HTTP version</i> (<code>HTTP/1.1</code>)</li>
<li>The <i>status code</i> (<code>200</code>)</li>
<li>The a description of the status code or path (<code>/</code>)</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org7455cdb" class="outline-2">
<h2 id="back-to-the-browser-response">Back to the Browser: Response</h2>
<div class="outline-text-2" id="text-back-to-the-browser-response">
<ul class="org-ul">
<li>Start your server again, but this time on port 80.</li>
<li>Send an HTTP GET request using the browser - notice you don't need the
port!</li>
</ul>

<p>
Now lets send something back!
</p>

<pre class="example">
HTTP/1.1 200 OK

Hello, world!
</pre>

<p>
One gotcha - the browser needs to know that your message has finished -
you could have more lines of body to add. To do this you need to send a
special signal called End of File (EOF), which we can type by pressing
Ctrl-D.
</p>

<p>
Now look at your browser.
</p>
</div>
</div>

<div id="outline-container-org8617ae7" class="outline-2">
<h2 id="a-rest-api-written-in-netcat">A REST API written in netcat</h2>
<div class="outline-text-2" id="text-a-rest-api-written-in-netcat">
<ul class="org-ul">
<li>Now let's pretend you're a simple server that responds with a hello
message for a particular path</li>
<li>so <code>/hello/chris</code> sends a message back that says "Hello, Chris"</li>
<li>Can you be that server with netcat?</li>
</ul>
</div>
</div>

<div id="outline-container-org1b0577f" class="outline-2">
<h2 id="examining-a-request-in-the-browser">Examining a Request in the Browser</h2>
<div class="outline-text-2" id="text-examining-a-request-in-the-browser">
<p>
We make HTTP requests every day, most obviously when browsing the Web.
The content of these requests is usually well hidden by the browser as
they're irrelevant to the everyday use, but it's easy to see what's
going on.
</p>

<p>
Browsers usually have a set of 'developer tools'
</p>

<ul class="org-ul">
<li>open up a browser</li>
<li>open up the 'developer tools'</li>
<li>find the network tab</li>
<li>make a request for the URL <code>https://developer.mozilla.org/en-US/</code></li>
</ul>
</div>
</div>

<div id="outline-container-orgc5c19c0" class="outline-2">
<h2 id="questions">Questions?</h2>
<div class="outline-text-2" id="text-questions">
</div>

<div id="outline-container-org4ff85ac" class="outline-4">
<h4 id="q-why--c-for-the-netcat-client">Q: Why <code>-c</code> for the netcat client?</h4>
<div class="outline-text-4" id="text-q-why--c-for-the-netcat-client">
<p>
Because the HTTP protocol requires that each line be terminated by two
invisible characters - carriage-return and line-finish (LF CR). On most
computers, hitting return will only emit one character (LF), so <code>-c</code>
tells netcat to add in the extra CR. You will hit this problem
repeatedly in your careers, mostly around files saved on Windows
machines (which use CRLF by convention).
</p>
</div>
</div>
</div>

<div id="outline-container-orge1931c4" class="outline-2">
<h2 id="further-reading">Further Reading</h2>
<div class="outline-text-2" id="text-further-reading">
<p>
<a href="https://tools.ietf.org/html/rfc7230#section-3">RFC7230 Hypertext
Transfer Protocol (HTTP/1.1): Message Syntax and Routing</a>
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/request-response.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[On Developer Fetishes]]></title>
  <description><![CDATA[

<div id="outline-container-orgce8bfee" class="outline-2">
<h2 id="caveat-lector">Caveat Lector</h2>
<div class="outline-text-2" id="text-caveat-lector">
<p>
What follows is more of a stream of consciousneess that fell out a few
nights ago pretty much unedited and very unpolished. Please don't take
it too seriously, or personally (that would be too ironic) - it's as
much directed at me as it is anyone. I'm publishing it <i>with regret</i>.
</p>
</div>

<div id="outline-container-org956d382" class="outline-3">
<h3 id="programming-languages-do-not-care-about-you">Programming languages do not care about you</h3>
<div class="outline-text-3" id="text-programming-languages-do-not-care-about-you">
<p>
You love your language. You've spent hours, days - <i>months</i> - learning
its intricacies inside out. You are the grand wizard of JavaScript. You
are the shining Ruby of Rubyists. You are the P in PHP, the Hoss of
Haskell, the rustiest Rustacean, the goofiest Gopher, the biggest,
steamiest, hottest cup of Java in the JVM shop.
</p>

<p>
So what.
</p>

<p>
Your language is really just a set of blinkers around what you can do.
You are ultimately limited by your language; trust me, it cannot do
everything you want it to do.
</p>

<p>
What's vital for a language isn't the language - its features, its
warts, its amazing syntax for one line anonymous function calls, or
array destructuring, or pattern matching&#x2026;
</p>

<p>
Or its beautiful landing page, its cod philosophy, its ridiculously cute
rodent mascot.
</p>

<p>
It's not even what it teaches you, about the world and about computers.
That's important, and useful, but it isn't the most important thing.
</p>

<p>
The most important thing about a language is the people who speak it and
the problems they solve with it. Try to keep it that way.
</p>
</div>
</div>

<div id="outline-container-org9ef8be4" class="outline-3">
<h3 id="you-are-not-the-framework-you-use">You are not the framework you use</h3>
<div class="outline-text-3" id="text-you-are-not-the-framework-you-use">
<p>
If it's true for languages, it's doubly true for frameworks. But it's
usually these artefacts that are the cause of the greatest and most
vociferous developer fetishism - yes, I'm talking to you, front end
JavaScript developers of 2019.
</p>

<p>
Nobody cares if your website is made in React. Or Angular. Or Vue. Or
Preact. Or Bumfle. You haven't heard of Bumfle? I just made it up. My
website is written in Bumfle. It's the best. I'm a Bumfle developer.
Been one for the past twenty seconds. I'm the best at Bumfle. Please
sign up for my free Bumfle training course. We in the Bumfle community
welcome all Bumfle contributors. Also, I've just changed the Bumfle API
to use Bumfle hooks which I'm calling Books. Saga Books now because I've
read the DDD book. All your Bumfle code is now broken because of this.
You are welcome. Also, Bumfle is now called Fumble. Also I'm now
building the next Fumble. It's called Brian.
</p>

<p>
Nobody cares if you love a framework more than the last version of
React, or whether it is simpler or easier to use than the next version
of Vue. Especially not the framework.
</p>

<p>
Because in two minutes time the subject of all your passion and effort
and love and time will evaporate through the whimsy of a maintainer, an
exciting change in fashion, an update to 3.6.6.6, a new API that
introduces every other term from the DDD book&#x2026;
</p>

<p>
(Bumfle objects are now called Baggregates. You are welcome.)
</p>

<p>
Do not get attached to a framework. Do not fall in love with these
ephemera. The most important thing a framework can do is solve
particular problem. Try and solve more problems, stop finding problems
to solve with your favourite magic box. Stop inventing problems to solve
with your favourite magic box.
</p>
</div>
</div>

<div id="outline-container-org7cedab3" class="outline-3">
<h3 id="your-text-editor-does-not-define-you">Your text editor does not define you</h3>
<div class="outline-text-3" id="text-your-text-editor-does-not-define-you">
<p>
Vim is fun. You feel like you've passed a small exam every time you
remember a command correctly. You get a small dopamine hit. You are a
successful individual and a powerful software developer. At least a 5X.
You must be because you know how to <code>d=elete =a</code> =w=ord. You then want
to tell your friends about your huge triumph in writing a macro that
adds a comma to the end of each line.
</p>

<p>
Try and suppress this desire. Maybe suck on something sugary for five
minutes instead. It will pass.
</p>

<p>
Who cares how quickly you can delete a word? Or a line? Or cut and paste
a paragraph? Is the speed at which you can surround a single word with
quotation marks <i>really</i> the limiting factor on your work? You were
unable to write your algorithm because it took you too long to do the
copying and pasting? Your startup failed because you weren't typing fast
enough? <i>Really?</i>
</p>

<p>
All those plugins - this goes for the VS Code people too - do you use
them? They seemed like a good idea when you installed them. Free stuff.
But do you ever <i>use</i> them? Are they just filling your screen with more
noise? Was it worth spending those three hours choosing the right colour
scheme?
</p>

<p>
Take a good, long, hard look at what you actually do when you write
code. Is there really that much that you're doing that couldn't be
achieved with Windows Notepad?
</p>

<p>
Your text editor is <i>just another tool</i>. It's a means to an end. It is
not a status symbol. If you're spending more than one percent of your
time setting up an editor&#x2026; stop.
</p>
</div>
</div>

<div id="outline-container-orgb5e4a2b" class="outline-3">
<h3 id="your-terminal-does-not-express-your-individuality">Your terminal does not express your individuality</h3>
<div class="outline-text-3" id="text-your-terminal-does-not-express-your-individuality">
<p>
The perfect font. The perfect colour scheme. The perfect shell.
</p>

<p>
Bash of course. No, not bash. Nobody uses bash any more. Who are you.
Get out of here. No, we use zsh. No, we don't know how to pronounce it
either. But we use it. Or fish. Or something else. It's amazing.
</p>

<p>
We use tmux. Mainly so we can see a big clock. We have a custom prompt.
It tells us how many minutes until our JavaScript framework becomes
obsolete. We have a terminal emulator that emits fireworks as we type.
With a black background. Because we are 10x developers and it's just
like Mr.¬†Robot.
</p>

<p>
Stop. Please. It's a terminal. It's a shell. You can spend a month
customising it and in the end you'll not be a better developer. You'll
just hate the look of whatever abomination you've created and spend
another month making it better. And another. And another&#x2026;
</p>

<p>
Stop worrying about how it looks and just use it. To do some
development. You know. What you were meant to be doing.
</p>
</div>
</div>
</div>

<div id="outline-container-orga537427" class="outline-2">
<h2 id="solutions">Solutions</h2>
<div class="outline-text-2" id="text-solutions">
<p>
I've been told that just moaning about all of this stuff without
supplying any solutions isn't very nice. So I'll try and be nicer.
</p>

<ul class="org-ul">
<li>Languages. Learn more than one. Learn more than two. Travel broadens
the mind. You will learn to love your first language more. You will be
forced to think of new ways of solving old problems. You will
understand computers better. When you talk about languages, talk about
how they differ and how it's nice to do things in different ways.
Caveat: don't just learn how to write <code>hello world</code> in twenty
languages; learn a handful of distinct ones to a good degree. This is
not a waste of time.</li>

<li>Frameworks. If your framework isn't giving you skills and knowledge
you can transfer to the real world, I'd worry. Make sure you know how
it works 'under the hood'. Don't get trapped. Every framework is a
sinking ship. Every single one. And, yes, we are all rats. Don't learn
more than one at a time. Forget everything you can about it when it
finally dumps you.</li>

<li>Editors. This isn't so much advice as some ideas. Delete your plugins,
turn off syntax highlighting, and give it a week. Find ways of using
your skill at programming (you're a programmer, right?) to extend your
editor by using its interactions with the shell. Try changing editors
for a month to try something else. Try using <code>ed</code> for a week.</li>

<li>Terminals. Use the out of the box settings for whatever computer
you're using and wait until you <i>can't</i> do something you <i>need</i> to do
before you start messing with it. Exception: you may have a dark
background if you do all your work in a pitch black room. But maybe
ask yourself why you're doing all your coding in a pitch black room.
Are you OK? Would you like to talk to someone?</li>
</ul>

<hr>

<p>
Cover Image: <i>The Golden Calf</i> by
<a href="https://en.wikipedia.org/wiki/Herrad_of_Landsberg">Herrad of
Landsberg</a>
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/on-developer-fetishes.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Kotlin is Terrible]]></title>
  <description><![CDATA[
<p>
I've been writing a lot of Kotlin at work for the last three months.
Nice shiny new job, nice shiny new language. And for the most part it is
nice and shiny. Think Groovy meets Scala with a sprinkling of something
like Rust or Go.
</p>

<p>
But I'm intolerant in my old age. If you're going to create a new
language in the 21st Century it'd be nice if you didn't make design
decisions that make me want to scream.
</p>

<div id="outline-container-orgdd87dd1" class="outline-2">
<h2 id="how-do-you-say-function">How do you say 'function'?</h2>
<div class="outline-text-2" id="text-how-do-you-say-function">
<p>
Kotlin is partly sold as a more 'functional' Java. Not as functional as
Scala, but getting there.
</p>

<p>
So how do you write a function?
</p>

<pre class="example">
fun addTwo (number: Int): Int {
  return number + 2
}
</pre>

<p>
That's nice and easy - just like C or Go or Java!
</p>

<p>
But maybe that's a bit too verbose - we could just return the result
as&#x2026; an assignment?
</p>

<pre class="example">
fun addTwo (number: Int): Int = number + 2
</pre>

<p>
So now I'd like to use this nice named function to <code>map</code> over a list.
</p>

<pre class="example">
val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map(addTwo)
</pre>

<p>
This, of course, doesn't work. Because &#x2026; wait, what? Why doesn't this
work?
</p>

<p>
Well even though that thing looks like a function, it's going to get
compiled down to some Java bytecode which will turn it into a method on
a class. I have no idea how that happens - but I imagine it's something
like using a different lookup table for variables and functions like we
get in Common Lisp.
</p>

<p>
So we need to reference the function like this:
</p>

<pre class="example">
val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map(::addTwo)
</pre>

<p>
Just&#x2026; just do it. Don't ask why.
</p>

<p>
But what if I just wanted to inline <code>addTwo</code>, like I was writing a
futuristic language like JavaScript?
</p>

<p>
Easy - you just pass in a <code>lambda</code>. These just look like they do in
Groovy, but in Groovy they were called closures.
</p>

<pre class="example">
val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map({number -&gt; number + 2})
</pre>

<p>
You don't even need to use the parenthesese if the last argument to your
function is a Lambda - it can look just like Ruby.
</p>

<pre class="example">
val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map { number -&gt; number + 2 }
</pre>

<p>
And to really round off the fun, we can get rid of <code>number</code> and replace
it with the default receiver - <code>it</code>. Like Groovy!
</p>

<pre class="example">
val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map { it + 2 }
</pre>

<p>
Notice how there's no <code>return</code> in a lambda? It's just like Rust or Ruby
or whatever - each lambda just evaluates to the final expression.
</p>

<p>
In fact, if you <i>do</i> return from a lambda, you'll actually be returning
from the outer function. How useful is that! You'll end up only mapping
over <i>one</i> of the numbers.
</p>

<p>
If you really <i>want</i> to return from the lambda - or block, did I say
that they're sometimes called blocks when they're the last argument?
It's good to have more that one name for the same thing, right? So if
you really want to return early you can use the <code>return@map</code> syntax.
</p>

<p>
Or, you know, use an anonymous function.
</p>

<p>
Oh, did I not mention anonymous functions? They're just like functions,
and lambdas, and closures, and blocks except they have a different
syntax <i>and return works</i>.
</p>

<pre class="example">
val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map(fun (number: Int): Int { return number + 2 })
</pre>

<p>
Or we make it an expression &#x2026; in which case we don't have to return
it&#x2026;
</p>

<pre class="example">
val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map(fun (number: Int): Int = number + 2)
</pre>

<p>
And I've not even mentioned that it's possible to stick an <code>invoke</code>
method on objects to make them behave like functions √° la Scala:
</p>

<pre class="example">
object addTwo {
    invoke(number: Int) = number + 2
}

val listOfNumbers = listOf(1, 2, 3, 4)
listOfNumbers.map(addTwo)
</pre>
</div>
</div>

<div id="outline-container-org47b3fc1" class="outline-2">
<h2 id="so-what-dave">So what, Dave?</h2>
<div class="outline-text-2" id="text-so-what-dave">
<p>
Am I against having different solutions to problems? Certainly not? Do I
hate either implicit or explicit returns? No, nothing that specific.
</p>

<p>
What's grinding my gears is the confusion between the 'Lambda' syntax
and the 'Anonymous Function' syntax. Here the language is letting you
write the same concept - the anonymous function - in two different ways.
And the only discernable advantage of one syntax over the other is the
introduction of the keyword <code>return</code> - the behaviour of each is (or at
least can be made) identical.
</p>

<p>
The saddening part of this that the language has taken the core
(arguably) functional language primitive and made it into two different
things. Both syntaxes reference the same programming concept, but just
by there being two of them the language is introducing an unnecessary
confusion.
</p>

<p>
And that confusion is important, because a (programming) language is a
language we should be able to express ourselves in clearly, without
ambiguity.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/kotlin-a-case-against-syntactic-sugar.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[=dc= and Stack Based Programming]]></title>
  <description><![CDATA[
<p>
Maybe this story is familiar to you: you're working away, hotshot
terminal user that you are. You're a pretty fast typist - not the
<i>fastest</i> for sure, but you're confident. Confident&#x2026; but not always
super accurate.
</p>

<p>
So you're hacking away, moving in and out of directories with <code>cd</code> (and
then immediately typing <code>ls</code> because that's what you do), except this
time you slip and instead of typing <code>cd</code> you somehow typed <code>dc</code>.
</p>

<p>
And then this happens:
</p>

<pre class="example">
$ dc
</pre>

<p>
Nothing. Absolutely nothing. Now the faint of heart would, at this
point, give up. Perhaps a quick <code>^C</code> to make the problem goes away&#x2026;
</p>

<p>
But <i>you</i> are made of bolder stuff! Let me assure you that you've struck
<i>gold</i>! Ancient wisdom, layed down by the wise Unix masters for us to
find. <code>dc</code> comes from a noble heritage, holds many secrets, and has much
to teach us. Come! Come with me friends! Let us explore the wonders of
<code>dc</code>.
</p>

<p>
But first&#x2026;
</p>

<p>
&#x2026; what is <code>dc</code>?
</p>

<div id="outline-container-org1abd44f" class="outline-2">
<h2 id="dc-your-friendly-neighbourhood-reverse-polish-desk-calculator"><code>dc</code>, Your Friendly Neighbourhood Reverse Polish Desk Calculator</h2>
<div class="outline-text-2" id="text-dc-your-friendly-neighbourhood-reverse-polish-desk-calculator">
<p>
<code>dc</code> is a <i>desk calculator</i>, as opposed to a <i>pocket</i> calculator<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
or a computer. In fact, when <code>dc</code> was first written there really weren't
very many pocket calculators: it was 1969.
</p>

<p>
(At this point feel free to cosplay a little to get you in the mood.
Wear an afghan coat, put some flowers in your hair, listen to Jefferson
Airplane, drop a little acid, stare at a mandala, or, whatever, man&#x2026;)
</p>

<p>
So it's a desk calculator. So I can do sums with it, right?
</p>

<pre class="example">
$ dc
2 + 3
dc: stack empty
</pre>

<p>
eh?
</p>

<p>
<code>dc</code> is a <i>reverse Polish</i> desk calculator; it uses Reverse Polish
Notation (RPN). What's Reverse Polish Notation you ask? Well, it's like
Polish Notation only backwards.
</p>

<p>
Sorry, sorry - it's an easy joke to make, which is why I made it.
</p>

<p>
Polish Notation is also known as <i>prefix notation</i>. Instead of all the
mathematical operators like <code>+</code> and <code>-</code>
<code>appearing in between the numbers (infix notation -=2 +
3</code>), in Polish notation they appear at the beginning (=+ 2 3`).
</p>

<p>
The genius of Polish notation is that _it doesn't require parentheses or
operator prescedence to organise an expression.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> Let me
demonstrate: take the sum (in infix notation), <code>2 * (3 + 5)</code>. We know
the answer to be <code>16</code>. But if we shift the parentheses <code>(2 * 3) + 5</code> we
get <code>11</code> instead. To make the expression unambiguous we need the
parentheses to show which numbers belong to which operator.
</p>

<p>
But in Polish Notation we can do the same <i>without</i> the parentheses. The
first expression becomes <code>* 2 + 3 5</code>; the second <code>+ * 2 3 5</code>.
</p>

<p>
Seems a bit funny, doesn't it? The way to think of it is that, everytime
you introduce a new operator like <code>+</code> or <code>*</code>, you start waiting for
enough nubers to arrive on the right hand side for the operator to be
applied.
</p>

<p>
For the first sum we start with <code>*</code>, we then get a <code>2</code> - so whatever
comes next is going to get multiplied by <code>2</code>. But what's next is a <code>+</code> -
so now we have to wait for the <code>+</code> to get enough numbers given to it for
it to become a number. Happily we get a <code>3</code> and a <code>5</code>, so the <code>+</code> turns
out to be a <code>8</code>, which we can then immediately multiply by <code>2</code>.
</p>

<p>
So that's Polish Notation - think of each operator as 'waiting around'
for enough input from the right to do something&#x2026; and then - 'YOMP!' -
it eats the input and becomes a result.
</p>

<p>
Reverse Polish Notation works in exactly the same way, <i>only backwards</i>.
This is what our two sums would look like in RPN: <code>2 3 5 + *</code> (which
evaluates to <code>16</code>), and <code>2 3 * 5 +</code> (which evaluates to <code>11</code>).
</p>

<p>
Instead of each operator waiting for new things on the right, they 'eat
up' things that have already appeared on the left. Looking at the first
sum again, we 'serve up' a <code>2</code>, then a <code>3</code>, then a <code>5</code>. Then a <code>+</code>
appears; it eats the two numbers closest to it on the left - the <code>3</code> and
<code>5</code> - and becomes an <code>8</code>. Then the <code>*</code> appears at the end. It also eats
the two numbers closest to it on the left - which are now a <code>2</code> and the
new <code>8</code>, and spits out the answer, <code>16</code>.
</p>

<p>
Think of the numbers on the right being left on a plate in a row. An
operator turns up on the right and - YOMP! - it eats as many inputs as
it needs and becomes a result (and joins the delicious numbers on the
plate).
</p>

<p>
So we can perform arithmetic in Reverse Polish Notation with <code>dc</code>. Try
it! Type in <code>3 5 +</code> and hit return!
</p>

<pre class="example">
$ dc
3 5 +
</pre>

<p>
Ummm&#x2026; still nothing. Did we break it? Did we do something wrong? No,
there's just one snag: the result is still 'on the plate' - to see it we
need to print it out with the command <code>p</code>. Type it in and hit return
again:
</p>

<pre class="example">
$ dc
3 5 +
p
8
</pre>

<p>
Amazing!
</p>

<p>
Now, here's the next amazing thing: you don't have to type out your sum
all in one go; you can put each number on the plate in order, then send
in an operator to consume them. So we can write the above <code>dc</code>
calculation as:
</p>

<pre class="example">
3
5
+
p
8
</pre>

<p>
hitting return after each line until it prints an <code>8</code> for us.
</p>

<p>
Next fun fact: the <code>8</code> is still on the plate, waiting for us to go on.
So we can keep going with our calculation even after we've printed it:
</p>

<pre class="example">
3
5
+
p
8
2
*
p
16
</pre>

<p>
And there we have it - building up a calculation by pushing things on to
a <i>stack</i> - because that's what this plate really is - and then pulling
them off every time we perform an operation.
</p>

<p>
<code>dc</code> isn't just a calculator - it belongs to a family of <i>stack based
programming languages</i>.
</p>
</div>
</div>

<div id="outline-container-org0ad303f" class="outline-2">
<h2 id="stack-based-programming">Stack Based Programming</h2>
<div class="outline-text-2" id="text-stack-based-programming">
<p>
We're used to programming using <i>variables</i>, as arguments to functions
and as the subject of operations. We add two numbers - assign the result
to a variable. We return values from functions. We maintain the 'state'
of our program either through keeping it in variables, or passing it
around as an argument to functions. No really.
</p>

<p>
In stack based programming, the state is ever present as a stack. You
call a function - it takes the stack, does something with a number of
its values by <code>popping</code> them off the end, and then <code>pushes</code> some values
on again. There are no 'arguments', there is no 'result', there are no
'variables'. There's just this one beautiful stack representing the
state and progress of your program.
</p>

<p>
Even if you're used to programming in different styles and paradigms,
stack based programming is pretty freaky. It blows your mind a little
bit - and that's fun. It's also <i>ridiculously terse</i> - because there's
no assignment going on, or function arguments being bound, all you're
seeing are pure functions being applied to the stack. For instance,
here's a 'simple' pallindrome detector written in the language
Factor:<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>
</p>

<pre class="example">
: palindrome? ( string -- ? ) dup reverse = ;
</pre>

<p>
Breaking it down, we have
</p>

<ul class="org-ul">
<li><code>palindrome?</code> is the name of the function</li>
<li><code>( string -- ? )</code> is the function signature - it takes a string from
the stack and puts on a boolean - <code>?</code></li>
<li><code>dup</code> duplicates the value on the stack</li>
<li><code>reverse</code> reverses the first string on the stack in place</li>
<li><code>=</code> takes two values off the stack and puts on a boolean, true if
they're equal, false otherwise</li>
<li>and <code>;</code> is the end of the function!</li>
</ul>
</div>
</div>

<div id="outline-container-org044f9e4" class="outline-2">
<h2 id="bc-dcs-younger-better-looking-more-successful-brother"><code>bc</code>, <code>dc</code>'s Younger, Better Looking, More Successful Brother</h2>
<div class="outline-text-2" id="text-bc-dcs-younger-better-looking-more-successful-brother">
<p>
Now it's possible that, even after this <i>amazing</i> introduction to stack
based programming and Reverse Polish Notation, you're still not
<i>completely</i> in love with the idea of the <code>+</code> coming at the end of
adding two numbers up. And I can totally understand that.
</p>

<p>
So you'll be happy to learn that your needs were catered for by the
creation of <code>bc</code> - which is just <code>dc</code> but with infix notation. <code>1 + 1</code>
really will add up to <code>2</code> in <code>bc</code> (but it's a little more complicated to
use - have a read of the <code>man</code> page).
</p>
</div>
</div>

<div id="outline-container-org8cc321c" class="outline-2">
<h2 id="dc-in-popular-culture3"><code>dc</code> in Popular Culture<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup></h2>
<div class="outline-text-2" id="text-dc-in-popular-culture3">
<p>
<code>dc</code> had its fifteen minutes of fame when it was used as part of the
one-line implementation of the RSA algorithm in the late 90s. The US
government had, in its infinite wisdom, passed a law to restrict the
publication and sharing of cryptographic tools - including algorithms.
Hacker types weren't too pleased about this - it was essentially making
maths illegal - and so they took to
<a href="http://www.cypherspace.org/rsa/">sharing RSA in some fairly inventive
ways</a>: putting it on ties etc.<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>
</p>

<p>
Here it is:
</p>

<div class="org-src-container">
<pre class="src src-perl">print pack<span style="color: #666666;">"C*"</span>,split<span style="color: #666666;">/\D+/</span>,<span style="color: #666666;">`echo "16iII*o\U@{$/=$z;[(pop,pop,unpack"H*",&lt;&gt;</span>
<span style="color: #666666;">)]}\EsMsKsN0[lN*1lK[d2%Sa2/d0&lt;X+d*lMLa^*lN%0]dsXx++lMlN/dsM0&lt;J]dsJxp"|dc`</span>
</pre>
</div>

<p>
Fairly hard to spot it, but the <code>|dc</code> at the end is taking the input
before and piping it into <code>dc</code>. Quite incredible for a program that's
fifty years old.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
For those of you too young to remember, a pocket calculator is
like the calculator app on your phone, but you can't make phone
calls on it and it's got more buttons.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
For those of you too young to remember, a pocket calculator is
like the calculator app on your phone, but you can't make phone
calls on it and it's got more buttons.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
Well, 'popular' as far as fifty year old command line tools go.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
Well, 'popular' as far as fifty year old command line tools go.
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
These days there'd be a whole Red Bubble store devoted to it.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/dc.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Why learn... about Media Types]]></title>
  <description><![CDATA[
<p>
Media types are used to communicate the type of data being sent over the
web. They are used
</p>

<ul class="org-ul">
<li>in an HTTP response to declare the type of content being sent</li>
<li>in requests to declare what sort of content the client can interpret</li>
<li>in POST requests to declare the type of content being sent.</li>
</ul>

<p>
Basically, wherever there is data on the web, there will be a media type
to tell you what sort of data it is. And if there's not, well there
really ought to be.
</p>

<p>
This article will explain how to interpret a media type and also explain
how they are used in HTTP headers to make sure we get the data that we
can understand.
</p>

<ul class="org-ul">
<li><a href="#who-is-this-for">Who is this for?</a></li>
<li><a href="#where-have-i-seen-media-types-before">Where Have I seen Media Types
Before?</a></li>
<li><a href="#media-type-syntax">Media Type Syntax</a></li>
<li><a href="#media-types-in-http-message-headers">Media Types in HTTP Message
Headers</a></li>
<li><a href="#content-negotiation">Content Negotiation</a></li>
<li><a href="#roll-your-own-media-type">Roll Your Own Media Type</a></li>
<li><a href="#summary">Summary</a></li>
<li><a href="#q-and-a">Q and A</a></li>
</ul>

<div id="outline-container-orgfaad7e7" class="outline-2">
<h2 id="who-is-this-for">Who is this for?</h2>
<div class="outline-text-2" id="text-who-is-this-for">
<p>
This is for web developers who are interested in understanding how to
move data over the web. Some knowledge of HTTP, specifically headers, is
useful but not necessary.
</p>
</div>
</div>

<div id="outline-container-org5a745a7" class="outline-2">
<h2 id="where-have-i-seen-media-types-before">Where Have I Seen Media Types Before?</h2>
<div class="outline-text-2" id="text-where-have-i-seen-media-types-before">
<p>
The first time I saw a media type was when I wrote my first HTML file -
specifically to get some CSS:<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<pre class="example">
&lt;link rel="stylesheet" src="style.css" type="text/css" /&gt;
</pre>

<p>
There's our first media type - <code>text/css</code>.
</p>

<p>
The next place I bumped into them was when I was returning JSON from a
server:
</p>

<pre class="example">
response.contentType = "application/json"
</pre>

<p>
There's another one - <code>application/json</code>.
</p>

<p>
So they're not completely alien to us - they're a way of saying that
"the file is full of CSS", and "I'm sending you some JSON". Let's take a
closer look at these two types while investigating the syntax of media
types.
</p>
</div>
</div>

<div id="outline-container-orgc20ae24" class="outline-2">
<h2 id="media-type-syntax">Media Type Syntax</h2>
<div class="outline-text-2" id="text-media-type-syntax">
<p>
A media type is made up of two fields separated by a <code>/</code>. The first is
the <code>type</code> and the second is the <code>subtype</code>.
</p>

<p>
Straight off we can see that CSS (<code>text/css</code>) has a type of <code>text</code>, and
a subtype of <code>css</code>. The <code>text</code> type is very broad - it says that the
media is just text, which covers quite a few types of content - content
such as:
</p>

<ul class="org-ul">
<li><code>text/html</code> - it's what you're reading right now!</li>
<li><code>text/plain</code> - it's just plain text!</li>
<li><code>text/markdown</code> - what I'm writing this in which will get turned into
<code>text/html</code></li>
<li><code>text/csv</code> &#x2026;</li>
</ul>

<p>
you get the idea.
</p>

<p>
<code>application/json</code> has a subtype of <code>json</code>, which is appropriate as,
well, it <i>is</i> JSON. The <code>application</code> type informs us that this is a
type that's meant to be processed by a application. This kinda makes
sense, as it's JSON, which is meant to be read by computers.
</p>

<p>
(But isn't CSS only meant to be processed by an application? Yes, it is.
Maybe it should have been <code>application/css</code>. Maybe it should have been
<code>text/json</code>. Who knows. Media types are a bit wonky. The whole web is a
bit wonky. Don't worry about it too much. Part of being a web developer
is learning to live with a fair amount of kludge and ambiguity that
happened before some of us were born. Learn to live with it.)
</p>

<p>
Other fun <code>application</code> types are
</p>

<ul class="org-ul">
<li><code>application/pdf</code> for PDFs</li>
<li><code>application/zip</code> for zip files</li>
<li>and many, many more&#x2026;</li>
</ul>
</div>

<div id="outline-container-orge96b886" class="outline-3">
<h3 id="all-the-types">All the types</h3>
<div class="outline-text-3" id="text-all-the-types">
<p>
We've seen <code>text</code> and <code>application</code> types - here's a list of types that
you're likely to come across with examples:
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">type</th>
<th scope="col" class="org-left">purpose</th>
<th scope="col" class="org-left">example</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>application</code></td>
<td class="org-left">media for application consumption</td>
<td class="org-left"><code>application/json</code></td>
</tr>

<tr>
<td class="org-left"><code>audio</code></td>
<td class="org-left">audio media</td>
<td class="org-left"><code>audio/mp3</code></td>
</tr>

<tr>
<td class="org-left"><code>font</code></td>
<td class="org-left">font formats</td>
<td class="org-left"><code>font/ttf</code></td>
</tr>

<tr>
<td class="org-left"><code>image</code></td>
<td class="org-left">visual media</td>
<td class="org-left"><code>image/gif</code></td>
</tr>

<tr>
<td class="org-left"><code>multipart</code></td>
<td class="org-left">media that needs to be sent in parts</td>
<td class="org-left"><code>multipart/form-data</code></td>
</tr>

<tr>
<td class="org-left"><code>text</code></td>
<td class="org-left">plain text</td>
<td class="org-left"><code>text/html</code></td>
</tr>

<tr>
<td class="org-left"><code>video</code></td>
<td class="org-left">video media</td>
<td class="org-left"><code>video/mp4</code></td>
</tr>
</tbody>
</table>

<p>
Type and subtype are the only parts of a media type that are required,
but there are also couple of optional parts.
</p>
</div>
</div>

<div id="outline-container-org5b892cb" class="outline-3">
<h3 id="parameters">Parameters</h3>
<div class="outline-text-3" id="text-parameters">
<p>
Media types can have a list of parameters tagged on to them after a
semicolon. For instance
</p>

<pre class="example">
text/plain;charset=UTF-8
</pre>

<p>
is a <code>text/plain</code> media type that's using the UTF-8 character encoding.
If we want our sweet emojis to work we need to remember to say we're
using UTF-8, or else the client will assume we're writing in ASCII like
1970s cavemen.
</p>

<p>
Parameter types aren't dictated by the media type specification,<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>
and you can have as many of them as you like:
</p>

<pre class="example">
text/plain;charset=UTF-8,blog-post=true,author=gypsydave5
</pre>

<p>
They gain their meaning through context; browsers, for instance, will
look for and use a <code>charset</code> parameter when they read a media type over
HTTP. More on browsers in a bit.
</p>
</div>
</div>

<div id="outline-container-org2a9c67c" class="outline-3">
<h3 id="structured-syntax-name-suffix">Structured Syntax Name Suffix</h3>
<div class="outline-text-3" id="text-structured-syntax-name-suffix">
<p>
This one's a bit weird, but it's also cool, so bear with me. Take a look
at this media type:
</p>

<pre class="example">
image/svg+xml
</pre>

<p>
This is the type for SVG images - Scalable Vector Graphics. <code>image</code> is
the type, <code>svg</code> is the subtype - that's what we'd expect.
</p>

<p>
But what's this <code>+xml</code> doing at the end? Well, as you may already know,
SVGs are written in XML - it's one of the nicest things about them. So
the <code>+xml</code> is telling us that the syntax of SVG is XML; you could say
that XML is the 'base' language for SVG. This is called the 'structured
syntax name', and it's a nice way of letting us know that, hey, you may
not know what SVGs are but, it's OK, it's just XML under the hood so
you'll be fine.
</p>

<p>
(Unless you're me and you panic everytime you hear the word XML and you
find it ridiculous that some people think it's human readable and you
wish that the whole world was represented as JSON, but that's another
story&#x2026;)
</p>

<hr>

<p>
Look, I can tell you're really excited by all these media types. Now you
know how to understand them, you can read the
<a href="https://www.iana.org/assignments/media-types/media-types.xhtml">list
of all the media types</a> that have been registered with IANA, the
Internet Assigned Numbers Authority. Go on, read them all now. I'll
wait.
</p>

<p>
There's a lot, right? Try not to panic - you'll probably only ever use
ten of them at most. But did you see the one for SNES ROMs?
</p>
</div>
</div>
</div>

<div id="outline-container-org883213b" class="outline-2">
<h2 id="media-types-in-http-message-headers">Media Types in HTTP Message Headers</h2>
<div class="outline-text-2" id="text-media-types-in-http-message-headers">
<p>
The most important place you'll use media types is in HTTP messages.
You'll use them to describe the media type of the data you want in the
<code>Accept</code> header of an HTTP Request, and the type of data you're sending
in the <code>Content-Type</code> header of an HTTP Response.
</p>
</div>

<div id="outline-container-org01d32cf" class="outline-3">
<h3 id="the-accept-header">The <code>Accept</code> Header</h3>
<div class="outline-text-3" id="text-the-accept-header">
<p>
The <code>Accept</code> header is the way a client - like your browser - can tell a
server what sort of content it wants.
</p>

<p>
At its simplest it can look like this:
</p>

<pre class="example">
Accept: application/json
</pre>

<p>
If I put this in the header of my request, I'd be making it very clear
to the server that I want JSON back. No questions asked.<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>
</p>

<p>
But say you wanted some audio back from the server, but didn't mind what
subtype - <code>audio/mp3</code> is just as good as <code>audio/wav</code> for you. In this
case you can say:
</p>

<pre class="example">
Accept: audio/*
</pre>

<p>
<code>*</code> represents a wildcard - it means 'give me anything'. The server
could legitimately reply with an <code>audio</code> media type with <i>any</i> subtype.
</p>

<p>
Finally, if you just don't care what comes back from the server you can
just say
</p>

<pre class="example">
Accept: */*
</pre>
</div>
</div>

<div id="outline-container-orga7894ff" class="outline-3">
<h3 id="the-content-type-header">The <code>Content-Type</code> Header</h3>
<div class="outline-text-3" id="text-the-content-type-header">
<p>
<code>Content-Type</code> is the header you should add to an HTTP Response message
to tell the client what they're getting in the response body. This is
how the client knows how to interpret the message that you're sending.
</p>

<p>
The <code>Content-Type</code> header should have one media type, so it could be as
simple as this:
</p>

<pre class="example">
Content-Type: text/html
</pre>
</div>
</div>

<div id="outline-container-org8f02549" class="outline-3">
<h3 id="wait-cant-i-just-use-a-file-extension">Wait, can't I just use a file extension?</h3>
<div class="outline-text-3" id="text-wait-cant-i-just-use-a-file-extension">
<p>
You can imagine that you've got some data that you can get to through a
URL:
</p>

<pre class="example">
http://gypsydave5/data
</pre>

<p>
Maybe if I wanted to get the data as JSON I could request:
</p>

<pre class="example">
http://gypsydave5/data.json
</pre>

<p>
But if I want XML instead I could do:
</p>

<pre class="example">
http://gypsydave5/data.xml
</pre>

<p>
The benefit being that this is pretty easy to understand if I'm used to
using a filesystem - I can just identify the type of file by the
extension, and so I can now do the same with a URL.
</p>

<p>
What's the harm? Probably the most annoying thing is that, even if you
provide an extension as above, you'll <i>still</i> have to provide a
<code>Content-Type</code> header. This is because, on the web, information about
content isn't meant to be encoded in URLs; it's meant to be in the
<code>Content-Type</code> header.
</p>

<p>
Some popular frameworks do this,<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> but it's a bad idea. Don't do it.
</p>

<p>
The biggest problem is that you'll miss out on being able to perform
<i>content negotiation</i>.
</p>
</div>
</div>
</div>

<div id="outline-container-org2c554e6" class="outline-2">
<h2 id="content-negotiation">Content Negotiation</h2>
<div class="outline-text-2" id="text-content-negotiation">
<p>
Pretend you're going to a sandwich shop and your friend asks you to get
a sandwich. Sure, you say, what do you want? I don't know, they say,
what do they have? Um&#x2026; you say, I really don't know - here's the menu
but they've often run out of some of the fillings by this time of day.
</p>

<p>
OK, says your friend, here's what I'd like:
</p>

<blockquote>
<p>
"I want tuna mayo or a New Yorker - either is fine. If they don't have
those, then I'll take an egg salad. And if they don't have an egg
salad, then please, get me anything - I'm starving."
</p>
</blockquote>

<p>
Doesn't sound too bad. You can use your friend's set of sandwich
requirements when you get to the sandwich shop to get them a sandwich
that they'll like.
</p>

<p>
The same thing happens every day on the web, with clients sending a list
of media types over to servers to try and make sure that they'll get
something they like. Take a look at this <code>Accept</code> header of an HTTP
Request sent from a web browser:<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>
</p>

<pre class="example">
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</pre>

<p>
The browser wants one of the above media types. But it's got some
opinions about which ones it would prefer, which it's expressing using
<code>q</code> parameters.<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup> <code>q</code> parameters have a value between <code>1</code> and <code>0</code>,
and the default value of a <code>q</code> parameter (when it's not supplied) is
<code>1</code>.
</p>

<p>
Here's the media types above written out with their <code>q</code> values.
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">media type</th>
<th scope="col" class="org-right">q value</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><code>text/html</code></td>
<td class="org-right">1.0</td>
</tr>

<tr>
<td class="org-left"><code>application/xhtml+xml</code></td>
<td class="org-right">1.0</td>
</tr>

<tr>
<td class="org-left"><code>application/xml</code></td>
<td class="org-right">0.9</td>
</tr>

<tr>
<td class="org-left"><code>*/*</code></td>
<td class="org-right">0.8</td>
</tr>
</tbody>
</table>

<p>
A series of choices ranked by preference. If you or I were going to the
server to get the browser some content, the browser would tell us
something like:
</p>

<blockquote>
<p>
"I really want <code>text/html</code> and <code>application/xhtml+xml</code>. But, if they
don't have those, I'd go for some sweet <code>application/xml</code>. And if they
don't have that then, whatever, just get me anything."
</p>
</blockquote>

<p>
Which is really what you'd want a browser to do - you always want to get
<i>something</i> back.
</p>

<pre class="example">
Accept: audio/*
</pre>

<p>
Is like we're being sent to the record store:
</p>

<blockquote>
<p>
"Could you get me the new Nirvana album?<sup><a id="fnr.7" class="footref" href="#fn.7">7</a></sup> I don't care if it's on
vinyl, tape or CD. Hell, 8 Track will do. Just make sure I can listen
to it, OK - I don't just want the poster."
</p>
</blockquote>

<p>
This is <i>content negotiation</i> - our request to the server has given it
our preferences regarding the content type we get back. It can go
through those prefences, looking at what content types it can return,
and give us the type that matches the most closely.
</p>
</div>

<div id="outline-container-org0c8665f" class="outline-3">
<h3 id="content-negotiation-and-testing">Content Negotiation and Testing</h3>
<div class="outline-text-3" id="text-content-negotiation-and-testing">
<p>
It's easier to write tests on the data that builds an HTML page than the
HTML itself. If you build your application with content negotiation, you
can test the contents of a 'page' by requesting the JSON representation
rather than the HTML representation.
</p>
</div>
</div>
</div>

<div id="outline-container-org4bea9d1" class="outline-2">
<h2 id="roll-your-own-media-type">Roll your own media type</h2>
<div class="outline-text-2" id="text-roll-your-own-media-type">
<p>
You can invent your own media types, and it's not as rare as you might
think. In fact it's a powerful technique for writing web APIs. The media
type specification has space for subtypes that aren't registered (and
should never be registered). They start with <code>x-</code>:<sup><a id="fnr.8" class="footref" href="#fn.8">8</a></sup>
</p>

<pre class="example">
application/x-myapplication-orderstatus+json
</pre>

<p>
This could be the media type for the order status in my application.
<code>+json</code> lets everyone know that it's written in JSON, but we've tightly
specified that the content is a part of <code>myapplication</code> - it's not just
any old JSON.
</p>

<p>
This is just vanity if you don't choose to leverage it to pass on
additional information about the media type. For instance, if you want
to change the structure of the
<code>application/x-myapplication-orderstatus+json</code> media type, you can add a
version parameter:<sup><a id="fnr.9" class="footref" href="#fn.9">9</a></sup>
</p>

<pre class="example">
application/x-myapplication-orderstatus+json;v=1.1
</pre>

<p>
This is very useful when describing the content types that are sent and
received across an evolving REST API.
</p>

<p>
Finally you can <a href="https://www.iana.org/form/media-types">register your
media type with IANA</a> to let the world know how to interact with your
application.
</p>
</div>
</div>

<div id="outline-container-org3b97f2a" class="outline-2">
<h2 id="summary">Summary</h2>
<div class="outline-text-2" id="text-summary">
<p>
We've learned:
</p>

<ul class="org-ul">
<li>The syntax of a media type and what they mean.</li>
<li>How to use a media type in <code>Content-Type</code> headers to declare what
we're sending.</li>
<li>How to use them in <code>Accept</code> headers to control the content type we get
back.</li>
<li>How to use them to perform content negotiation with a server.</li>
</ul>

<p>
Media types are important - they help smooth the path of passing data
around on the web. Using them - and using them well - will help make
your web applications easier for you others to use and understand.
</p>
</div>
</div>

<div id="outline-container-orgd8bfe67" class="outline-2">
<h2 id="q-and-a">Q and A</h2>
<div class="outline-text-2" id="text-q-and-a">
<blockquote>
<p>
Q: "Wait, I didn't put a <code>Content-Type</code> header on the HTML I sent but
my browser still knew it was HTML - what gives?"
</p>
</blockquote>

<p>
A: There are ways of working out the media type of data; go read up on
<a href="https://en.wikipedia.org/wiki/Content_sniffing">content sniffing</a>.
</p>

<blockquote>
<p>
Q: Wait, don't you mean MIME types?
</p>
</blockquote>

<p>
No, I don't. MIME means <i>Multipurpose Internet Mail Extensions</i> and was
the first place that media types were used. But since they're not used
solely for 'internet mail' (email to you and me), the proper name is
'media type'. People still tend to use MIME, media and content type
interchangeably, but now you know the right answer you can look smug at
parties and demand a pay rise.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
This is HTML4 - you don't need to include the type in HTML5. But
that would ruin this perfectly good example.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Apart from <code>q</code>, this one <i>is</i> specified.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
In fact the server should send back a 406: Not Acceptable code if
it can't supply the media type asked for&#x2026; but this rarely
happens.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
<a href="https://github.com/rails/activeresource">Active Resource in
Rails</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
In this case Firefox.
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
The <code>q</code> stands for quality. I'm not even joking.
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7">7</a></sup> <div class="footpara"><p class="footpara">
I am very much down with popular culture.
</p></div></div>

<div class="footdef"><sup><a id="fn.8" class="footnum" href="#fnr.8">8</a></sup> <div class="footpara"><p class="footpara">
or <code>x.</code>. In fact <code>x.</code> is preferred by IANA but <code>x-</code> is more
widely used.
</p></div></div>

<div class="footdef"><sup><a id="fn.9" class="footnum" href="#fnr.9">9</a></sup> <div class="footpara"><p class="footpara">
You could also try
<code>application/x-myapplication-orderstatus_1.0+json</code> - it depends
on how you want to parse the version information and what your
versioning policy is (how compatible the versions are).
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2019-04-07-media-types.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[How I Write Blog Posts These Days]]></title>
  <description><![CDATA[

<div id="outline-container-orgc766b24" class="outline-2">
<h2 id="editor-vim">1. Editor: Vim</h2>
<div class="outline-text-2" id="text-editor-vim">
<p>
I write my Markdown in Vim. Or Emacs in Evil mode, which is Vim
emulation in Emacs. Why? Well, I find the manipulation of text - any
text - really quick and easy in Vim. Moving paragraphs, changing words,
deleting sentences - Vim is aware of the structure of natural language,
which makes using it to edit blog posts quite easy.
</p>
</div>
</div>

<div id="outline-container-orgf5369fc" class="outline-2">
<h2 id="format-markdown">2. Format: Markdown</h2>
<div class="outline-text-2" id="text-format-markdown">
<p>
Markdown is both wonderful and terrible. Wonderful as it's <i>everywhere</i>,
is human readable, and supports the structures you want to use for
technical writing - i.e.¬†code blocks. Terrible because there is no
standard and so the HTML you'll get out of the other end of a parser is
not consistent between parsers.
</p>

<p>
Think this isn't too much trouble? I have to join all the lines in a
paragraph to a single line when I'm posting on Dev.to as the Markdown
parser treats all the line breaks in a paragraph as hard breaks.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
It's this inconsistency in Markdown parsers that makes me avoid (or at
least not rely on) Markdown linters and previewers in my editors. I tend
to wait until the post is near finished before I see what it looks like
with stage 5 (see below).
</p>

<p>
Still, the benefits outweigh the drawbacks and so Markdown it is.
</p>
</div>

<div id="outline-container-orgd657793" class="outline-3">
<h3 id="grammar-and-spelling-aspell-style-and-diction">3. Grammar and Spelling: aspell, style and diction</h3>
<div class="outline-text-3" id="text-grammar-and-spelling-aspell-style-and-diction">
<p>
Markdown posts like this can be sent to
<a href="http://aspell.net/"><code>aspell</code></a>, a handy interactive and extensible
spellchecker. Good editor integration for aspell exists in both Vim and
Emacs.
</p>

<p>
<a href="https://www.gnu.org/software/diction/diction.html"><code>style</code> and
<code>diction</code></a> are a pair of tools that check for grammar mistakes and
readability. <code>diction</code> picks up on clich√©s, doubled-words and potential
misspellings. It's <i>sometimes</i> wrong but it gets you thinking about
whether you could word things better and so makes an excellent starting
point.
</p>

<p>
<code>style</code> describes how readable your document is through a series of
scores -
<a href="https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests">Flesch-Kinkaid</a>
for instance. It's interesting information.
</p>
</div>
</div>

<div id="outline-container-orgd7e0397" class="outline-3">
<h3 id="storage-github">4. Storage: GitHub</h3>
<div class="outline-text-3" id="text-storage-github">
<p>
I keep my posts <a href="https://github.com/gypsydave5/gypsydave5.github.io">on
GitHub</a>. If someone spots a mistake in what I've written then at least
this way they can open a pull request.
</p>
</div>
</div>

<div id="outline-container-orga259b0c" class="outline-3">
<h3 id="my-site-static-site-github-pages">5. My Site: Static Site + GitHub Pages</h3>
<div class="outline-text-3" id="text-my-site-static-site-github-pages">
<p>
I've been using <a href="https://pages.github.com/">GitHub Pages</a> to host my
blog as a static site since forever. It's an easy enough hosting
solution and you can use it with any number of static site generators to
turn your Markdown into HTML.
</p>

<p>
I wrote <a href="https://github.com/gypsydave5/blawg">my own static site
generator</a> because I found every one I tried a little too busy for my
liking. It's <i>still</i> too busy for my liking and I reckon it could be
scrapped in favour of <a href="https://pandoc.org/">Pandoc</a> and a few glue
scripts, but it was fun to write. I wouldn't use it if I were you.
</p>

<p>
I have a
<a href="https://github.com/gypsydave5/gypsydave5.github.io/blob/source/publish.sh">horrible
bash script</a> to publish the blog, and it looks
<a href="http://blog.gypsydave5.com/">like this</a> when it's published.
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Would be annoying if it wasn't for Vim's =J=oin command&#x2026;
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2019-04-02-how-i-write-blog-posts.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Why learn... REST? Part 1: Resources]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li><a href="#who-is-this-for">Who is this for?</a></li>
</ul>

<div id="outline-container-org7b3a448" class="outline-2">
<h2 id="who-is-this-for">Who is this for?</h2>
<div class="outline-text-2" id="text-who-is-this-for">
<p>
This is for&#x2026; me! I've been working for however many years and still
don't know how REST is meant to work. You may think REST is about making
sure you use POST for a new 'thing' rather than 'PUT', and 'DELETE' to
remove a 'thing' unless it's from a browser. This is pretty much my
position up to a few days ago.
</p>

<p>
REST is a lot more interesting, and relies on some truly beautiful
abstractions.
</p>
</div>
</div>

<div id="outline-container-org917c72f" class="outline-2">
<h2 id="the-world-wide-web">The World Wide Web</h2>
<div class="outline-text-2" id="text-the-world-wide-web">
<p>
REST is a model of distributed computing built upon the World Wide Web.
So if we're going to understand REST we're going to need a grasp on how
the Web works. Don't worry, this isn't goind to be the low-level
details - we're not going to be talking about the intricacies of TCP/IP
architecture or what an HTTP message looks like. This isn't technical -
if anything it's harder: it's abstract.
</p>
</div>
</div>

<div id="outline-container-orgdadbab0" class="outline-2">
<h2 id="in-the-beginning">In the beginning&#x2026;</h2>
<div class="outline-text-2" id="text-in-the-beginning">
<p>
When the Web was built there were no abstractions; it was very simple. A
Uniform Resource Locator (URL<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>) pointed to a file on a computer
somewhere else, and when you requested that URL that file was sent to
your computer.
</p>

<p>
So imagine it's 1995 and you're working at CERN and you want to write a
page. But you've forgotten what all the HTML tags are because there are
so many of them.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> So you'd open your web browser, which you wrote
yourself because, hey, you're Tim Berners-Lee now (it's your imagination
so why not?), and you type in a URL:
</p>

<pre class="example">
http://info.cern.ch/hypertext/WWW/MarkUp/Tags.html
</pre>

<p>
And you get a page of HTML, that you probably wrote, that tells you
about HTML tags that you probably came up with, served up by the web
server that you also wrote because, yes, you're Tim Berners-Lee.
</p>

<p>
This is the simplest way to think about the Web: you request an HTML
document from a server and it finds that document. The path to the file
on the server is <code>/hypertext/WWW/MarkUp/Tags.html</code> - it's just like a
directory structure on a computer.
</p>

<p>
If you've ever [built a static site][staticSite] this is exactly the
type of behaviour you're used to.
</p>

<p>
But there's another feature to your web server - the ability to
dynamically create the response that gets sent back. All of a sudden you
don't have to have a file in a directory to send back. It could be
anything.
</p>

<p>
For instance, it could be
<a href="https://www.cl.cam.ac.uk/coffee/coffee.html">a picture of the office
coffee machine this second</a>, so you know whether there's any coffee in
it:
</p>

<pre class="example">
https://www.cl.cam.ac.uk/coffee/xvcoffee.html
</pre>

<p>
or a way to search for pages with a certain word in:
</p>

<pre class="example">
http://info.cern.ch/search?term=h3
</pre>

<p>
or even just the current time:
</p>

<pre class="example">
http://time.gypsydave5.com/now
</pre>

<p>
Each of these URLs' responses should be generated on the server. So the
URLs are no longer the paths to a file which is returned when it is
requested, they're &#x2026; what? What does the URL mean if it is no longer a
way of getting a document from a filesystem? And what do you get if not
a document?
</p>
</div>
</div>

<div id="outline-container-org9a88958" class="outline-2">
<h2 id="representations-and-resources">Representations and Resources</h2>
<div class="outline-text-2" id="text-representations-and-resources">
<p>
What is the current time? Try and pick the right one:
</p>

<blockquote>
<p>
About half past one
</p>
</blockquote>

<blockquote>
<p>
Thirty-seven minutes past one in the afternoon
</p>
</blockquote>

<blockquote>
<p>
Halb eins uhr
</p>
</blockquote>

<blockquote>
<p>
13:37
</p>
</blockquote>

<pre class="example">
{
    "hour": "13",
    "minute": "37",
    "second": "35",
}
</pre>

<blockquote>
<p>
2019-01-01 13:37:35
</p>
</blockquote>

<blockquote>
<p>
1546349825
</p>
</blockquote>

<p>
or even
</p>

<p>
<a href="http://todo.com">http://todo.com</a>
</p>

<p>
Did you pick the right one? Is there a right one? What is 'now'? Can you
touch it? Can you taste it? Can point to it for me?
</p>

<p>
Sorry to get all philosophical, but 'now' is definitely <i>abstract</i> -
it's not a thing that you can see (like a document), but more of a
concept. But it's a concept that we can see represented in all of the
examples above - none of them 'is' 'now', but all of them are
representations of 'now'.
</p>

<p>
This is one of the key mental leaps that REST asks you to make - that
URLs are abstract things called <i>resources</i>. You will never have direct
access to a resource through HTTP; what you will get are
<i>representations</i> of that resource.
</p>

<p>
So which of the above representations is correct? All of them, of
course! So which one should we send back when someone requests
<code>http://time.gypsydave5.com/now</code>? Whichever one seems right to you.
</p>
</div>

<div id="outline-container-orgdae1013" class="outline-3">
<h3 id="content-negotiation">Content Negotiation</h3>
<div class="outline-text-3" id="text-content-negotiation">
<p>
But perhaps we'd like to
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
You will also see the terms <i>URI</i> (Universal Resource Indicator),
<i>URN</i> (Universal Resource Name) and <i>IRI</i> (International Resource
Indicator). These all have specific meanings and were introduced
to try to clean up the specification. Some people will now claim
to be clever by saying that we <i>should</i> say URI rather than URL.
But the w3c are nothing if not pragmatic about these things; the
<a href="https://url.spec.whatwg.org/#goals">living spec</a> for URLs now
says that we should "Standardize on the term URL. URI and IRI are
just confusing". Confusing and only ever used to make some people
feel smug and other people feel like outsiders so let's just
stick with URL.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Unless you want to edit the file everytime the time changes. Or
you could set up a repeating task on the server to change the
file.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2019-03-25-why-learn-rest.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Why learn... a statically typed language?]]></title>
  <description><![CDATA[
<p>
Most people's first programming language is a dynamically typed,
interpreted language - JavaScript, Python or Ruby. These are good
languages to learn programming with, and you can be productive with all
three of them. But there's a separate category of languages in
widespread use: statically typed, compiled languages - C, Go, Java, C#
and others. This article will try to explain the difference between the
two language categories, look at their advantages and disadvantages, and
then consider what would be a good choice of statically typed language
for a programmer who is only familiar with dynamically typed languages
to learn.
</p>

<ul class="org-ul">
<li><a href="#who-is-this-for">Who is this for?</a></li>
<li><a href="#what-is-a-statically-typed-compiled-language">What is a statically
typed, compiled language?</a></li>
<li><a href="#advantages">Advantages</a></li>
<li><a href="#disadvantages">Disadvantages</a></li>
<li><a href="#where-should-i-start">Where should I start?</a></li>
</ul>

<div id="outline-container-org91d40fb" class="outline-2">
<h2 id="who-is-this-for">Who is this for?</h2>
<div class="outline-text-2" id="text-who-is-this-for">
<p>
The target audience of this article is someone who is comfortable with
programming in a dynamically typed language and who is interested in
learning a statically typed language, and wants to know why it is worth
while. The examples are in JavaScript, TypeScript, Python and Go, but no
knowledge of these languages is required. This is based on my own
experience of being a self-taught developer who started working in Ruby
and JavaScript and has extended to languages like Go, TypeScript, Kotlin
and Rust.
</p>
</div>
</div>

<div id="outline-container-org53a35b9" class="outline-2">
<h2 id="what-is-a-statically-typed-compiled-language">What is a statically typed, compiled language?</h2>
<div class="outline-text-2" id="text-what-is-a-statically-typed-compiled-language">
<p>
There are two pairs of opposites to look at here: <i>dynamically typed</i>
vs.¬†/statically typed/, and <i>compiled</i> vs.¬†/interpreted/. Let's go
through them in that order.
</p>
</div>

<div id="outline-container-orgcda7edb" class="outline-3">
<h3 id="dynamic-vs-static-typing">Dynamic vs Static typing</h3>
<div class="outline-text-3" id="text-dynamic-vs-static-typing">
<p>
If someone asked you:
</p>

<blockquote>
<p>
What's five added to a banana?
</p>
</blockquote>

<p>
You would be confused - what do they mean? It looks like they've made a
mistake. Maybe they don't know what the meaning of 'add' is, or what a
'banana' is. Maybe they have a different meaning of 'add' to us.
Something has gone wrong somewhere though, as their question doesn't
make sense to us.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Programming languages have a way of telling us that an expression
written in the language do or do not make sense. They do this by using
the <i>type</i> that every value in a programming language has. In
dynamically typed languages we only really become aware of types when we
use a value of one type in the wrong way - when we say something that
doesn't 'make sense'.
</p>

<p>
For instance, in Python we can write this:
</p>

<div class="org-src-container">
<pre class="src src-python">5 + <span style="color: #666666;">"banana"</span>
</pre>
</div>

<p>
Try saving that in a file called <code>typecheck.py</code> and executing it with
<code>python typecheck.py</code>. You should get the following error in your
terminal:
</p>

<pre class="example">
Traceback (most recent call last):
  File "typecheck.py", line 1, in &lt;module&gt;
    5 + "banana"
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</pre>

<p>
This is a type error - you can tell that from the way it says
<code>TypeError</code> in the error message. The error is telling you that you
can't <code>+</code> the types <code>int</code> and <code>str</code> together. Which is fair enough; just
like you don't know how to add together 5 and a banana, neither does
Python.
</p>

<p>
The type error is thrown by a <i>type checker</i>, which checks that all the
types in an expression are being used in the right way. The type checker
kicks in when the Python program runs and checks that the two things
that are being =+=ed together are of the right type.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>
</p>

<p>
Type checking can happen at one of two times: when the program is
running (commonly called 'run time') or sometime before then.
Dynamically typed languages have their types checked at run time - this
is what happened with the Python program we ran above; the type error
become apparent when the program was run. Statically typed languages
have their types checked before they are run.
</p>
</div>

<div id="outline-container-org86a648f" class="outline-4">
<h4 id="type-annotations">Type annotations</h4>
<div class="outline-text-4" id="text-type-annotations">
<p>
In order for the type checker to accurately check the types in a
statically typed language, you will often have to explicitly declare the
type of a variable through a <i>type annotation</i>. A type annotation is a
little extra information you add to a variable to say what type it is.
In English we can imagine adding type annotations to our nouns and verbs
as extra information in parentheses. So our simple sentence:
</p>

<blockquote>
<p>
What's five added to a banana?
</p>
</blockquote>

<p>
Becomes
</p>

<blockquote>
<p>
What's five (which is a number) added (adding is something you do to
numbers) to a banana (which is a fruit)?
</p>
</blockquote>

<p>
Which might be good evidence that natural language is not a place for
type annotations.
</p>

<p>
With these English type annotations we don't need to know what 'five'
is, what a 'banana' is, and what 'addition' is, to know that this
sentence doesn't make sense. We don't even need to know what a 'number'
is. We just know that the verb in the middle needs two nouns to be of
the type 'number' for this sentence to be valid. We could perform this
kind of check automatically just by looking at the words without having
to know anything about their meaning - we can't do 'adding' to a
'fruit'. The type checker in a statically typed language works in the
same way.<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>
</p>

<p>
Let's see a type annotation in TypeScript, a statically typed variation
of JavaScript:
</p>

<pre class="example">
var theNumberFive: number = 5
</pre>

<p>
This declares that the variable <code>theNumberFive</code> has the type <code>number</code>,
and assigns the value <code>5</code> to it.
</p>

<p>
The equivalent in JavaScript would be:
</p>

<pre class="example">
var theNumberFive = 5
</pre>

<p>
Exactly the same, only without the type annotation.
</p>

<p>
We can also add type declarations to function signatures. The function
<code>add</code> in JavaScript:
</p>

<pre class="example">
function add(n1, n2) {
    return n1 + n2
}
</pre>

<p>
looks like this in TypeScript:
</p>

<pre class="example">
function add(n1: number, n2: number): number {
    return n1 + n2
}
</pre>

<p>
We're saying that the function <code>add</code> takes two arguments, <code>n1</code> which is
a <code>number</code> and <code>n2</code> which is a <code>number</code>, and returns a value which is
also a <code>number</code>.
</p>

<p>
These annotations will be used by the TypeScript type checker, which
runs when the TypeScript is <i>compiled</i>.
</p>
</div>
</div>
</div>

<div id="outline-container-org6253b1e" class="outline-3">
<h3 id="compiled-interpreted">Compiled / Interpreted</h3>
<div class="outline-text-3" id="text-compiled-interpreted">
<p>
In an interpreted language such as JavaScript each line of the program
is read and executed in sequence, one after the other,<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> by an
interpreter, which builds up the running process from the program you
wrote, line by line.
</p>

<p>
Compilation is the act of turning the program you've written in one
language into another language. For TypeScript, the target language is
JavaScript. And during the compilation - at 'compile time' - the type
checker will analyze the TypeScript program for any errors.
</p>

<p>
Compilers are usually used to translate a high level programming
language (like JavaScript) into a lower level language like an assembly
language or machine code. In the case of TypeScript, the compiler
outputs another high level language - JavaScript.<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>
</p>

<p>
Compiled vs.¬†interpreted is barely ever a cut and dried distinction when
with a particular programming language - an interpreter will sometimes
have a compilation step which runs just before the code executes,<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup>
and the output of a compiler will have to be run by an interpreter. In
addition, being compiled or interpreted is not a property of the
language itself. There are compilers for languages that are normally
interpreted, and interpreters for languages that are normally compiled.
</p>

<p>
For a statically typed, compiled language, the compilation step is where
the type checker runs. Type checking is useful for the compiler as it
allows it to make optimizations in the performance of the software - if
a variable is always going to be a <code>number</code> it can optimize the memory
locations used.
</p>
</div>
</div>
</div>

<div id="outline-container-org87d4060" class="outline-2">
<h2 id="advantages">Advantages</h2>
<div class="outline-text-2" id="text-advantages">
</div>

<div id="outline-container-org7ff09ba" class="outline-3">
<h3 id="type-checking-catches-mistakes">Type checking catches mistakes</h3>
<div class="outline-text-3" id="text-type-checking-catches-mistakes">
<p>
Let's put this all together and write our example natural language
'expression' in both JavaScript and TypeScript we will soon see one of
the advantages of a statically typed language
</p>

<pre class="example">
var five = 5
var banana = "banana"

function add(n1, n2) {
    return n1 + n2
}

add(five, banana)
</pre>

<p>
which will give us the result
</p>

<pre class="example">
'5banana'
</pre>

<p>
Oh JavaScript&#x2026; more than happy to <code>+</code> <i>anything</i> together.<sup><a id="fnr.7" class="footref" href="#fn.7">7</a></sup> It's
easy to laugh at this sort of error, but I've seen teams working on
JavaScript bugs for days based on a number being stored as a string.
It's an easy mistake to make. It's also the sort of bug that will
<i>never, ever</i> happen to you - until it happens to you.
</p>

<p>
But if we try to replicate the same bug in TypeScript
</p>

<pre class="example">
var five: number = 5
var banana: string = "banana"

function add(n1: number, n2: number): number {
    return n1 + n2
}

add(five, banana)
</pre>

<p>
When we compile this with the TypeScript compiler<sup><a id="fnr.8" class="footref" href="#fn.8">8</a></sup>
</p>

<pre class="example">
add.ts:8:11 - error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.

8 add(five, banana)
            ~~~~~~


Found 1 error.
</pre>

<p>
The TypeScript compiler has caught our mistake and has even underlined
where we went wrong - we can't put a <code>string</code> where a <code>number</code> is meant
to go.
</p>

<p>
This is the biggest advantage of static typing from the programmer's
perspective; the type checker makes sure that we're not doing anything
<i>stupid</i> like using a <code>string</code> like it's a <code>number</code>. All of a sudden
we've got a new level of certainty about how the program we've written
will work - without even running it.
</p>
</div>
</div>

<div id="outline-container-orga182ed0" class="outline-3">
<h3 id="editor-integration">Editor integration</h3>
<div class="outline-text-3" id="text-editor-integration">
<p>
But the fun of type checking doesn't end with compilation - far from it.
Because a type checker can run even before you compile your program it
can integrate with your text editor, to giving you information about
your program as you're writing it. Because the type annotations declare
what the type of a variable is, the editor can now tell you useful
things like which methods are available to use on it.<sup><a id="fnr.9" class="footref" href="#fn.9">9</a></sup>
</p>
</div>
</div>

<div id="outline-container-org3f3b2c8" class="outline-3">
<h3 id="compiled-code-runs-faster">Compiled code runs faster</h3>
<div class="outline-text-3" id="text-compiled-code-runs-faster">
<p>
Compilation doesn't just translate one language into another; the
compiler also looks at your program and tries to work out ways to make
it run faster or more efficiently. Recursive function calls get turned
into simple loops, for instance.
</p>
</div>
</div>
</div>

<div id="outline-container-orgd1d29fe" class="outline-2">
<h2 id="disadvantages">Disadvantages</h2>
<div class="outline-text-2" id="text-disadvantages">
<p>
This all sounds good - but what are the downsides of using a statically
typed, compiled language?
</p>
</div>

<div id="outline-container-orga4ba26d" class="outline-3">
<h3 id="compilation-takes-time">Compilation takes time</h3>
<div class="outline-text-3" id="text-compilation-takes-time">
<p>
Compilation of a program can take a long time. Less time these days with
fast computers and good compilers, but still something like two or three
minutes in the worst cases I've experienced. If your workflow is reliant
on fast, tight feedback loops then you might start to find a compiler
annoying you as your program increases in size.
</p>
</div>
</div>

<div id="outline-container-orge24c7be" class="outline-3">
<h3 id="types-need-more-syntax">Types need more syntax</h3>
<div class="outline-text-3" id="text-types-need-more-syntax">
<p>
If you're used to a dynamically typed language, the verbosity of a
statically typed language can be off-putting. Having to declare the
types of every variable and function parameter can become wearing on the
eyes. A modern language will try to take away the strain of this by
inferring the type of variables where it can, but older statically typed
languages like Java, C#, C++ and C can look verbose.
</p>
</div>
</div>

<div id="outline-container-org5189063" class="outline-3">
<h3 id="the-world-isnt-typed">The world isn't typed</h3>
<div class="outline-text-3" id="text-the-world-isnt-typed">
<p>
The verbosity of a statically typed language is made clear at the
boundaries of a program - where it interacts with 'the world'. A number
of extra steps are required to wrangle the data coming into your system.
This becomes apparent when parsing JSON - to get the full benefit of
types in your system you'll have to take the general <code>JSON</code> type and
turn it into one of your types, which can be pretty arduous. A dynamic
language makes this a lot easier (although more open to type errors as
seen above).
</p>
</div>
</div>

<div id="outline-container-org02f6ae9" class="outline-3">
<h3 id="no-repl-based-development">No REPL based development</h3>
<div class="outline-text-3" id="text-no-repl-based-development">
<p>
Most compiled languages do not have support for a
Read-Evaluate-Print-Loop,<sup><a id="fnr.10" class="footref" href="#fn.10">10</a></sup> and do not lend themselves to the sort
of interactive development seen in languages such as Clojure. If you
work in this way you'll miss it - if you don't it won't make a bit of
difference to you.
</p>
</div>
</div>
</div>

<div id="outline-container-org00e6886" class="outline-2">
<h2 id="where-should-i-start">Where should I start?</h2>
<div class="outline-text-2" id="text-where-should-i-start">
<p>
So what's a good statically typed, compiled language to start with?
</p>

<p>
If I had a lot of experience with JavaScript then there might be a good
argument to try TypeScript, but I find that languages that compile to
JavaScript introduce a layer of overhead and tooling that can stop you
focusing on the language.
</p>

<p>
I would advise steering away from Java as there's a lot of unnecessary
cruft and complication in the language, some of which is a hangover from
C. For instance, compare
</p>

<div class="org-src-container">
<pre class="src src-java"><span style="color: #333333; font-weight: bold; font-style: italic;">User</span> <span style="color: #333333;">user</span> = <span style="color: #333333; font-weight: bold;">new</span> <span style="color: #333333; font-weight: bold; font-style: italic;">User</span>()
</pre>
</div>

<p>
in Java, which always makes me feel like I've written the word <code>user</code> at
least two too many times, to this in Go
</p>

<pre class="example">
user := NewUser()
</pre>

<p>
If you <i>did</i> want to look at a statically typed language built on the
JVM, Kotlin is a good choice.
</p>

<p>
The best choice in my opinion is the <a href="https://golang.org/">Go
programming language</a>. It has a simple type system (there are no
generic types to worry about), the language's syntax is small and easy
to learn, the tooling and documentation are best in class, and it's
increasingly popular. Take a look at the <a href="https://gobyexample.com/">Go
By Example</a> or <a href="https://github.com/quii/learn-go-with-tests">Learn Go
With Tests</a>.
</p>
</div>
</div>

<div id="outline-container-orgf782d98" class="outline-2">
<h2 id="what-do-you-think">What do you think?</h2>
<div class="outline-text-2" id="text-what-do-you-think">
<p>
Do you have any experience of transitioning from dynamically typed
languages to statically typed languages. Or vice versa? What were the
hardest parts? What advice would you offer? Which language(s) do you
think make the best introduction to static typing?
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
We could say that the sentence is syntactically correct, but is
semantically nonsense.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Try and imagine what would happen if there were <i>no types</i> in a
language. All you would have is bits floating around in memory.
How would you know where the 'number' started? Or ended? Or which
bits of the memory were the program? This is why all programming
languages are typed - programming would be impossible without
them.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
Although often the type checker <i>does</i> know the types of the
values it's looking at - it will know that <code>1</code> is a number. This
is how type inference works, helping statically typed languages
become a lot less verbose. For instance in Go we can just say
<code>x :</code> 1= and the type checker will be able to infer the type of
<code>x</code> to be a number.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
There are some subtleties to this - often a language interpreter
will compile parts of the code on the fly, and compiled languages
can have sections of code whose types can only be worked out
after compilation when we run the program (at 'run time').
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
This is sometimes called <i>transpilation</i>.
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
This is called a 'just in time' compiler for obvious reasons.
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7">7</a></sup> <div class="footpara"><p class="footpara">
If you've not watched Gary Bernhardt's
<a href="https://www.destroyallsoftware.com/talks/wat">JavaScriptWAT</a>
video, now would be a good time.
</p></div></div>

<div class="footdef"><sup><a id="fn.8" class="footnum" href="#fnr.8">8</a></sup> <div class="footpara"><p class="footpara">
If you're interested in seeing this for yourself, you will need a
NodeJS environment on your computer. Then you will need to
install the TypeScript compiler from NPM by running
<code>npm install -g typescript</code>. To compile a TypeScript file,
i.e.¬†one called <code>add.ts</code>, run <code>tsc add.ts</code>. The compiled
JavaScript output will be in a file called <code>add.js</code> if there are
no compilation errors.
</p></div></div>

<div class="footdef"><sup><a id="fn.9" class="footnum" href="#fnr.9">9</a></sup> <div class="footpara"><p class="footpara">
This sort of assistance <i>is</i> available in dynamically typed
languages, but not to the same degree.
</p></div></div>

<div class="footdef"><sup><a id="fn.10" class="footnum" href="#fnr.10">10</a></sup> <div class="footpara"><p class="footpara">
There is, of course, some nuance to this. For instance languages
that run, on the Java Virtual Machine (JVM) <i>can</i> support a REPL
by sending the compiled Java Byte Code emitted from the REPL
directly to a running instance of the JVM.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2019-03-05-your-first-statically-typed-language.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Write and deploy a blog in less than thirty seconds]]></title>
  <description><![CDATA[
<p>
What's the fastest way to start a blog? Wordpress? Jekyll?
</p>

<p>
Nah, it's <code>pandoc</code> and <code>now</code>.
</p>

<div id="outline-container-orga6e31be" class="outline-2">
<h2 id="whats-pandoc">What's <code>pandoc</code>?</h2>
<div class="outline-text-2" id="text-whats-pandoc">
<p>
<a href="http://pandoc.org/">Pandoc</a> is a 'universal document converter' - a
swiss army knife fordefault-text-scale changing document type a into
document type b. It's good for lots of things, but today it's going to
be good for turning Markdown (what we like writing in) into HTML (what
we read on a website).
</p>
</div>
</div>

<div id="outline-container-orgf55c7db" class="outline-2">
<h2 id="whats-now">What's <code>now</code>?</h2>
<div class="outline-text-2" id="text-whats-now">
<p>
<a href="https://zeit.co/now">Now</a> is a useful product from Zeit.com for
deploying an application <i>really</i> quickly. It's great for throwing up
something to see how it works. It will serve up Docker images, NodeJS
applications and static sites. Today, we use it for a static site. You
can install it with a simple <code>npm i -g now</code>.
</p>
</div>
</div>

<div id="outline-container-org7e5ebe4" class="outline-2">
<h2 id="on-your-marks-get-set">On your marks, get set&#x2026;</h2>
<div class="outline-text-2" id="text-on-your-marks-get-set">
<p>
So, make sure that you've got <code>pandoc</code> and <code>now</code> installed, that you're
in a nice clean directory and that you've got a connection to the
Internet. And that you know what your favourite editor is. If you don't
have a favourite, pick the one you hate the least.
</p>
</div>
</div>

<div id="outline-container-orgbe5f7c5" class="outline-2">
<h2 id="go">&#x2026; GO!</h2>
<div class="outline-text-2" id="text-go">
<p>
Quickly - open a file called <code>hello-world.md</code> in your favourite editor
and write something like this:
</p>

<pre class="example">
# Hello World

Hello world, this is the world's fastest blog!
</pre>

<p>
Save it - faster, faster! And now run this in the terminal. What? I
didn't tell you to open a terminal session? Quickly, open one and run:
</p>

<pre class="example">
pandoc -o=index.html -to=html5 --standalone hello-world.md
</pre>

<p>
IGNORE THE WARNINGS, we don't have time to explain! Now&#x2026; SHIP IT!
</p>

<pre class="example">
now
</pre>

<p>
<code>now</code> will put your <code>index.html</code> on the Internet. It'll even put the URL
it uploaded it to in your clipboard. Now, open your least hated web
browser and open the URL.
</p>

<p>
Success!
</p>

<p>
The other fifteen seconds is to bask in the glow of your achievement -
you've earned it.
</p>
</div>
</div>

<div id="outline-container-org56c0305" class="outline-2">
<h2 id="more">More?</h2>
<div class="outline-text-2" id="text-more">
<p>
What, you want more than one blog post in your blog? Are you crazy or
greedy? Or both? Such luxury, millenials are so spoiled and entitled
yadda yadda yadda&#x2026;
</p>

<p>
Sure! Try this: open a new file called <code>my-second-post.md</code> and write
your second post in it - I don't care what you write about!
</p>

<p>
Now write <code>index.md</code> - like this:
</p>

<pre class="example">
# My Quick Blog

- [Hello World][hello-world.html]
- [My second post][my-second-post.html]
</pre>

<p>
and now
</p>

<pre class="example">
pandoc -o=index.html --to=html5 --standalone index-world.md
</pre>

<pre class="example">
pandoc -ohello-world.html --to=html5 --standalone hello-world.md
</pre>

<pre class="example">
pandoc -omy-second-post.html --to=html5 --standalone my-second-post.md
</pre>

<p>
finally, once again
</p>

<pre class="example">
now
</pre>

<p>
Paste the new URL in your browser and&#x2026;
</p>

<p>
BOOM! You now have a blog with an index page and two posts. Do a little
dance!
</p>
</div>
</div>

<div id="outline-container-orgfbb5d9e" class="outline-2">
<h2 id="things-you-can-now-try-out">Things you can now try out</h2>
<div class="outline-text-2" id="text-things-you-can-now-try-out">
<ul class="org-ul">
<li>We're programmers - we don't like to do things twice! Write something
to loop over the <code>.md</code> files in your directory to turn them into
<code>.html</code> with <code>pandoc</code> rather than doing every file by hand. Bash,
Ruby, JavaScript - whatever is easiest!</li>
<li>It's not fun to have to change the URL of your blog every time you
deploy it. <code>now</code> has a way you can alias a deployment to a permanent
URL - why not take a look at how that's done.</li>
<li>Your blog is <i>ugly</i>. Not going to lie. You should add some CSS.
<code>pandoc</code> has a way to include a CSS file in the html - you need to add
the flag <code>--css=file.css</code> to your <code>pandoc</code> call (once you've written
some good looking CSS that is)</li>
<li>Stop ignorning the warnings! Take a look at how to add metadata to
your Pandoc markdown - it's all in the Pandoc documentation</li>
</ul>

<p>
Have fun
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2018-10-19-pandoc-blog.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Kotlin a Go Go]]></title>
  <description><![CDATA[

<div id="outline-container-orgd0429cc" class="outline-2">
<h2 id="say-hello-kotlin">Say 'Hello, Kotlin!'</h2>
<div class="outline-text-2" id="text-say-hello-kotlin">
<p>
As a part of my (fantastic) new job I've had the opportunity to use
fresh and exciting new programming language, Kotlin.
</p>

<p>
Cooked up by the people who make IntelliJ IDEA - JetBrains - Kotlin is
yet another JVM language that wants to be a nice Java. Yes, I know, it
feels like this sort of thing happens once every six months. But I've
spent a good month with Kotlin an I think it's got some great ideas.
</p>

<p>
Let me show off a quick example using a neat http library (it's barely a
framework), called HTTP4K.
</p>
</div>
</div>

<div id="outline-container-org972d2f1" class="outline-2">
<h2 id="say-hello-http4k">Say 'Hello, HTTP4K'</h2>
<div class="outline-text-2" id="text-say-hello-http4k">
<p>
I can't mention HTTP4K without mentioning it's central cleverness: it
treats clients and servers as functions that deal with the same sort of
objects - the http request goes in, http response comes out. A server is
a function that waits for an http request and, when it gets one, returns
an http response. And a client is a function that sends an http request
over the wire, and then returns with an http response.
</p>

<p>
The insight here is that they're the <i>same function</i> in different
contexts. To make a server, just plug your <code>request -&gt; response</code>
function into a server context. To make a client, plug the same function
into a client.
</p>

<p>
HTTP4K calls these functions handlers. On the server side, a bundle of
these handlers tied to a collection of different routes is, perhaps
unsurprisingly, called a <code>router</code>.
</p>
</div>
</div>

<div id="outline-container-org18ed1e2" class="outline-2">
<h2 id="first-take-at-adding-some-routes">First take at adding some routes</h2>
<div class="outline-text-2" id="text-first-take-at-adding-some-routes">
<p>
A project I'm working on has a collection of routes for internal use
only - you know the sort of thing <code>/internal/ping -&gt; OK</code>,
<code>/internal/owner -&gt; DAVE</code>,
<code>/internal/config -&gt; {"owner": "DAVE", "team": "Dave Team"}</code>, along with
the normal app routes like <code>/sum?n=1&amp;n=2 -&gt; 3</code>. That could look
something like this in Kotlin with HTTP4K:
</p>

<pre class="example">
fun router(config: Config): HttpHandler =
    routes(
        "/sum" bind GET to {request: Request -&gt;
            val numbers = request.queries("n").map { it?.toInt() ?: 0 }
            Response(OK).body(numbers.sum().toString())
        },
        "/product" bind GET to {request: Request -&gt;
            val numbers = request.queries("n").map { it?.toInt() ?: 1 }
            Response(OK).body(numbers.product().toString())
        },
        "/interal/config" bind GET to { _ -&gt; Response(OK).body(config.toString()) },
        "/internal/ping" bind GET to { _ -&gt; Response(OK).body("OK") },
        "/internal/owner" bind GET to { _ -&gt; Response(OK).body(config.owner) }
    )
</pre>

<p>
Now there are a number of improvements that can be made here (duplicated
code, a radical lack of error handling), but what I'd like to look at
here is separating the <code>/internal</code> routes out from the routes that the
app actually uses. This is a really good practice as it stops your main
router looking like a godawful dumping ground of every route under the
sun, and also (in HTTP4K) it will let you test each collection of routes
in isolation.
</p>

<p>
So what I want is something like
</p>

<pre class="example">
fun router(config: Config): HttpHandler =
    routes(
        "/" bind AppRoutes(),
        "/internal" bind InternalRoutes(config)
    )
</pre>
</div>
</div>

<div id="outline-container-org533dc9b" class="outline-2">
<h2 id="extracting-internal-routes">Extracting internal routes</h2>
<div class="outline-text-2" id="text-extracting-internal-routes">
<pre class="example">
class InternalRoutes(val config: Config) {
    "/config" bind GET to { _ -&gt; Response(OK).body(config.toString()) },
    "/ping" bind GET to { _ -&gt; Response(OK).body("OK") },
    "/owner" bind GET to { _ -&gt; Response(OK).body(config.owner) }
}
</pre>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2017-11-17-kotlin-a-go-go.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Lambda Calculus 4 - Logic with Church Booleans]]></title>
  <description><![CDATA[
<p>
I found Church numbers pretty tough, and I'm still not sure I fully
understand them. But this post should be a little bit easier. I promised
logic for this post, and logic I will give you. But not right now.
First, it's&#x2026;
</p>

<div id="outline-container-org1ad4d47" class="outline-2">
<h2 id="data-structures-with-functions">Data structures with functions</h2>
<div class="outline-text-2" id="text-data-structures-with-functions">
<p>
As modern 21st century software developers, we're used to a strong
divide between <i>data</i> and <i>process</i>. Even with object orientation we
consider an object to be made of things it knows (the data) and things
it does (the methods).<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
I always picture my programs as big old conveyor belts, where my
program-workers each beat the hell out of a piece of data as it goes
past, until it comes out as a shiny <del>new BMW</del> piece of JSON.
</p>

<p>
Meanwhile, here in the lambda calculus&#x2026; well, we've got numbers for
sure. But how can we get data structures like a piece of shiny JSON? Or
even just a list?
</p>

<p>
Take heart - through the lambda, all things are possible!<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>
</p>

<p>
Let's try the simplest of all data structures - the pair. Simple, sure -
but powerful. Every good Lisper knows that the can build any data
interface you can conceive using enough pairs. If Lisp was written by
Archimedes, he'd say "Give me a place to stand and enough <code>cons</code> cells
and I shall move the earth".
</p>

<p>
To get a pair as a data structure up and flying, we need three
functions. One to make a pair out of two arguments, one that returns the
first item in the pair, and another that returns the second item.
Lispers will say "Ah! <code>cons</code>, <code>car</code> and <code>cdr</code>!", but we will say \(pair\),
\(first\) and \(second\).
</p>

<p>
First \(pair\):
</p>

<p>
\[
pair\quad \equiv \quad \lambda p.\lambda q.\lambda f.\ f\ p\ q
\]
</p>

<p>
We take the two things we're pairing - that much makes sense - but then
we take one more argument and apply it, first to the first argument, and
then the result of that to the second argument.
</p>

<p>
What's going on?
</p>

<p>
We want something like $ first &lt; aPair &gt; $ to give us back the first
item that we gave to the pair. So the final \(f\) in pair is going to be
offered both \(p\) and \(q\) and left to decide which one it wants.
</p>

<p>
\[
first\quad \equiv \quad \lambda pair. pair\ (\lambda a.\lambda b.\ a)
\]
</p>

<p>
\(first\) takes a pair, and then gives that pair a function that takes two
arguments and returns&#x2026; well, the first one. Given that, it's a doddle
to write \(second\):
</p>

<p>
\[
second\quad \equiv \quad \lambda pair. pair\ (\lambda a.\lambda b.\ b)
\]
</p>

<p>
Same again, but this time we evaluate to the second of the arguments.
</p>

<p>
Feel free to stick it into a programming language and play with it. Here
it is in Scheme:
</p>

<div class="org-src-container">
<pre class="src src-scheme"><span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">define</span> <span style="color: #333333; font-weight: bold;">pair</span>
    <span style="color: #0287c8;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #b85c57;">(</span>p<span style="color: #b85c57;">)</span>
        <span style="color: #b85c57;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #709870;">(</span>q<span style="color: #709870;">)</span>
            <span style="color: #709870;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #907373;">(</span>f<span style="color: #907373;">)</span>
                <span style="color: #907373;">(</span><span style="color: #6276ba;">(</span>f p<span style="color: #6276ba;">)</span> q<span style="color: #907373;">)</span><span style="color: #709870;">)</span><span style="color: #b85c57;">)</span><span style="color: #0287c8;">)</span><span style="color: #40883f;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-scheme"><span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">define</span> <span style="color: #333333; font-weight: bold;">first</span>
    <span style="color: #0287c8;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #b85c57;">(</span>p<span style="color: #b85c57;">)</span> <span style="color: #b85c57;">(</span>p <span style="color: #709870;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #907373;">(</span>a<span style="color: #907373;">)</span> <span style="color: #907373;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #6276ba;">(</span>b<span style="color: #6276ba;">)</span> a<span style="color: #907373;">)</span><span style="color: #709870;">)</span><span style="color: #b85c57;">)</span><span style="color: #0287c8;">)</span><span style="color: #40883f;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-scheme"><span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">define</span> <span style="color: #333333; font-weight: bold;">second</span>
    <span style="color: #0287c8;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #b85c57;">(</span>p<span style="color: #b85c57;">)</span> <span style="color: #b85c57;">(</span>p <span style="color: #709870;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #907373;">(</span>a<span style="color: #907373;">)</span> <span style="color: #907373;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #6276ba;">(</span>b<span style="color: #6276ba;">)</span> b<span style="color: #907373;">)</span><span style="color: #709870;">)</span><span style="color: #b85c57;">)</span><span style="color: #0287c8;">)</span><span style="color: #40883f;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org457309d" class="outline-2">
<h2 id="booleans">Booleans</h2>
<div class="outline-text-2" id="text-booleans">
<blockquote>
<p>
What is truth? said jesting Pilate, and would not stay for an answer.
&#x2014; Francis Bacon, <i>On Truth</i>
</p>
</blockquote>

<p>
Well, I hope you do stay for an answer. And there <i>is</i> an answer, at
least for the concerns of the lambda calculus, but it's not going to be
particularly life altering. In fact, it's probably going to remind you
most of the solution to what a number is.
</p>
</div>
</div>

<div id="outline-container-orgb0f3e0d" class="outline-2">
<h2 id="numbers-again">Numbers&#x2026; AGAIN!</h2>
<div class="outline-text-2" id="text-numbers-again">
<p>
When we defined numbers a few posts ago, I was being fairly adamant that
the best way to encode a number using functions would be to count the
number of applications of a function. Remember - \(zero\) was no
applications, \(one\) was one, etc.
</p>

<p>
But this ain't necessarily so - we could implement numbers using the
definition of pairs above:
</p>

<p>
\[
zero \quad \equiv \quad \lambda x\ x
\]
</p>

<p>
\[
succ \quad \equiv \quad \lambda n.\ pair\ \<FALSE\>\ n
\]
</p>

<p>
Here we've defined \(zero\) as the identity function, and \(succ\), the
successor, as a pair of \(\<FALSE\>\) to whatever the previous number was.
Each number is now 'counting' using the number of times that \(zero\) has
been paired up with \(\<FALSE\>\).
</p>

<p>
We can now go on to define other functions around this implementation -
and we will - but the key thing I'd like to stress is that what makes a
number a number isn't really what it <i>is</i>, but rather how it <i>behaves</i> -
how it behaves when being used with other functions like \(add\) and
\(multiply\).
</p>

<p>
Let's use that insight to imagine what \(true\) and \(false\) might be.
</p>
</div>
</div>

<div id="outline-container-org2a5e7d1" class="outline-2">
<h2 id="if-then-else">if &#x2026; then &#x2026; else</h2>
<div class="outline-text-2" id="text-if-then-else">
<p>
Every programming language I've ever worked in has some sort of <code>if</code>
expression or statement - a way of choosing one bit of code or another
based on whether something was true or false. You know:
</p>

<div class="org-src-container">
<pre class="src src-ruby"><span style="color: #333333; font-weight: bold;">if</span> (1 + 1 == 2)
    <span style="color: #333333; font-weight: bold;">puts</span> <span style="color: #666666;">"One and one is two!"</span>
<span style="color: #333333; font-weight: bold;">else</span>
    <span style="color: #333333; font-weight: bold;">puts</span> <span style="color: #666666;">"Maths is broken!"</span>
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
We could think of <code>if</code> as being a function in the lambda calculus:
</p>

<p>
\[
if \quad \equiv \quad \lambda bool.\lambda t.\lambda f.\ tOrf
\]
</p>

<p>
This is fine, but gets us nowhere. But what if there were two different
functions, one of which we used for true booleans, and one of which we
used for false ones. Yes, I know, that would make no sense - you'd have
to know which one to use. But humour me.
</p>

<p>
\[
ifTrue \quad \equiv \quad \lambda bool.\lambda t.\lambda f.\ t
\]
</p>

<p>
\[
ifFalse \quad \equiv \quad \lambda bool.\lambda t.\lambda f.\ f
\]
</p>

<p>
We're not even using the boolean any more, we're just saying that if the
boolean is true, we evaluate to first argument, and if it's false we
evaluate to the second argument.
</p>

<p>
If we're not using the lambda that takes a boolean - the
\(\lambda bool\) - we can get rid of it from the end.
</p>

<p>
\[
true \quad \equiv \quad \lambda a.\lambda b.\ a
\]
</p>

<p>
\[
false \quad \equiv \quad \lambda a.\lambda b.\ b
\]
</p>

<p>
And there we have it. We can just say that \(true\) is the function that
returns the first, and \(false\) is the function that returns the second.
</p>

<p>
Wait, can we? Well, why not? All we need really is a function that will
signal one of two things - true or false we can call them. This 'signal'
we choose to be the return of the first or the second of the arguments
it is applied to. Who cares <i>how</i> truth works - this is a mechanism that
does what it needs to do.
</p>
</div>
</div>

<div id="outline-container-org6bde058" class="outline-2">
<h2 id="truth-tables">Truth Tables</h2>
<div class="outline-text-2" id="text-truth-tables">
</div>

<div id="outline-container-org92b471d" class="outline-3">
<h3 id="and">And</h3>
<div class="outline-text-3" id="text-and">
<p>
So now we've got truth going, let's have some fun defining some boolean
operations. First, an easy one - \(and\). And once again we're going to
use the behaviour of \(and\) to give us a clue as to the implementation.
</p>

<p>
What's the behaviour? This might be easier to do if we construct a truth
table. What's a truth table I hear you cry? Well, in logic we can draw
up a table showing the truth or falsity of a proposition (sentence that
is either true or false) based upon the truth or falsity of the
propositions from which it is composed.
</p>

<p>
The truth table is just the exhaustive table of true and false values
that can exist in the proposition, along with the resulting truthfulness
of the overall proposition. A proposition involving 'and' will be made
of two sub-propositions - the two being 'anded' together. Traditionally
these are written as '\(P\)' and '\(Q\)' - and who are we to disagree with
tradition? The symbol '\(\land\)' is often used for 'and', so we'll do the
same here. Finally, true and false will be '\(T\)' and '\(F\)'.
</p>

<p>
$$
</p>
\begin{array}{| c c | c |}
P & Q & P \land Q \\\\
\hline
T & T & T \\\\
T & F & F \\\\
F & T & F \\\\
F & F & F
\end{array}
<p>
$$
</p>

<p>
What can we learn from this? Well, two things:
</p>

<ul class="org-ul">
<li>If \(P\) is false, then the proposition is always false.</li>
<li>If \(P\) is true, then the proposition has the same value as \(Q\)</li>
</ul>

<p>
So we could say something like "if \(P\) then \(Q\) else \(false\)". And as
\(P\) is a boolean as described above, we can pass it a couple of
arguments just like it was an 'if&#x2026; then&#x2026; else'. So we can write
\(and\) as:
</p>

<p>
\[
and \quad \equiv \quad \lambda p.\lambda q.\ p\ q\ false
\]
</p>

<p>
Or, even more concisely:
</p>

<p>
\[
and \quad \equiv \quad \lambda p.\lambda q.\ p\ q\ p
\]
</p>

<p>
As if \(p\) is false we can just evaluate to \(p\)
</p>
</div>
</div>

<div id="outline-container-org9a10b41" class="outline-3">
<h3 id="or">Or</h3>
<div class="outline-text-3" id="text-or">
<p>
'Or' is represented by '\(\lor\)':
</p>

<p>
$$
</p>
\begin{array}{| c  c | c |}
P & Q & P \lor Q \\\\
\hline
T & T & T \\\\
T & F & T \\\\
F & T & T \\\\
F & F & F
\end{array}
<p>
$$
</p>

<p>
The pattern here should be clearer after doing \(and\)
</p>

<ul class="org-ul">
<li>If \(P\) is true, then the proposition is always true.</li>
<li>If \(P\) is false, then the proposition has the same value as \(Q\)</li>
</ul>

<p>
Which can be written in lambdas as:
</p>

<p>
\[
or \quad \equiv \quad \lambda p.\lambda q.\ p\ p\ q
\]
</p>
</div>
</div>

<div id="outline-container-orgcff5136" class="outline-3">
<h3 id="not">Not</h3>
<div class="outline-text-3" id="text-not">
<p>
'Not' is nice and short as a truth table. We will use \(\lnot\) to
represent it
</p>

<p>
$$
</p>
\begin{array}{ c | c }
P & \lnot P \\\\
\hline
T & F \\\\
F & T
\end{array}
<p>
$$
</p>

<p>
We just need to flip \(P\) around - if it was true (returning the first
argument), we make it return false (return the second argument), and
vice versa.
</p>

<p>
Like this:
</p>

<p>
\[
not \quad \equiv \quad \lambda p.\lambda a.\lambda b.\ p\ b\ a
\]
</p>

<hr>
</div>
</div>

<div id="outline-container-org55e3760" class="outline-3">
<h3 id="if-then">if &#x2026; then</h3>
<div class="outline-text-3" id="text-if-then">
<p>
$$
</p>
\begin{array}{ c  c | c }
P & Q & P \implies Q \\\\
\hline
T & T & T \\\\
T & F & F \\\\
F & T & T \\\\
F & F & T
\end{array}
<p>
$$
</p>

<p>
\[
implies \quad \equiv \quad \lambda p.\lambda q. p\ q\ p
\]
</p>

<hr>
</div>
</div>

<div id="outline-container-org94dd526" class="outline-3">
<h3 id="if-and-only-if">if and only if</h3>
<div class="outline-text-3" id="text-if-and-only-if">
<p>
$$
</p>
\begin{array}{ c  c | c }
P & Q & P \iff Q \\\\
\hline
T & T & T \\\\
F & F & T \\\\
F & T & F \\\\
T & F & F
\end{array}
<p>
$$
</p>

<p>
\[
iff \quad \equiv \quad \lambda p.\lambda q. p\ q\ (not\ p)
\]
</p>

<hr>

<p>
\[
true \quad \equiv \quad \lambda a.\lambda b.\ a
\]
</p>

<p>
\[
false \quad \equiv \quad \lambda a.\lambda b.\ b
\]
</p>

<p>
\[
and \quad \equiv \quad \lambda p.\lambda q.\ p q p
\]
</p>

<p>
\[
or \quad \equiv \quad \lambda p.\lambda q.\ p p q
\]
</p>

<p>
\[
if \quad \equiv \quad \lambda p.\lambda a.\lambda b.\ p a b
\]
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
I will be the first to admit that this is a terrible definition
of OO, mainly driven by my ignorance.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
All things not necessarily possible with the lambda. Terms and
conditions apply.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2017-10-21-lambda-logic.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Lambda Calculus 3 - Arithmetic with Church Numbers]]></title>
  <description><![CDATA[
<p>
Previously I've posted about
<a href="file:///posts/2017/9/11/lambda-calculus-1---syntax/">the lambda calculus</a>
and <a href="file:///posts/2017/9/13/lambda-calculus-2---church-numbers/">Church
numbers</a>. We'd shown how we can encode numbers as functions using the
Church encoding, but we'd not really shown how we could <i>do</i> anything
with those numbers.
</p>

<p>
But before we get into it, let's clear up some stuff about brackets&#x2026;
</p>

<div id="outline-container-orgb4b1400" class="outline-2">
<h2 id="left-association-and-you">Left association and you</h2>
<div class="outline-text-2" id="text-left-association-and-you">
<p>
Just as it's easier to write $&lambda; nfx.$ than
$&lambda; n.&lambda; f.&lambda; x.$ because we make the assumption that
each application of the function returns a new function, so there is a
way of writing out function application without having to use lots of
parentheses.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Where we would normally write
</p>

<p>
\[
f(x)
\]
</p>

<p>
with parentheses, we could instead write
</p>

<p>
\[
f\ x
\]
</p>

<p>
under the assumption that each argument associates to the one on the
left. So if we had
</p>

<p>
\[
((f(x)\ y)\ z)
\]
</p>

<p>
we can write it as
</p>

<p>
\[
f\ x\ y\ z
\]
</p>

<p>
and something like
</p>

<p>
\[
(g(x)\ f(x))
\]
</p>

<p>
is
</p>

<p>
\[
g\ x\ (f\ x)
\]
</p>

<p>
As we still need the parentheses to make sure that the \(f\) and \(x\) get
bundled together. We'll need this convention as we go on as things are
going to get a little more parenthesis-heavy.
</p>
</div>
</div>

<div id="outline-container-orga4cef15" class="outline-2">
<h2 id="add-one">Add-one</h2>
<div class="outline-text-2" id="text-add-one">
<p>
OK, let's get back to the arithmetic.
</p>

<p>
Say we have the number three:
</p>

<p>
\[
three \ \equiv \ \lambda f \lambda x.\ f\ (f\ (f x))
\]
</p>

<p>
(the function \(f\) applied to \(x\) three times)
</p>

<p>
And we wanted to get to the number four:
</p>

<p>
\[
four \ \equiv \ \lambda f \lambda x.\ f\ (f \(f\ (f x)))
\]
</p>

<p>
(the function \(f\) applied to \(x\) four times)
</p>

<p>
How do we get from \(three\) to \(four\)? Well, the difference is that we
just need to apply \(f\) one more time.
</p>

<p>
\[
four \ \equiv \ f\ three
\]
</p>

<p>
We can encode the idea of applying \(f\) one more time into a lambda
function. We could call it \(add-one\) or \(increment\) but lets go with
\(succ\) for 'successor'.
</p>

<p>
\[
succ \ \equiv \ \lambda n. \lambda f. \lambda x.\ f\ (n\ f\ x)
\]
</p>

<p>
The \(n\) is the number we're adding one to - we need to bind in the
values of \(f\) and \(x\) in to the function because they'll need to have
\(n\) applied to them before we can apply \(f\) in the one extra time.
</p>

<p>
Another way to think of this is that the general signature for a number
is $&lambda; f. &lambda; x.$, and that when we apply \(succ\) to a number,
we need to get back another number - something else with the signature
of $&lambda; f. &lambda;\ x.$
</p>

<p>
So the signature of \(succ\) - and consequently any unary operation on a
number - is \(\lambda n.\lambda f.\lambda x\), where \(n\) is the number
being changed.
</p>

<p>
In Clojure that looks like:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(<span style="color: #333333; font-weight: bold;">fn</span> [n] (<span style="color: #333333; font-weight: bold;">fn</span> [f] (<span style="color: #333333; font-weight: bold;">fn</span> [x] (f ((n f) x))))))
</pre>
</div>

<p>
Yeah, it's a bit <i>verbose</i> in comparison to the lambda calculus
version.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> All those parentheses, while great for being explicit
about which functions get applied to what, makes it a bit tough on the
eyes.
</p>

<p>
What about Haskell?
</p>

<div class="org-src-container">
<pre class="src src-haskell">\n f x -&gt; f (n f x)
</pre>
</div>

<p>
Bit more like the original, eh? Haskell has currying and
left-association baked in to its syntax so its lambda expressions look
almost exactly the same as the lambda calculus ones. You can see why
it's so popular.<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>
</p>
</div>
</div>

<div id="outline-container-org7dd635f" class="outline-2">
<h2 id="addition">Addition</h2>
<div class="outline-text-2" id="text-addition">
<p>
Let's see if we can define addition.
</p>

<p>
First off, \(addition\) is an operation that takes two arguments, two
numbers. So we know it needs to look something like:
</p>

<p>
\[
\lambda m. \lambda n. \lambda f. \lambda x.
\]
</p>

<p>
Where \(m\) and \(n\) are the numbers being added together. Now all we need
to do is work out what comes after the dot.
</p>

<p>
We could define it in terms of \(succ\) - all we need to do is apply
\(succ\) \(m\) many times to \(n\):
</p>

<p>
\[
\lambda m.\lambda n.\lambda f.\lambda x.\ m\ succ\ n\ f\ x
\]
</p>

<p>
And this works,<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> but we could probably write something both more
intuitive and simpler.
</p>

<p>
What do we want as the result of \(add\)? We want a function that applies
\(f\) to \(x\) \(n\) many times, and the applies \(f\) to the result of that \(m\)
many times.
</p>

<p>
\[
add\ (\lambda fx.\ f\ (f\ x))\ (\lambda fx.\ f\ (f\ (f\ x))) = \lambda fx.\ f\ (f\ (f\ (f\ (f\ x))))
\]
</p>

<p>
We can just write that out with the variables we've been given - first
apply \(f\) to \(x\), \(n\) many times.
</p>

<p>
\[
n\ f\ x
\]
</p>

<p>
and then apply \(f\) to that result \(m\) many times
</p>

<p>
\[
m\ f\ (n\ f\ x)
\]
</p>

<p>
giving us
</p>

<p>
\[
add\ \equiv\ \lambda n.\lambda m.\lambda f.\lambda x.\ m\ f\ (n\ f\ x)
\]
</p>

<p>
The order of \(n\) and \(m\) doesn't matter as they're just the order in
which the number of $f$s are applied.<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>
</p>
</div>
</div>

<div id="outline-container-org6fa2dd0" class="outline-2">
<h2 id="multiplication">Multiplication</h2>
<div class="outline-text-2" id="text-multiplication">
<p>
We've used the word 'times' a lot here when talking about the
application of \(f\) onto $x$s in the above. But now we'll have to deal
with real multiplication.
</p>

<p>
Before you try and reach at an answer, step back a little and ask
yourself what the result ought to be, and what the Church arithmetic way
of describing it would be.
</p>

<p>
Say we had the numbers two and three. If I was back in primary school
I'd say that the reason that multiplying them together made six was
because six was 'two lots of three' or 'three lots of two'.
</p>

<p>
So when I want to put this into Church arithmetic, I feel like saying
'six is the application of three lots of the application of two lots of
the application of \(f\) onto \(x\)'. Which is a mouthful, for sure, but
looks like
</p>

<p>
\[
six\ \equiv\ \lambda f.\lambda x.\ ((three\ (two\ f))\ x)
\]
</p>

<p>
or, without the parentheses
</p>

<p>
\[
six\ \equiv\ \lambda f.\lambda x.\ three\ (two\ f)\ x
\]
</p>

<p>
\(two\ f\) is a function that applies \(f\) two times to whatever it's next
argument is. \(three\ (two\ f)\) will apply \(two\ f\) to its next argument
three times. So it will apply it \(3\ \times\ 2\) times - 6 times.
</p>

<p>
And so now we can move from the particular case to the general case;
multiplication is:
</p>

<p>
\[
mult\ \equiv\ \lambda m.\lambda n.\lambda f.\lambda x.\ m\ (n\ f)\ x
\]
</p>

<p>
"\(m\) lots of (\(n\) lots of \(f\)) applied to \(x\)", which is still a
mouthful but
</p>
</div>
</div>

<div id="outline-container-org1809e58" class="outline-2">
<h2 id="exponentiation">Exponentiation</h2>
<div class="outline-text-2" id="text-exponentiation">
<p>
So what could exponentiation be? Well, the first thing we know is that
this time, order <i>is</i> going to be important - \(2^3\) is not the same as
\(3^2\).
</p>

<p>
Next, what does exponentiation <i>mean</i>? I mean, really mean? When we did
multiplication we saw us doing 'two lots of (three lots of \(f\))'. But
now we need to do 'two lots of something' three times. The 'three' part
has to apply, not to the number of times we do an \(f\), nor the number of
times we do '\(n\) lots of \(f\)'. But rather it needs to be <i>the number of
times we do \(n\) to itself</i>.
</p>

<p>
Woah.
</p>

<p>
So if 'three' is the application of \(f\) three times to \(x\), we can say
that \(2^3\) is the application of \(two\) three times to \(f\ x\).
</p>

<p>
Even. Bigger. Woah.
</p>

<p>
Another way to look at it: a Church number is already encoding some of
the behaviour of exponentiation. When we use <code>inc</code> and <code>0</code> as <code>f</code> and
<code>x</code> we can think of the number <code>n</code> acting as \(inc^n\) - <code>inc</code> done to
itself <code>n</code> many times.
</p>

<p>
This is more explicit if we try it with something other than increment -
say <code>double</code>, aka 'times two'. Let's do it in Haskell - but please feel
free to pick any language you like.
</p>

<div class="org-src-container">
<pre class="src src-haskell">let timesTwo = \x -&gt; 2 * x
let four = \f x -&gt; f(f(f(f x)))

four timesTwo 1 -- 16
</pre>
</div>

<p>
Four lots of <code>timesTwo</code> is 16; all we need to do is to use the number
two instead, and apply the result to an <code>f</code> and an <code>x</code>.
</p>

<div class="org-src-container">
<pre class="src src-haskell">let two = \f x -&gt; f(f x)
four two succ 0 -- 16
</pre>
</div>

<p>
Sixteen again.
</p>

<p>
So function for exponentiation - <code>m</code> to the power of <code>n</code> - is:
</p>

<p>
\[
exp\ \equiv\ \lambda m.\lambda n.\lambda f.\lambda x.\ n\ m\ f\ x
\]
</p>

<p>
But remember $&eta;$-reduction? We can just go directly to:
</p>

<p>
\[
exp\ \equiv\ \lambda m.\lambda n.\ n\ m
\]
</p>

<p>
This is because you know the function you're left with after you've
applied \(n\) to \(m\) is a number - will take an \(f\) and an \(x\) - you don't
need to explicitly bind them in the outer function just in order to pass
them unchanged to the inner one.
</p>

<p>
But that's just a nicety. The important thing is&#x2026; we've finished!
</p>
</div>
</div>

<div id="outline-container-org3bd0410" class="outline-2">
<h2 id="summary-and-next">Summary and Next!</h2>
<div class="outline-text-2" id="text-summary-and-next">
<p>
This post looked at some simple arithmetic using Church numerals. We saw
successor
</p>

<p>
\[
succ\quad \equiv\quad \lambda n.\lambda f.\lambda x.\ f\ (n\ f\ x)
\]
</p>

<p>
addition:
</p>

<p>
\[
add\quad \equiv\quad \lambda m.\lambda n.\lambda f.\lambda x.\ m\ f\ (n\ f\ x)
\]
</p>

<p>
multiplication:
</p>

<p>
\[
mult\quad \equiv\quad \lambda m.\lambda n.\lambda f.\lambda x.\ m\ (n\ f)\ x
\]
</p>

<p>
and exponentiation:
</p>

<p>
\[
exp\quad \equiv\quad \lambda m.\lambda n.\ m\ n
\]
</p>

<p>
An interesting relationship between the last three: the \(f\) moves along
to the right as the operation becomes 'bigger'.
</p>

<p>
Next post we'll be taking a short break from arithmetic to take a look
at logic using the lambda calculus.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
And I'm speaking as a mad Lisp fan, lover of parens where ever
they are.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
But still terse compared to the mess we'd get in Python. Or Ruby.
Yeah, don't try it in Ruby. Oh, and I guess we could use the
short hand anonymous function syntax, but I think that'd look
even messier&#x2026;
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
For functional programming that is.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
Get your pencil and paper out if you want to prove it!
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
The same will go for multiplication. We know that this has to be
the case if we're representing these numbers and operations
correctly as they should display the
<a href="https://en.wikipedia.org/wiki/Commutative_property">commutative
property</a>
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2017-09-23-lambda-arithmetic.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Lambda Calculus 2 - Church Numbers]]></title>
  <description><![CDATA[

<div id="outline-container-orge347b38" class="outline-2">
<h2 id="counting-without-numbers">Counting without numbers?</h2>
<div class="outline-text-2" id="text-counting-without-numbers">
<p>
In the <a href="file:///posts/2017/9/11/lambda-calculus-1---syntax/">first post I
wrote about the lambda calculus</a> we looked at the basic syntax and a
simple function that took two numbers and added them together:
</p>

<p>
\[
\lambda x.\lambda y.x + y
\]
</p>

<p>
This might all look OK until I tell you that, in the untyped lambda
calculus, the only primitive data type is a function.
</p>

<p>
A function. Not a bit, a byte, a string; not a number - a function.
</p>

<p>
So we should be a little suspicious of \(\,\lambda x.\lambda y.x + y\) as
this \(+\) symbol needs to be defined as a function. Fair enough -
addition feels like a the sort of thing that could easily be a function.
</p>

<p>
But what would we apply to it? We need a number - like one or two. But
we need to make them out of functions.
</p>

<p>
Wait, what? We need to make numbers <i>out of functions?!</i>
</p>

<p>
And this is where things start to get weird.
</p>
</div>
</div>

<div id="outline-container-org093a32c" class="outline-2">
<h2 id="so-whats-a-number-anyway">So what's a number anyway?</h2>
<div class="outline-text-2" id="text-so-whats-a-number-anyway">
<p>
You will now be inducted into a sacred mystery that will allow you to
make and understand Lisp jokes on the Internet. Be brave.
</p>

<p>
In a universe which only has functions - how would we count? Well, we'd
have to do it with functions, obviously.
</p>

<p>
OK, sure - but that's not really getting us anywhere - let's take \(2\) as
a concrete example. How do I write a function that represents \(2\)?
</p>

<p>
Simple - we could just give it a name - like it was JavaScript:
</p>

<pre class="example">
const two = () =&gt; {}
</pre>

<p>
Now you're obviously shouting "But that's cheating! What are these
'names' of which you speak? Are they made of functions too?"
</p>

<p>
And you'd be right. The thing is, we don't just want a <i>symbol</i> for
\(2\) - the numeral. What we want is a function that represents, in some
way, the very essence of two-ness.
</p>

<p>
What I'm trying to get across here (without jumping to the solution
immediately) is that the representation of numbers in the lambda
calculus are not mere symbols; they capture a key behaviour that we
associate with the idea of 'number'.
</p>

<p>
And that behaviour is <i>repetition</i>. When we say 'look at those two
apples', we're expecting there to be an apple, and then <i>another</i> apple.
In Church arithmetic a number is represented by a function that takes
two values, and then applies the first value to the second value \(n\)
times, where \(n\) is the number being represented.
</p>
</div>
</div>

<div id="outline-container-org8836291" class="outline-2">
<h2 id="church-numbers">Church numbers</h2>
<div class="outline-text-2" id="text-church-numbers">
<p>
So much for the theory, let's take a look at some real numbers.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
First up, the number one:
</p>

<p>
\[ \lambda f.\lambda x. f(x) \]
</p>

<p>
We accept a variable called \(f\), we take another one called \(x\), and we
call \(f\) with \(x\) once. We're kinda hoping that \(f\) turns out to be a
function that takes a single argument, but as this is the lambda
calculus and <i>everything</i> is a function that takes a single argument, we
can be <del>fairly</del> absolutely certain it is.
</p>

<p>
In JavaScript:
</p>

<pre class="example">
f =&gt; x =&gt; f(x)
</pre>

<p>
And Scheme:
</p>

<div class="org-src-container">
<pre class="src src-scheme"><span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #0287c8;">(</span>f<span style="color: #0287c8;">)</span> <span style="color: #0287c8;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #b85c57;">(</span>x<span style="color: #b85c57;">)</span> <span style="color: #b85c57;">(</span>f x<span style="color: #b85c57;">)</span><span style="color: #0287c8;">)</span><span style="color: #40883f;">)</span>
</pre>
</div>

<p>
So if that's one, we can probably work out what two is, right?
</p>

<p>
\[ \lambda fx. f\ (f\ x) \]
</p>

<p>
And three?
</p>

<p>
\[ \lambda fx. f\ (f\ (f\ x)) \]
</p>

<p>
OK, so no peeking now. What's zero?
</p>

<p>
&#x2026;
</p>

<p>
&#x2026;
</p>

<p>
&#x2026;
</p>

<p>
&#x2026;
</p>

<p>
&#x2026;
</p>

<p>
Did you work it out?
</p>

<p>
\[ \lambda fx. x \]
</p>

<p>
It's just ignoring the original function and returning the value it
would've been applied to. The function \(f\) has been applied to \(x\) zero
times.
</p>
</div>
</div>

<div id="outline-container-org604bb71" class="outline-2">
<h2 id="function-composition-and-functional-powers">Function composition and functional powers</h2>
<div class="outline-text-2" id="text-function-composition-and-functional-powers">
<p>
There's a neater way of talking about this, with just a litte more
notation. We can abstract the idea of "first apply \(f\), then apply \(f\)
to that result, then apply \(f\)&#x2026;" out to the idea of <i>function
composition</i>, which you might have seen in some languages. This is just
building a new function out of two functions. The new function does
exactly the same thing as calling one function after the other (in
right-to-left order). This is usually written using the \(\circ\) symbol:
</p>

<p>
\[ (f \circ f)\ x = f\ (f\ x) \]
</p>

<p>
And so three could become the (slightly) easier to read:
</p>

<p>
\[ \lambda f.\lambda x.\ (f \circ f \circ f)\ x \]
</p>

<p>
But we can go further. The idea of composing a function with itself
so-many times can be written as a <i>functional power</i> - a 'function to
the \(n\)'. Just like we can say \(2^3 = 8\), so we can say:
</p>

<p>
\[
\lambda f.\lambda x.\ (f\ (f\ (f\ x)))\quad=\quad \lambda fx. (f\circ f\circ f)\ x\quad=\quad \lambda fx. f^3\ x
\]
</p>

<p>
Implementing composition and powers of functions is left as an exercise
for the reader in their favourite language.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>
</p>
</div>
</div>

<div id="outline-container-org06f56ec" class="outline-2">
<h2 id="playing-around-with-the-computer">Playing around with the computer</h2>
<div class="outline-text-2" id="text-playing-around-with-the-computer">
<p>
I find there to be two <del>productive</del> interesting ways to play around with
the lambda calculus and Church numbers when I'm trying to understand
what's going on.
</p>

<p>
Firstly, and probably more obviously, try plugging around with them in
your favourite language (as long as it has some sort of anonymous
function type). Say Python - if we were to write three as a Church
numeral we'd have:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #333333;">three</span> = <span style="color: #333333; font-weight: bold;">lambda</span> f: <span style="color: #333333; font-weight: bold;">lambda</span> x: f(f(f(x)))
</pre>
</div>

<p>
If we want to test this - to see if it does what we think it does - we
just need a function to be \(f\):
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #333333;">increment</span> = <span style="color: #333333; font-weight: bold;">lambda</span> x: x + 1
</pre>
</div>

<p>
and some value to play the role of \(x\)
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #333333;">zero</span> = 0
</pre>
</div>

<p>
So then we just plug in those values:
</p>

<div class="org-src-container">
<pre class="src src-python">three(increment)(0) <span style="color: #d9d9d9;">#</span><span style="color: #7f7f7f;">=&gt; 3</span>
</pre>
</div>

<p>
We used three variables to hold the values above, but we could just
inline them to get to something that looks a little more lambda-y:
</p>

<div class="org-src-container">
<pre class="src src-python">(<span style="color: #333333; font-weight: bold;">lambda</span> f: <span style="color: #333333; font-weight: bold;">lambda</span> x: f(f(f(x))))(<span style="color: #333333; font-weight: bold;">lambda</span> x: x + 1)(0) <span style="color: #d9d9d9;">#</span><span style="color: #7f7f7f;">=&gt; 3</span>
</pre>
</div>

<p>
Which translates to:
</p>

<p>
\[ (\lambda f.\lambda x.\ f\ (f\ (f\ x)))\ (\lambda x. x + 1)\ 0 = 3 \]
</p>

<p>
Both <code>zero</code> and <code>increment</code> use Python's built in number system. But we
don't have to use numbers to test Church numbers. All we need are values
that behave in the required way.<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> For instance:
</p>

<div class="org-src-container">
<pre class="src src-scheme"><span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">define</span> <span style="color: #333333; font-weight: bold;">inc</span> <span style="color: #0287c8;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #b85c57;">(</span>x<span style="color: #b85c57;">)</span> <span style="color: #b85c57;">(</span>cons '<span style="color: #709870;">()</span> x<span style="color: #b85c57;">)</span><span style="color: #0287c8;">)</span><span style="color: #40883f;">)</span>

<span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">define</span> <span style="color: #333333; font-weight: bold;">zero</span> '<span style="color: #0287c8;">()</span><span style="color: #40883f;">)</span>

<span style="color: #40883f;">(</span><span style="color: #0287c8;">(</span><span style="color: #b85c57;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #709870;">(</span>f<span style="color: #709870;">)</span> <span style="color: #709870;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #907373;">(</span>x<span style="color: #907373;">)</span> <span style="color: #907373;">(</span>f x<span style="color: #907373;">)</span><span style="color: #709870;">)</span><span style="color: #b85c57;">)</span> inc<span style="color: #0287c8;">)</span> zero<span style="color: #40883f;">)</span> <span style="color: #d9d9d9;">;;</span><span style="color: #7f7f7f;">=&gt; (())</span>
<span style="color: #40883f;">(</span><span style="color: #0287c8;">(</span><span style="color: #b85c57;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #709870;">(</span>f<span style="color: #709870;">)</span> <span style="color: #709870;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #907373;">(</span>x<span style="color: #907373;">)</span> <span style="color: #907373;">(</span>f <span style="color: #6276ba;">(</span>f x<span style="color: #6276ba;">)</span><span style="color: #907373;">)</span><span style="color: #709870;">)</span><span style="color: #b85c57;">)</span> inc<span style="color: #0287c8;">)</span> zero<span style="color: #40883f;">)</span> <span style="color: #d9d9d9;">;;</span><span style="color: #7f7f7f;">=&gt; (() ())</span>
<span style="color: #40883f;">(</span><span style="color: #0287c8;">(</span><span style="color: #b85c57;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #709870;">(</span>f<span style="color: #709870;">)</span> <span style="color: #709870;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #907373;">(</span>x<span style="color: #907373;">)</span> <span style="color: #907373;">(</span>f <span style="color: #6276ba;">(</span>f <span style="color: #858580;">(</span>f x<span style="color: #858580;">)</span><span style="color: #6276ba;">)</span><span style="color: #907373;">)</span><span style="color: #709870;">)</span><span style="color: #b85c57;">)</span> inc<span style="color: #0287c8;">)</span> zero<span style="color: #40883f;">)</span> <span style="color: #d9d9d9;">;;</span><span style="color: #7f7f7f;">=&gt; (() () ())</span>
</pre>
</div>

<p>
Lots of things will work - experiment!
</p>
</div>
</div>

<div id="outline-container-org550ca0c" class="outline-2">
<h2 id="playing-around-with-pen-and-paper">Playing around with pen and paper</h2>
<div class="outline-text-2" id="text-playing-around-with-pen-and-paper">
<p>
The second way I like to play with lambdas is with pen and paper. The
simplicity of the syntax, and the very few transformations allowed on an
expression,<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> mean that it's possible to do the evaluation yourself.
Let's try it with the above. I'm going to go through it step by step,
and I'm going to note which of the reductions steps being performed at
each line.
</p>

<p>
\[
\\begin{array}{ c | l | c}
& Expression & Reduction \\\\
\hline
0 & (\lambda fx.\ f\ (f\ (f\ x)))\ (\lambda x. x + 1)\ 0 \\\\
1 & (\lambda x.\ (\lambda x.\ x + 1)\ ((\lambda x.\ x + 1)\ ((\lambda x.\ x + 1)\ x)))\ 0 & \beta \\\\
2 & (\lambda x. (\lambda a.\ a + 1)\ ((\lambda b.\ b + 1)\ ((\lambda c.\ c + 1)\ x)))\ 0 & \alpha \\\\
3 & (\lambda a.\ a + 1)\ ((\lambda b.\ b + 1)\ ((\lambda c.\ c + 1)\ 0)) & \beta \\\\
4 & (\lambda a.\ a + 1)\ ((\lambda b.\ b + 1)\ 1) & \beta \\\\
5 & (\lambda a.\ a + 1)\ 2 & \beta \\\\
6 & 3 & \beta
\\end{array}
\]
</p>

<p>
This is fun to try out, and while it's not much help when the expression
is relatively simple as the one above, it gets pretty vital for me when
I want to discover how more complicated expressions work.
</p>

<p>
In summary, the computer is great for checking that a lambda expression
works, but I prefer to do get the pen and paper out if I want to get a
feel for what's going on - for what makes it work.
</p>
</div>
</div>

<div id="outline-container-org477687b" class="outline-2">
<h2 id="but">But &#x2026;</h2>
<div class="outline-text-2" id="text-but">
<p>
But what about the \(+\) and \(1\) and \(0\) above? I said that there were
only functions in the lambda calculus, aren't we still cheating a little
bit?
</p>

<p>
We are. So in the
<a href="file:///posts/2017/9/23/lambda-calculus-3---arithmetic-with-church-numbers/">next
post</a> let's define <code>increment</code>, <code>add</code>, <code>multiply</code> and maybe even
<code>exponentiation</code> in terms of lambdas. Things are certain to get weirder.
</p>

<p>
Oh, and - you were promised the ability to undestand jokes on the
internet? Take a look at
<a href="http://www.schemers.org/Miscellaneous/imagine.txt">this</a> - hopefully
it makes some sense now you know what \(one\) is.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
I mean, actually these are the
<a href="https://en.wikipedia.org/wiki/Natural_number">natural numbers</a>
including zero, not actually the
<a href="https://en.wikipedia.org/wiki/Real_number">real numbers</a>. Yay,
maths joke!
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
I've always wanted to say that. But, seriously - implement them.
It's fun!
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
I am thoroughly in debt to the amazing book
<a href="https://mitpress.mit.edu/books/little-schemer"><i>The Little
Schemer</i></a> for the this example.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
$&alpha;$-conversion and $&beta;$-reduction - see
<a href="file:///posts/2017/9/11/lambda-calculus-1---syntax/">the first post</a>
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2017-09-13-church-numbers.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Method length: a good metric, a bad target]]></title>
  <description><![CDATA[
<p>
So I saw this series of tweets a few days ago
</p>

<div class="HTML">
<p>
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;p lang="en" dir="ltr"&gt;
</p>

</div>

<p>
Pro tip: if your method is 225 lines long, then you should probably
refactor your code ASAP. I frown at methods over 50 lines.
</p>

<div class="HTML">
<p>
&lt;/p&gt;
</p>

</div>

<p>
&#x2014; Anna Filina (@afilina) August 2, 2017
</p>

<div class="HTML">
<p>
&lt;/blockquote&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;p lang="en" dir="ltr"&gt;
</p>

</div>

<p>
IMO ten is too long in most cases. <a href="https://t.co/ayPb9Ly76I">https://t.co/ayPb9Ly76I</a>
</p>

<div class="HTML">
<p>
&lt;/p&gt;
</p>

</div>

<p>
&#x2014; Ron Jeffries (@RonJeffries) August 3, 2017
</p>

<div class="HTML">
<p>
&lt;/blockquote&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;p lang="en" dir="ltr"&gt;
</p>

</div>

<p>
In my Ruby code, half of my methods are just one or two lines long. 93%
are under 10.<a href="https://t.co/Qs8BoapjoP">https://t.co/Qs8BoapjoP</a> <a href="https://t.co/ymNj7al57j">https://t.co/ymNj7al57j</a>
</p>

<div class="HTML">
<p>
&lt;/p&gt;
</p>

</div>

<p>
&#x2014; Martin Fowler (@martinfowler) August 3, 2017
</p>

<div class="HTML">
<p>
&lt;/blockquote&gt;
</p>

</div>

<div class="HTML">
<p>
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</p>

</div>

<p>
Always nice to see an escalation.
</p>

<p>
Martin's article on the Bliki is nice, but I think it's still missing
the point.
</p>

<blockquote>
<p>
Small functions like this only work if the names are good, so you need
to pay good attention to naming.
</p>
</blockquote>

<p>
Short methods are good -&gt; but they are hard to name, so work hard on the
names&#x2026;
</p>

<p>
Is this accurate? It almost feels like we're putting the cart before the
horse.
</p>

<p>
Here is a piece of code I can extract -&gt; Here it is on its own -&gt; What
the hell do I call it?
</p>

<p>
This chimed with something I saw in the SICP lecture course.
</p>
<div class="taglist"></div>]]></description>
  <link>/2017-08-07-method-length.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[async/await in JavaScript in Five Minutes]]></title>
  <description><![CDATA[
<p>
When I first heard about async/await in JavaScript I was quite excited.
Now I know about it I'm not. Let me explain; instead of doing some Lisp
this evening I decided to find out what async/await fuss was about, and
I think I can put it in a single sentence.
</p>

<blockquote>
<p>
async/await is syntactic sugar to make Promises look more sequential
</p>
</blockquote>

<p>
That's it. If you have the most basic understanding of Promises in
JavaScript then you should be able to use async/await in about thirty
seconds. There is nothing surprising here, which is a relief.
</p>

<div id="outline-container-org4f554f1" class="outline-2">
<h2 id="async">async</h2>
<div class="outline-text-2" id="text-async">
<p>
Think of this as an annotation to a function - a way of saying that,
within this lexically scoped block, we'll be living in async/await
world.
</p>

<pre class="example">
async function asyncAwaitLand () {
 // blah blah fishcakes
}
</pre>
</div>
</div>

<div id="outline-container-org4c96155" class="outline-2">
<h2 id="await">await</h2>
<div class="outline-text-2" id="text-await">
<p>
In async/await world, <code>.then()</code> is spelt <code>await</code>. And it's another
annotation, this time to to an expression. What larks. Here it is in
Promise-speak:
</p>

<pre class="example">
function normalPromiseLand () {
    Promise.resolve('some value')
        .then(theResultOfAPromise =&gt; console.log(theResultOfAPromise))
}
</pre>

<p>
And here's the same thing in nuspeak async/await
</p>

<pre class="example">
async function asyncAwaitLand () {
 const theResultOfAPromise = await Promise.resolve('some value')
 console.log(theResultOfAPromise)
}
</pre>
</div>
</div>

<div id="outline-container-orgdcef045" class="outline-2">
<h2 id="playing-nicely-with-promises">Playing nicely with Promises</h2>
<div class="outline-text-2" id="text-playing-nicely-with-promises">
<p>
<code>async</code> functions <i>return</i> Promises, so if you want to start chaining
them all together be my guest:
</p>

<pre class="example">
const arrowAsync = async () =&gt; {
    return 'the async annotation works with anonymous arrow functions too'
}

arrowAsync()
    .then(string =&gt; console.log(string))
</pre>
</div>
</div>

<div id="outline-container-orgf289310" class="outline-2">
<h2 id="errors-and-rejects">Errors and Rejects</h2>
<div class="outline-text-2" id="text-errors-and-rejects">
<p>
But how do you <code>.catch()</code> those long-=await=ed Promises when they go
horribly wrong? Would it surprise you at all if I told you that you just
use the normal sequential JavaScript error handling construct of
<code>try/catch</code>?
</p>

<pre class="example">
function rejectedPromise () {
    return Promise.reject(new Error('boom'))
}

async function asyncAwaitLand () {
    try {
        const nope = await rejectedPromise()
        console.log('will never happen', nope)
    } catch (error) {
        console.log('I caught a rejected Promise:', error.message)
    }
}
</pre>

<p>
So how do you <code>reject()</code> in an <code>async</code> function? You can guess right?
You just <code>throw</code> like it's sequential code.
</p>

<pre class="example">
async function throwingAsync () {
    throw new Error('boom')
}

function promiseLand () {
    throwingAsync()
        .then(nope =&gt; console.log('will never happen', nope))
        .catch(error =&gt; console.log('I caught an async throw:', error.message))
}
</pre>
</div>
</div>

<div id="outline-container-org67f8467" class="outline-2">
<h2 id="are-you-still-reading-this">Are you still reading this?</h2>
<div class="outline-text-2" id="text-are-you-still-reading-this">
<p>
async/await is <i>boring</i> - thank goodness. A pretty piece of syntactic
sugaring that extends the language not one jot. If you understand
Promises then you should already have some ideas for how you're going to
use it - more of a way of tidying up some ugly looking bits of code than
a complete rethink of your codebase.
</p>

<p>
If you don't understand Promises - stop reading articles about
async/await and start reading articles about Promises.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2017-08-06-async-await.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Book Review: Clojure for the Brave and True]]></title>
  <description><![CDATA[
<p>
One line review: <a href="http://www.braveclojure.com/"><i>Clojure for the Brave
and True</i></a> by <a href="https://twitter.com/nonrecursive">Daniel Higginbotham</a>
is a pretty good intro to Clojure, if you can get past the undergraduate
humour.
</p>

<p>
<i>Clojure for the Brave and True</i> could be thought of as a part of a
loose trilogy of books, including <a href="http://landoflisp.com/"><i>Land of
Lisp</i></a> and <a href="http://realmofracket.com/"><i>Realm of Racket</i></a>,<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> that
explore modern Lisps in a light hearted way with cartoons.
</p>

<p>
The first problem with this comparison is that <i>Brave &amp; True</i> is nowhere
near as good as <i>Land of Lisp</i> - Barski's jokes are funnier, his
cartoons are better, the content is both deeper and broader. <i>Land of
Lisp</i> has a chapter called "Let's build a Web Server from Scratch" and
it's not lying. Whereas <i>Brave &amp; True</i> won't even show you the ropes on
something like <a href="https://github.com/weavejester/compojure">Compojure</a>.
</p>

<p>
The best chapters in <i>Brave and True</i>, which are also the most useful
ones, are the ones where you're being walked through a piece of code
line by line. The
'<a href="https://www.braveclojure.com/functional-programming/">Peg thing</a>'
game is a great example of a interactive command-line game written using
a series of pure functions. This chapter gives you a real idea of how to
get some Clojure code doing stuff in the world - a practical toolkit to
let you get writing something.
</p>

<p>
The other great thing about this book is its opinionated introduction to
editors. I struggled mightily setting up something to do my Lisps in,
having gone through a variety of Vim and Emacs setups with every damn
plugin you can imagine. <i>Brave and True</i> has
<a href="https://www.braveclojure.com/do-things/">an entire chapter dedicated
to getting a decent Emacs environment</a> (you can download the
configuration), complete with Cider and Paredit. It's not going to teach
you everything you want to know, but once you're done you will be
immediately productive and able to get along with the more serious task
of actually writing some Clojure.
</p>

<p>
But I often found the sense of humour in this book grating. It is as if
I was forced to hang around with my fourteen-year-old self.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> The
one who'd memorized a lot of <i>Monty Python</i> and <i>The Hitchhiker's Guide
to the Galaxy</i> and thought that quoting it back at my friends was the
height of sophisticated humour. The examples feel contrived to fit the
humour, often to the detriment of the point that is trying to be made.
</p>

<p>
The poorest chapters are the ones where an idea is introduced but not
fully explored. When introduced to protocols and records it would be
nice to understand how they are used to leverage polymorphism in
something more practical than the contrived Richard-Simmons-as-Werewolf
examples that felt even less useful than the usual Object Oriented Guide
to Animal Taxonomy we're forced to endure.
</p>

<p>
<i>Brave and True</i> is a good book, and is worth buying and reading (and if
you want to sample the content it's all available on
<a href="http://www.braveclojure.com/">the book's excellent website</a>). It's
filled me with confidence to write Clojure (probably before other
languages) and to read more books on Clojure. I just wish that it had
spent less time crapping around with spurious examples and more time
showing me how and why Clojure is the best.
</p>

<p>
Now I'm going to read <a href="http://landoflisp.com/">my favourite
introduction to Lisp</a> again (keep scrolling) and maybe finish <i>Land of
Lisp</i>.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Guess they couldn't find an appropriate name for an area starting
with 'C'. <i>Castle of Clojure</i>? <i>Continent</i>? <i>Cave</i>?
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Bah, OK. My 20 year old self too. I can still sing all of <i>The
Philosophers' Song</i>, I just know I shouldn't.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2017-07-26-book-review-clojure-ftbat.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Modularity is its own reward]]></title>
  <description><![CDATA[
<p>
A while back an friend and I were talking about programming. They'd
recently taken it up in the job he was doing and were relatively fresh
to the discipline. Asking for a code review from a collegue, they'd been
told that their Python was pretty good but that it could do with
breaking out into smaller functions.
</p>

<p>
My friend couldn't see the point of this - the code worked, it did the
job, what's the problem? I had a crack at explaining why. Didn't do very
well.
</p>

<p>
More recently I was getting some feedback for something small I'd
written. It was, of course, awesome - like all the code I write.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
They said they liked it, but the modularity wasn't entirely necessary
because the individual modular parts wouldn't be reused.
</p>

<p>
So this is just a scratch piece to try to explain why I think modularity
is the most imortant thing
</p>

<p>
Oh and the title is an homage to my favourite xkcd comic:
</p>


<figure>
<img src="https://imgs.xkcd.com/comics/functional.png" alt="functional.png">

<figcaption><span class="figure-number">Figure 1: </span>tail recursion is its own reward</figcaption>
</figure>

<div id="outline-container-orgdbb235b" class="outline-2">
<h2 id="wait-modularity">Wait, modularity?</h2>
<div class="outline-text-2" id="text-wait-modularity">
<p>
When I say 'modular', I mean small and isolated and independent. A class
that's a few lines long, the one line method in Ruby, the short
function. At a larger level I mean, well, larger small things. A file
with one class in it, or one function in it. Maybe I mean microservices.
Maybe not.
</p>

<p>
Look, I mean small things. That's all. But why do I think that they're
their own reward? Well, I don't<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> - but I think that, most of the
time, more good things come out of keeping the code smaller than larger.
Such as&#x2026;
</p>
</div>
</div>

<div id="outline-container-orgc00e703" class="outline-2">
<h2 id="easier-to-test">Easier to Test</h2>
<div class="outline-text-2" id="text-easier-to-test">
<p>
What sort of tests do you love? When there are hundreds of them - which
ones make you happy inside? In my (admittedly limited) experience, it
tends to be the ones that run really quickly and don't randomly fail.
Sure, the ones that exercise the whole system are nice and necessary,
but the ones that make me smirk a little are the unit tests that whizz
by in the blink of an eye.
</p>

<p>
And in order to have those fast little tests, you need small little bits
of code to test.
</p>

<p>
TDD makes us write the tests first - and the easiest tests to write are
the ones that cover single, simple ideas that you want to implement. TDD
wants us to write small tests that consequently should lead us to write
small pieces of code.
</p>

<p>
Performing TDD produces code with tests - this is a given. But I find
that people celebrate this more that what I think the bigger prize is:
you have been forced into writing your code modularly, bringing with it
other and possibly greater advantages.
</p>
</div>
</div>

<div id="outline-container-orgf1dd320" class="outline-2">
<h2 id="easier-to-comprehend">Easier to Comprehend</h2>
<div class="outline-text-2" id="text-easier-to-comprehend">
<p>
This is probably the most important one. If your code is small and
independent, then there is a much higher chance of you and everyone else
understanding what it does. If a single function / class / method is
longer than a screen, I would go so far as to say that it's near
impossible to understand what it does.
</p>

<p>
If you're programming in small, easy to comprehend<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> parts, then
there is more chance that you'll be understood - if only because you'll
have had to give them names. Possibly bad names, but names all the same.
Names you'll be able to read and know what they mean and so what the
parts do. Or at the worst, names that you read, don't understand, and
then read the code, understand that because it's short, and then rename
it with something (hopefully) better.
</p>
</div>
</div>

<div id="outline-container-org504602d" class="outline-2">
<h2 id="easier-to-reuse">Easier to Reuse</h2>
<div class="outline-text-2" id="text-easier-to-reuse">
<p>
Yes, reuse is good - it's a good benefit of small pieces of code. You
write that Fibonacci function, you can use it everywhere that you need a
Fibonacci number. It is part of the wonderful magic of small,
independent things.
</p>

<p>
Whether you do reuse a part of code is often by the by - it can often
come later on when you have a better idea about the thing that you're
trying to build.
</p>
</div>
</div>

<div id="outline-container-org26c3ccd" class="outline-2">
<h2 id="this-all-sounds-familiar">This all sounds familiar&#x2026;</h2>
<div class="outline-text-2" id="text-this-all-sounds-familiar">
<p>
Look, if you've heard this before then you probably have - hell, I just
worked out what I was talking about when I got to the end of writing it.
It's basically the first two bulletpoints of the
<a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix philosophy</a> - do
one thing well, and integrate with other programs.
</p>

<p>
But as we're not writing programs - we're just writing parts of
programs - we don't have to worry about the requirement for
generalization (that can come later if at all). That integration is
eased internally if we make the modules truely independent of each
other.
</p>

<p>
Like Lego blocks - some are small and general (think a 3x4 flat piece),
or small and specific (think a laser gun), but they're all small and
easy to integrate with each other.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
For 'awesome' read 'adequate'.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Barely anything is its own reward. Maybe pizza.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
From the Latin <i>com</i> together, and <i>prehendere</i> grasp. It's
literally easier to hold stuff together when it's small.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2017-06-24-modularity.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Learning the C Programming Language]]></title>
  <description><![CDATA[
<div class="HTML">
<p>
&lt;h2&gt;
</p>

</div>

<p>
Part Three: Modules and TDD in C
</p>

<div class="HTML">
<p>
&lt;/h2&gt;
</p>

</div>

<p>
/This post follows on from my
<a href="file:///posts/2016/12/3/learning-the-c-programming-language-part-two:-types/">second
post about the C programming language</a>, and is the third in a series of
posts about learning C/
</p>

<p>
When I was thinking about writing tests in C, it led me to almost
entirely reevaluate the way I think about tests. If you just want to see
how to test in C (or how I do it anyway), skip to the end. Otherwise&#x2026;
</p>

<div id="outline-container-org73360a0" class="outline-2">
<h2 id="there-is-no-magic">There is no magic</h2>
<div class="outline-text-2" id="text-there-is-no-magic">
<p>
When I learned to practice test-driven development (TDD), I learned in
Ruby using RSpec. It was wonderful! RSpec has a delightful syntax,
reading like English. Like this:
</p>

<div class="org-src-container">
<pre class="src src-ruby">describe <span style="color: #666666;">"add"</span> <span style="color: #333333; font-weight: bold;">do</span>
    it <span style="color: #666666;">"knows that five plus two makes seven"</span> <span style="color: #333333; font-weight: bold;">do</span>
        expect(add 2, 5).to equal 7
    <span style="color: #333333; font-weight: bold;">end</span>
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
It's worth bearing in mind that it took a long time to recognize that
this was a series of nested function calls, each with its own code
block. Definitely the start of this was when I started writing tests in
JavaScript using the Mocha framework:
</p>

<pre class="example">
describe('add', function () {
    it('knows that five plus two makes seven', function() {
        expect(add(2, 5)).to.equal(7);
    });
});
</pre>

<p>
The anonymous =function=s made it much more obvious to me: this is just
JavaScript; there is no magic.
</p>
</div>
</div>

<div id="outline-container-org1c0244e" class="outline-2">
<h2 id="back-to-basics">Back to basics</h2>
<div class="outline-text-2" id="text-back-to-basics">
<p>
When I saw a pair of experienced developers hacking on Python for the
first time, I asked them what sort of testing framework they were
using - I was curious! "We're not using a framework," they said, "we're
just using <code>assert</code>."
</p>

<p>
This reminded me of my nightmare first experience with Java, where I
abused the JUnit version of <code>assert</code> all over the place. But I hadn't
realized that it came 'for free' in some languages. In fact, in most
languages.
</p>
</div>
</div>

<div id="outline-container-org6c36d13" class="outline-2">
<h2 id="what-is-a-test">What is a test?</h2>
<div class="outline-text-2" id="text-what-is-a-test">
<p>
A test is a way of saying whether something works or not. We could do
this in a repl, we could do it by running a program and using it -
manual testing. But more commonly we write another program to use the
first program. This is what a test framework is - a program that tests
your program.
</p>

<p>
Given this, we need a way to communicate a description of our program to
the test program - this is what we can see in the Ruby and JavaScript
examples above. We're making a statement about our program ('two plus
five equals seven') in the test framework's domain language, and saying
that this should be true. At root, all tests come down to this: is
something true or not?
</p>
</div>
</div>

<div id="outline-container-orgecf23b0" class="outline-2">
<h2 id="enter-assert">Enter <code>assert</code></h2>
<div class="outline-text-2" id="text-enter-assert">
<p>
The original intention of <code>assert</code> in C was as an assertion that could
be included inside the program itself. You would be able to compile your
program either with the assertions turned on, or turned off by disabling
debugging.
</p>

<p>
This way of using <code>assert</code> doesn't really work for TDD - you can't run
the assertion without having the code in the first place. In addition,
you don't get what for me is one of the chief advantages of TDD, namely
enforced separation of concerns.
</p>
</div>

<div id="outline-container-org5cc0158" class="outline-3">
<h3 id="wait-separation-of-concerns">Wait, separation of concerns?</h3>
<div class="outline-text-3" id="text-wait-separation-of-concerns">
<p>
In order to test some aspect of your software on its own, it needs to be
separable from the rest of the code; the testing will drive this. As you
build each new part, you test it separately from the rest.
</p>

<p>
So how to we break up a C program? The first step should be familiar to
most developers: wrap everything in a function.
</p>
</div>
</div>

<div id="outline-container-orga54f295" class="outline-3">
<h3 id="functions-in-c">Functions in C</h3>
<div class="outline-text-3" id="text-functions-in-c">
<p>
We've already seen a function in C - the <code>main</code> function. Declaring our
own is a doddle; let's do some addition:
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #cdad00; font-weight: bold;">#include</span> <span style="color: #666666;">&lt;stdio.h&gt;</span>

<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333; font-weight: bold;">add</span>(<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333;">a</span>, <span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333;">b</span>) {
    <span style="color: #333333; font-weight: bold;">return</span> a + b;
}

<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333; font-weight: bold;">main</span>() {
    <span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333;">answer</span> = add(1, 1);
    printf(<span style="color: #666666;">"one plus one is: %d"</span>, answer);
}
</pre>
</div>

<p>
This stuff shouldn't be too surprising. The only things worth mentioning
are that there is no magic function declaration keyword like <code>function</code>
or <code>def</code>. In C it's the presence of the parentheses after the name that
make it into a function. We do need to declare the return type - in both
instances it's an <code>int</code> like we saw in
<a href="file:///posts/2016/8/9/learning-the-c-programming-language-part-1:-hello,-world/">the
first post</a>. This is the first time we've seen arguments in a function
though - and it's probably not surprising that they've typed as well. In
C the type goes before the name.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> So <code>add</code> takes two =int=s and
returns an int. Hooray.
</p>

<p>
Oh, and like JavaScript we have to remember to <code>return</code> the result.
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
A fact regretted by Rob Pike and
<a href="https://blog.golang.org/gos-declaration-syntax">rectified in
Go</a>
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2017-02-15-the-c-programming-language-part-three-tdd-in-c.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Learning the C Programming Language]]></title>
  <description><![CDATA[
<div class="HTML">
<p>
&lt;h2&gt;
</p>

</div>

<p>
Part Two: Types
</p>

<div class="HTML">
<p>
&lt;/h2&gt;
</p>

</div>

<p>
/This post follows on from my
<a href="file:///posts/2016/8/9/learning-the-c-programming-language-part-1:-hello,-world/">first
post about the C programming language</a>, and is the second in a series
of posts about learning C/
</p>

<p>
C has types - what does that mean? This post is going to focus on types
and the role they perform in C. We're going to show how they're used
but, more importantly, we're going to look at why they're used.
</p>

<div id="outline-container-org1b00075" class="outline-2">
<h2 id="all-the-types">All the types!</h2>
<div class="outline-text-2" id="text-all-the-types">
<p>
A type in C is a type of <i>data</i>. For instance, if you want to use a
whole number in C you can use an <code>int</code>, whereas if you want to use a
decimal number you would need a different type of data, say a <code>float</code>.
</p>

<p>
The first temptation to watch out for, definitely from the Ruby side of
my brain, is to think of types as being like classes. Types are ways of
storing data in a computer (as we'll make clear), and not objects with
methods, inheritance, attributes and all the other object oriented
stuff. Forget about classes.
</p>

<p>
So to store an integer C has <code>int</code>. But it also has <code>long</code>, which will
store a bigger integer, and, on top of that we have <code>long long</code>, which
will store a <i>really</i> big integer. And if you just happen to know that
the number you want to store is <i>really</i>, <i>really</i> big but will never be
negative, you can go so far as to use the type <code>unsigned long long</code>.
</p>

<p>
This may all sound a little ridiculous from the point of view of a
Rubyist or a JavaScripter - I mean, I can see why maybe a <code>float</code> is
different to an <code>int</code>, but why do I need all these different ways to
talk about integers?
</p>

<p>
The reason cuts to the heart of what a type system is for, and why C is
a lower level programming language than Ruby and JavaScript.
</p>
</div>
</div>

<div id="outline-container-orgfabe1c1" class="outline-2">
<h2 id="types-for-the-memory">Types for the memory</h2>
<div class="outline-text-2" id="text-types-for-the-memory">
<p>
In C when we declare a variable we declare it with its type:
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333;">my_number</span>;
</pre>
</div>

<p>
We can then assign a value to it:
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333;">my_number</span>;
my_number = 5;
</pre>
</div>

<p>
In Ruby, you'd just need the second line, and in JavaScript it would be
the same but <code>int</code> would be replaced with <code>var</code>.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
So, what's going on under the hood of your computer when you say "OK
computer, let's have a variable"?
</p>

<p>
This is the bit where I remember the video of the American politician
explaining that the internet is just a series of tubes.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> Well, I'm
about to be just as reductivist and say that your computer's memory is
'just' a big long line of ones and zeroes.
</p>


<figure>
<img src="file:///images/c-types/bits.png" alt="bits.png">

<figcaption><span class="figure-number">Figure 1: </span>a series zeroes and ones</figcaption>
</figure>

<p>
So Matrix.
</p>

<p>
Each one of these ones and zeroes is called a <i>bit</i> (Binary DigIT -
geddit?). And eight of those in a row is called a <i>byte</i> (no idea, you
look it up).<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> Byte is a good level of abstraction to work from for
C, so let's replace our image of a <i>very</i> long list of zeroes and ones
with a <i>very</i> long row of boxes, each box holding a byte of information.
</p>


<figure>
<img src="file:///images/c-types/bytes.png" alt="bytes.png">

<figcaption><span class="figure-number">Figure 2: </span>a series of empty boxes</figcaption>
</figure>

<p>
Less Matrix, but we're cool, right?
</p>
</div>
</div>

<div id="outline-container-org50ed82d" class="outline-2">
<h2 id="why-we-have-types">Why we have types</h2>
<div class="outline-text-2" id="text-why-we-have-types">
<p>
So now we need to do something with this memory - write programs! Ok,
more specifically, we need to keep hold of an integer. And we can do
this by reserving a specific portion of that <i>very</i> long row of boxes to
keep the number in. But how many boxes do we need to do that? Well,
basic maths tells us that a single byte could hold any number from 0 up
to 255 as long as it's positive.<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> Cool - so now we can keep hold of
the number 5.
</p>


<figure>
<img src="file:///images/c-types/5-in-one.png" alt="5-in-one.png">

<figcaption><span class="figure-number">Figure 3: </span>a series of empty boxes</figcaption>
</figure>

<p>
But we might need to store much bigger numbers - what if we added 255 to
our that variable, we'd not have enough space to store the number 260.
So maybe we should reserve more bytes in memory to hold that number. How
many? I don't know, maybe 128 of them, just to be safe.
</p>


<figure>
<img src="file:///images/c-types/5-in-128.png" alt="5-in-128.png">

<figcaption><span class="figure-number">Figure 4: </span>a series of empty boxes</figcaption>
</figure>

<p>
But isn't that terribly inefficient? We'd just be reserving a lot of
bytes which would always be <code>0</code> if we never kept a number bigger than
</p>
<ol class="org-ol">
<li>I mean, this is C - the year is 1971, the most memory we're going to</li>
</ol>
<p>
have available is 64KB. We don't want to run out of memory messing
around with piddly little positive integers&#x2026; how much space do we need
to allocate to store a number?
</p>

<p>
And that's why we have different types for different magnitudes of
integer. For small numbers there's things like <code>char</code> (a single byte)
and <code>int</code>, and for bigger numbers we've got the mighty <code>long long</code> and
<code>unsigned long long</code>.
</p>

<p>
The type of a variable is the space reserved for it in your computer's
memory.<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup> C offers us control over memory allocation, at the price
of us actually having to care about memory.
</p>

<p>
For instance, <code>char</code> which is good for storing information about a
single ASCII characters (more about them later). But if we need to keep
hold of a number bigger than 255, we can go with <code>int</code>, which is
guaranteed to store a number between ‚àí32767 to 32767, which is two
bytes.
</p>

<p>
We say "guaranteed", because a system's implementation of C could
allocate more memory to an <code>int</code>, so the C standard tells us the maximum
number a type can definitely store. In reality it's larger - on my
Macbook Pro the maximum size of an <code>int</code> is in fact between -2147483648
and 2147483647 - four bytes in fact.
</p>
</div>
</div>

<div id="outline-container-org2034469" class="outline-2">
<h2 id="integer-overflow">Integer overflow</h2>
<div class="outline-text-2" id="text-integer-overflow">
<p>
Let's try some of this stuff out - here's a fun program.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #cdad00; font-weight: bold;">#include</span> <span style="color: #666666;">&lt;stdio.h&gt;</span>

<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333; font-weight: bold;">main</span>() {
    <span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333;">int_number</span>;
    int_number = 2000000000;
    printf(<span style="color: #666666;">"int_number: %d\n"</span>, int_number);

    int_number = int_number + 2000000000;
    printf(<span style="color: #666666;">"int_number + 2000000000: %d\n"</span>, int_number);
}
</pre>
</div>

<p>
Here we've got the <code>main()</code> function again, which will runs on
execution. We're declaring a variable of type <code>int</code> called <code>int_number</code>
on line 4 and assigning it the value of two billion on line 5. Then
we're printing it out - <code>printf()</code> can take a format string as its first
argument, allowing later arguments to be interpolated into the string -
<code>%d</code> is the placeholder for an <code>int</code> to be inserted, so the value of
<code>int_number</code> is printed instead of the <code>&amp;d</code> in the string.
</p>

<p>
Then we reassign <code>int_number</code> to the value of <code>int_number</code> plus another
two billion. And finally we print out the value of <code>int_number</code> again.
</p>

<p>
To compile and run it take a look at the
<a href="file:///posts/2016/8/9/learning-the-c-programming-language-part-1:-hello,-world/">first
post in this series</a>. Try it now and see what you get.
</p>

<p>
Something pretty odd, right? Maybe it'll be different on your computer
but here for me the result of 2000000000 + 200000000 is -294967296.
Which is just wrong.
</p>

<p>
What happened? Well we just experienced
<i><a href="https://en.wikipedia.org/wiki/Integer_overflow">integer overflow</a></i>,
where C quite happily adds two numbers together and stores them in a
variable, but if the type of the variable isn't big enough to hold the
new number C will just store as many bits as it can in the space it's
got. Look, try this variation:
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #cdad00; font-weight: bold;">#include</span> <span style="color: #666666;">&lt;stdio.h&gt;</span>

<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333; font-weight: bold;">main</span>() {
    <span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333;">int_number</span>;
    int_number = 2147483647;
    printf(<span style="color: #666666;">"int_number: %d\n"</span>, int_number);

    int_number = int_number + 1;
    printf(<span style="color: #666666;">"int_number + 2000000000: %d\n"</span>, int_number);
}
</pre>
</div>

<p>
You should get -2147483648, not 2147483648.
</p>

<p>
Integer overflow is like the moment when all the numbers on your car's
odometer are all 9s, and then they all roll over at once to all the 0s -
you've run out of space to represent the new number with digits you're
using. And for 'digits' in our example read 'bits' - <code>1111111111111111</code>
becomes <code>0000000000000000</code>, which is the representation of -2147483648
in binary.<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup>
</p>
</div>
</div>

<div id="outline-container-org584dcdb" class="outline-2">
<h2 id="fixing-integer-overflow">Fixing integer overflow</h2>
<div class="outline-text-2" id="text-fixing-integer-overflow">
<p>
To solve this problem we need a <code>bigger boat</code> larger type to store our
number in, which is as easy as changing an <code>int</code> to a
<code>unsigned long long</code>:
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #cdad00; font-weight: bold;">#include</span> <span style="color: #666666;">&lt;stdio.h&gt;</span>

<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333; font-weight: bold;">main</span>() {
    <span style="color: #333333; font-weight: bold; font-style: italic;">unsigned</span> <span style="color: #333333; font-weight: bold; font-style: italic;">long</span> <span style="color: #333333; font-weight: bold; font-style: italic;">long</span> <span style="color: #333333;">int_number</span>;
    int_number = 2000000000;
    printf(<span style="color: #666666;">"int_number: %d\n"</span>, int_number);

    int_number = int_number + 2000000000;
    printf(<span style="color: #666666;">"int_number + 2000000000: %d\n"</span>, int_number);
}
</pre>
</div>

<p>
We should now be getting a nice round four billion.
</p>
</div>
</div>

<div id="outline-container-org569ebc9" class="outline-2">
<h2 id="types-in-ruby-and-javascript">Types in Ruby and JavaScript</h2>
<div class="outline-text-2" id="text-types-in-ruby-and-javascript">
<p>
Ruby and JavaScript also have types - but we just don't get to see them
as often and they're not as granular.
<a href="http://people.mozilla.org/~jorendorff/es5.html#sec-8">JavaScript
numbers</a> <i>always</i> take up 8 bytes - big enough to handle most numbers -
and Ruby just switches the class of a number as it grows between classes
like <a href="https://ruby-doc.org/core-2.2.0/Fixnum.html">Fixnum</a> and
<a href="https://ruby-doc.org/core-2.2.0/Bignum.html">Bignum</a>. These are both
good solutions, and take away the headache of having to think about the
correct type to use to represent an integer, but also lack the freedom
for us to manage memory directly.
</p>
</div>
</div>

<div id="outline-container-org8476c76" class="outline-2">
<h2 id="practically-speaking">Practically speaking&#x2026;</h2>
<div class="outline-text-2" id="text-practically-speaking">
<p>
In practice when I write C, I start with using =int=s, wait until I see
errors that are due to integer oveflow, and then find and replace to
change the <code>int=s to =long long</code> or <code>unsigned long long</code>. In practice,
on my highly specced modern computer, I'm not too worried about
tinkering with how much memory I'm using for my toy C programs.
</p>

<p>
But it's nice to know I can.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Or <code>let</code> or <code>const</code> or whatever the new flavour of the month is.
Or you could do it in a single line, <code>var number = 5</code>, which some
versions of C will also let you do: <code>int number = 5</code>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
The late senator
<a href="https://en.wikipedia.org/wiki/Series_of_tubes">Ted Stevens</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
Worth noting that the size of a byte was only fixed when IBM
decided it would be 8 bits. Maybe take a look at
<a href="http://www.wordorigins.org/index.php/bit_byte/">this</a>.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
Eight ones, <code>11111111</code>, in binary is 255 in decimal.
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
This may be a contentious statement. Here I'm refering to type as
early programmers would have understood the idea of a type of
data, rather than the types of
<a href="https://en.wikipedia.org/wiki/Type_theory">type theory</a>, based
on Bertrand Russell's solution to the
<a href="https://en.wikipedia.org/wiki/Russell's_paradox">set theoretic
paradoxes</a>, which was later brought in to computer science by
way of Alonzo Church and languages like ML and which functional
programmers tend to wax lyrical about in languages like Scala.
Take a look at
<a href="http://arcanesentiment.blogspot.co.uk/2015/01/a-brief-history-of-type.html">this
blog post</a> and
<a href="http://lists.seas.upenn.edu/pipermail/types-list/2014/001781.html">this
short post</a>.
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
If you want to know <i>why</i> this is, take a look at some articles
on <a href="https://en.wikipedia.org/wiki/Two's_complement">Two's
Complement</a>.
<a href="https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html">This
one</a> is pretty good too. <code>unsigned</code> types don't have to worry
about this and so can consequently store larger, non-negative
integers.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2016-12-03-the-c-programming-language-part-two-types.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Fixing your last bash command]]></title>
  <description><![CDATA[
<p>
Guy I know - Oliver - command line <i>ninja</i>. Never makes a mistake. Can
configure an AWS in a single long bash command. Typing speed through the
roof. Bet you know someone like that too.
</p>

<p>
We mere mortals make mistakes and, while it's always good to learn from
your mistakes, the first thing you have to do is <i>fix them</i>.
</p>

<p>
And to fix them you need to learn how to fix them.
</p>

<div id="outline-container-org45b5ce0" class="outline-2">
<h2 id="simple-replace">Simple replace</h2>
<div class="outline-text-2" id="text-simple-replace">
<p>
Say you've typed an impossibly long command into the terminal with one
irritating mistake. For me, it's usually something to do with <code>xargs</code> or
<code>curl</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">curl -s -I -X POST https://en.wikipedia.org/wiki/CURL | grep HTTP | cut -d <span style="color: #666666;">' '</span> -f 2
</pre>
</div>

<p>
Not the greatest command - but say I couldn't spell wikipedia&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-sh">curl -s -I -X POST https://en.wikpedia.org/wiki/CURL | grep HTTP | cut -d <span style="color: #666666;">' '</span> -f 2
</pre>
</div>
</div>

<div id="outline-container-org61f0d8d" class="outline-3">
<h3 id="first-solution-up-and-left">First solution: up and left</h3>
<div class="outline-text-3" id="text-first-solution-up-and-left">
<p>
Naive, and effective. Press up to show the last command, keep tapping
left until you get the the bit of the command you need to change,
backspace to remove what you don't need and then enter what you do need
</p>
</div>
</div>

<div id="outline-container-org05c7a31" class="outline-3">
<h3 id="second-solution-bash-vi-mode">Second solution: bash vi mode</h3>
<div class="outline-text-3" id="text-second-solution-bash-vi-mode">
<p>
Bash has a vi mode, which can be activated by adding the following to
your <code>.bashrc</code>.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #333333; font-weight: bold;">set</span> -o vi
</pre>
</div>

<p>
If you're comfortable with vi you can now hit <code>Escape</code> to bounce into
normal mode, <code>Ctrl-P</code> to go back to the last command, <code>b</code> a few times to
get to the word you need to change&#x2026; etc.
</p>

<p>
Vi mode is great - if you know a bit of vi. But you might not. So&#x2026;
</p>
</div>
</div>

<div id="outline-container-org323fa0e" class="outline-3">
<h3 id="third-solution-quick-substitution">Third solution: quick substitution</h3>
<div class="outline-text-3" id="text-third-solution-quick-substitution">
<p>
How about something a little smarter:
</p>

<div class="org-src-container">
<pre class="src src-sh">^wikpedia^wikipedia
</pre>
</div>

<p>
This is the bash [quick substitution][quickSub] history expansion
command - it runs the last command, substituting the first instance of
the charaters after the first caret with the characters after the second
caret.
</p>

<p>
Pretty neat huh? But that will olny work for the first instance - what
if we need to replace every instance of <code>wikpedia</code> in the last command?
</p>
</div>
</div>

<div id="outline-container-org69a2430" class="outline-3">
<h3 id="fourth-solution-full-history-substituton">Fourth solution: full history substituton</h3>
<div class="outline-text-3" id="text-fourth-solution-full-history-substituton">
<p>
Bash uses the <code>!</code> character as the [history expansion][histExp]
character - it is used to substitute a part of your current command with
a previously executed command<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. One <code>!</code> does nothing - but the
previous command can be accessed with the <code>!!</code> sequence. So, to print
out the last command, try:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #333333; font-weight: bold;">echo</span> !!
</pre>
</div>

<p>
These history expansions can also take [modifier][histMod] options to
change the string before it gets inserted. The syntax is
<code>&lt;select&gt;:&lt;modifier&gt;</code>. For instance, to put the last command in quotes:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #333333; font-weight: bold;">echo</span> !!:q
</pre>
</div>

<p>
And to perform a global substitution on it:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #333333; font-weight: bold;">echo</span> !!:gs/wikpedia/wikipedia
</pre>
</div>

<p>
There is lots that can be done with the above syntax - just take a look
at the documentation.
</p>
</div>
</div>

<div id="outline-container-org05866d3" class="outline-3">
<h3 id="fifth-solution-retype-the-command">Fifth solution: retype the command</h3>
<div class="outline-text-3" id="text-fifth-solution-retype-the-command">
<p>
Seriously, by the time you've remembered how to do some of the above,
wouldn't it have just been easier to type it out again.
</p>

<p>
Just don't mess it up this time, right?
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
And this is the reason I have to escape <code>!</code> whenever I use it in
commit messages [quickSub]:
<a href="https://www.gnu.org/software/bash/manual/html_node/Event-Designators.html#Event-Designators">https://www.gnu.org/software/bash/manual/html_node/Event-Designators.html#Event-Designators</a>
[histExp]:
<a href="https://www.gnu.org/software/bash/manual/html_node/History-Interaction.html#History-Interaction">https://www.gnu.org/software/bash/manual/html_node/History-Interaction.html#History-Interaction</a>
[histMod]:
<a href="https://www.gnu.org/software/bash/manual/html_node/Modifiers.html#Modifiers">https://www.gnu.org/software/bash/manual/html_node/Modifiers.html#Modifiers</a>
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2016-09-03-bash-replace.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Learning the C Programming Language]]></title>
  <description><![CDATA[
<div class="HTML">
<p>
&lt;h2&gt;
</p>

</div>

<p>
Part 1: hello, world
</p>

<div class="HTML">
<p>
&lt;/h2&gt;
</p>

</div>

<p>
I've started to learn C. There's a number of reasons for this. First, it
was the 'proper' programming language when I was a kid. Second, I've
been learning quite a bit of Go recently, and just about every other
page on the excellent <a href="https://blog.golang.org/">Go Blog</a> has a
sentence that starts with "In C&#x2026;".<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Third, I've started a course on
<a href="https://www.coursera.org/specializations/data-structures-algorithms">Data
Structures and Algorithms</a> on <a href="https://www.coursera.org/">Coursera</a>,
inspired by the ever-inspirational
<a href="https://twitter.com/deniseyu21">Denise Yu</a>. The course only accepts
submissions in four languages: Python, Java, C++ and C.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> Going
through that list my mind went "Basically Ruby with <i>bleaugh</i>
indentation, <i>bleaugh</i> Java <i>bleaugh</i>, sounds <i>really</i> hard, sounds
hard." So I went with 'sounds hard'.
</p>

<p>
I thought I'd try and capture my process of learning C as it might be
useful to others in a similar position - i.e.¬†no computer science
background but know how to program in Ruby and JavaScript. I'll be
approaching this in a series of posts, most of which will be following
the loose structure of
<a href="http://blog.gypsydave5.com/the-c-programming-language-presentation/">a
presentation I gave on C</a>.<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup>
</p>

<div id="outline-container-org749b234" class="outline-2">
<h2 id="background">Background</h2>
<div class="outline-text-2" id="text-background">
<p>
C was invented by Dennis Richie at Bell labs in the 1970s in order to
write UNIX.<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> He needed a language that provided sufficient
abstraction to program quickly and efficiently, while at the same time
being able to communicate directly with the computer's memory addresses
to allow a programmer to perform low level optimizations. It has been a
remarkably popular language, being used to write other languages (Ruby
is written in C, NodeJS wouldn't work without
<a href="https://nikhilm.github.io/uvbook/introduction.html">libuv</a>, written
in C), and heavily influencing most modern programming languages (Java,
Ruby, JavaScript, and most obviously, Go).
</p>
</div>
</div>

<div id="outline-container-orgddf9426" class="outline-2">
<h2 id="hello-world"><code>hello, world</code></h2>
<div class="outline-text-2" id="text-hello-world">
<p>
Another of the ways C has influenced programming is through
<a href="https://en.wikipedia.org/wiki/The_C_Programming_Language"><i>The C
Programming Language</i></a> by Richie and Brian Kernighan. The author's
intials gave their name to a
<a href="https://en.wikipedia.org/wiki/Indent_Style#K.26R_style">style of
formatting code</a>, along with giving us the <i>de facto</i> standard for your
first program: "hello, world".
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #cdad00; font-weight: bold;">#include</span> <span style="color: #666666;">&lt;stdio.h&gt;</span>

<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333; font-weight: bold;">main</span>() {
    printf(<span style="color: #666666;">"hello, world\n"</span>);
}
</pre>
</div>

<p>
Line 1: Include a file called <code>stdio.h</code>. It includes information about
the functions in the C standard library that deal with I/O -
input/output. In this case printing to the terminal.
</p>

<p>
Line 3: All C programs start with a function called <code>main</code> - this is the
function that gets executed when the program is, well, executed. The
arguments (of which we're using none at all) are in the parentheses. The
body of the function is in the curly braces. So far so JavaScript. For
people who have never seen a typed language the <code>int</code> is a little
surprising. All it's telling us (and C) is that the return value for
this function is an integer. We'll talk about types later, but for now
the <code>int</code> is almost working like <code>def</code> in Ruby or <code>function</code> in
JavaScript - it's a keyword declaring a function.
</p>

<p>
Line 4: The meat of the program. Here we're calling a function called
<code>printf</code> which has already been written for us as a part of the C
standard library - this is why we did that <code>#include</code> at the beginning.
We're calling it with a single argument, a string literal inside double
quotes, that just says "hello, world" with a newline character (<code>\n</code>) at
the end.
</p>

<p>
At the end of the line we put a semi-colon to tell C that the line has
finished.
</p>
</div>
</div>

<div id="outline-container-org96afd4e" class="outline-2">
<h2 id="compiling-and-running">Compiling and running</h2>
<div class="outline-text-2" id="text-compiling-and-running">
<p>
If you put all of that into a file called <code>hello-world.c</code>, save it, head
to the terminal and type<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>
</p>

<div class="org-src-container">
<pre class="src src-sh">gcc hello-world.c
</pre>
</div>

<p>
Then if you <code>ls</code> the same directory you should see a new file
called=a.out=.<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup> If you then run this with <code>./a.out</code>, you'll see
<code>hello, world</code>. Mission accomplished.
</p>

<p>
<code>gcc</code> is the <a href="https://gcc.gnu.org/">Gnu Compiler Collection</a>,<sup><a id="fnr.7" class="footref" href="#fn.7">7</a></sup>
which will compile your C program into an executable that your computer
can run. All this means is that instead of translating each line of your
program into something your computer can understand as you run it, as
with something like Ruby or JavaScript, we're translating the whole
program in one go before we run it.
</p>

<p>
<code>a.out</code> isn't that informative, so in order to get a better filename we
can pass a flag to GCC:
</p>

<div class="org-src-container">
<pre class="src src-sh">gcc hello-world.c -o hello-word
</pre>
</div>

<p>
Which outputs to the file <code>hello-world</code>, which we can now run with
<code>./hello-world</code>
</p>

<p>
Success, we're now all C programmers!
</p>
</div>

<div id="outline-container-orgb5ce579" class="outline-3">
<h3 id="why-main-returns-an-int">Why <code>main</code> returns an <code>int</code></h3>
<div class="outline-text-3" id="text-why-main-returns-an-int">
<p>
If you've run programs on the command line before you may be aware that
you get exit codes with each program that runs. You may have even been
(un)lucky enough to see something on the lines of
<code>Error: non-zero exit code</code>. On a POSIX system, a process returns a
number to the process that called it to let it know how things went -
this is called the exit code. <code>0</code> is the good one, every other number is
some flavour of 'gone wrong'.
</p>

<p>
The default return value for main, if we don't explicitly return a
value, is <code>0</code>. We can change this behaviour in our <code>hello-world</code> by
returning an explicit value using the keyword <code>return</code> (very Ruby, so
JavaScript).
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #cdad00; font-weight: bold;">#include</span> <span style="color: #666666;">&lt;stdio.h&gt;</span>

<span style="color: #333333; font-weight: bold; font-style: italic;">int</span> <span style="color: #333333; font-weight: bold;">main</span>() {
    printf(<span style="color: #666666;">"hello, world\n"</span>);
    <span style="color: #333333; font-weight: bold;">return</span> 1;
}
</pre>
</div>

<p>
(don't forget the semicolon!)
</p>

<p>
Experiment with different return values. Remember to recompile your
program each time you do. You may be able to see the returned value in
your terminal's prompt. Otherwise you can echo out the last commands
exit status with the command <code>echo $?</code>.
</p>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Don't believe me? Look at
<a href="https://blog.golang.org/go-slices-usage-and-internals">this</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
You can now do the same course with a more diverse set of
languages.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
This was given at a Makers Academy alumni event. To view the
speakers notes tap <code>n</code>.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
A longer discussion of the origins of C was written by Richie and
is available
<a href="https://www.bell-labs.com/usr/dmr/www/chist.pdf">here</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
This assumes you have gcc installed, which is likely if you've
been developing on your computer for a while.
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
You want to know <i>why</i> it's <code>a.out</code>? Read Richie's C History -
link above.
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7">7</a></sup> <div class="footpara"><p class="footpara">
Yes, it used to be called the Gnu C Compiler - acronyms are so
wonderfully flexible&#x2026;
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2016-08-09-the-c-programming-language-part-one-hello-world.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Double Dash]]></title>
  <description><![CDATA[
<p>
If you're anything like me you'll find your directories liberally
scattered with some pretty strange directory and file names.
</p>

<pre class="example">
$ ls -la

-rw-r--r--   1 gypsydave5  1482096370   647 11 Oct 20:15 :w
drwxr-xr-x   2 gypsydave5  1482096370    68 10 Feb 08:55 -p/
-rw-r--r--   1 gypsydave5  1482096370  2900 11 Oct 20:15 \(
</pre>

<p>
Hopefully you're nothing like me and you never get this, but I'm both a
sloppy and impatient typist and so I will occasionally often mash the
keyboard in Vim and name a file after the write command, or somehow
create a directory called <code>-p</code> because I was using the recursive flag on
<code>mkdir</code>.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
On that subject, let's try and get rid of the <code>-p</code> directory:
</p>

<pre class="example">
$ rm -rf -p

rm: illegal option -- p
usage: rm [-f | -i] [-dPRrvW] file ...
       unlink file
</pre>

<p>
Hmmm, that sucks. What about&#x2026;
</p>

<pre class="example">
$ rm -rf "-p"

rm: illegal option -- p
usage: rm [-f | -i] [-dPRrvW] file ...
       unlink file
</pre>

<p>
Boo. Happily there's a *nix convention to help with these situations:
<code>--</code>. Double-dash tells the command you're running that everything that
comes after it is not to be treated as a command option, but is instead
a filename. So:
</p>

<pre class="example">
$ rm -rf -- -p
$ ls -la

-rw-r--r--   1 gypsydave5  1482096370   647 11 Oct 20:15 :w
-rw-r--r--   1 gypsydave5  1482096370  2900 11 Oct 20:15 (
</pre>

<p>
DISCO!
</p>

<p>
This behaviour is implemented in most of the command line tools you'll
use on a *nix system - it's useful to know.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
I'm <i>still</i> not sure how I managed this. But I'm staring at the
evidence now, so I know it must've happened.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2016-05-26-double-dash.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[(Even More) Memoization in JavaScript]]></title>
  <description><![CDATA[
<p>
A while ago I wrote a piece on [basic lazy evaluation and memoization in
JavaScript][firstBlog]. I'd like to continue some of the thoughts there
on memoization, and to look at how some popular JS libraries handle it.
</p>

<div id="outline-container-org640a14f" class="outline-2">
<h2 id="memoization-refresher">Memoization refresher</h2>
<div class="outline-text-2" id="text-memoization-refresher">
<p>
According to [Wikipedia][memWik], memoization is:
</p>

<blockquote>
<p>
an optimization technique used primarily to speed up computer programs
by storing the results of expensive function calls and returning the
cached result when the same inputs occur again.
</p>
</blockquote>

<p>
We want the program to remember the results of its operation, so it
doesn't have to expend any extra time and effort in doing them all over
again. It all seems a little obvious really.
</p>

<p>
So the first time we saw memoization it was in the context of [lazy
evaluation][firstBlog], where the memoized function had already been
prepared to be lazy. The lazily evaluated function was executed within
our memoizer, and the result was retained within the scope of the
memoized function, to be returned each subsequent time the function was
called. As a refresher:
</p>

<pre class="example">
function lazyEvalMemo (fn) {
  const args = arguments;
  let result;
  const lazyEval = fn.bind.apply(fn, args);
  return function () {
    if (result) {
      return result
    }
    result = lazyEval()
    return result;
  }
}
</pre>

<p>
Which is great if want the function to be memoized with a specific set
of arguments. But that isn't going to work all of the time - probably
not even most of the time. It's rare that there's just one set of
parameters we want to be eternally bound to our function. A bit of
freedom would be nice.
</p>
</div>
</div>

<div id="outline-container-orgd4de179" class="outline-2">
<h2 id="keeping-track-of-your-arguments">Keeping track of your arguments</h2>
<div class="outline-text-2" id="text-keeping-track-of-your-arguments">
<p>
If we want to be able to memoize a function which can take a variety of
arguments, we need a way to keep track of them. Let's take one of the
simplest cases:
</p>

<pre class="example">
function addOne (x) {
  return x + 1;
};
</pre>

<p>
That shouldn't take too much explanation. Now, in order to have a
memoized version of it, we need to keep track of all the different
values of <code>x</code> passed to it, and to associate them with the return value
of <code>addOne</code>.
</p>

<p>
A JavaScript object should suffice, taking <code>x</code> as a key, and the result
as the value. Let's give it a go:
</p>

<pre class="example">

const memo = {};

function memoAddOne (x) {
  if (memo[x]) {
    return memo[x];
  }
  return memo[x] = x + 1;
};
</pre>

<p>
This takes advantage of the fact that the value of an assignment to an
object is the value assigned (in this case <code>x + 1</code>), saving a line or
so. The only issue here is that the value of <code>memo</code> is floating around
in public, just waiting for other functions to overwrite and mutate. We
need a way to hide it.
</p>

<p>
Well, we could place <code>memo</code> on the function itself - it is an object
after all - and just put an underscore in front of its name to try and
let the world know that it's private (even though it isn't really
private):
</p>

<pre class="example">
function memoAddOne (x) {
  memoAddOne._memo = memoAddOne._memo || {};

  if (memoAddOne._memo[x]) {
    return memoAddOne._memo[x];
  }
  return memoAddOne._memo[x] = x + 1;
};
</pre>

<p>
This isn't beautiful, but it works. <code>_memo</code> gets defined as an empty
object on initialization and gets filled up with results on each
application of the function - throw some =console.log()=s in there to
prove it to yourself. That's exciting - although we're still a little
exposed with the <code>_memo</code> property being available on the function.
</p>

<p>
That said, we've got what we came for - a memoized version of our
function that works for many different arguments.
</p>
</div>
</div>

<div id="outline-container-orgb01528d" class="outline-2">
<h2 id="fun-with-strings">Fun with strings</h2>
<div class="outline-text-2" id="text-fun-with-strings">
<p>
Problem is, we're reliant on <code>x</code> being used as the property for our
<code>_memo</code> object. As all good school children are taught, JavaScript, like
the universe, is just a load of strings held together by
poorly-understood forces. When <code>x</code> is used in <code>_memo[x]</code>, JavaScript
handily casts it to a string to be used as the property name.
</p>

<p>
I say handily - but try this&#x2026;
</p>

<pre class="example">
memoAddOne([55]) // =&gt; '551'
memoAddOne(55) // =&gt; '551'
memoAddOne(66) // =&gt; 67
memoAddOne([66]) // =&gt; 67
</pre>

<p>
Because&#x2026;
</p>

<pre class="example">
55.toString() // =&gt; '55'
[55].toString() // =&gt; '55'
</pre>

<p>
Ah, JavaScript: thou givest with one hand&#x2026; <code>toString()</code>, which is what
JavaScript is using under the hood to cast the non-string property
identifier to a string, does not uniquely identify that argument. So our
function behaves inconsistently depending on whether it was given the
array or the number that <code>toString()</code> converts to the same string.
</p>

<p>
We need a more predictable way of parsing our argument. Happily, we can
borrow one of the built-in functions of JavaScript to do this,
<code>JSON.stringify()</code>.
</p>

<pre class="example">
JSON.stringify(55) // =&gt; '55'
JSON.stringify('55') // =&gt; '"55"'
JSON.stringify([55]) // =&gt; '[55]'
JSON.stringify(['55']) // =&gt; '["55"]'
</pre>

<p>
Pretty good - let's give it a whirl:
</p>

<pre class="example">
function memoAddOne (x) {
  memoAddOne._memo = memoAddOne._memo || {};
  const jsonX = JSON.stringify(x);

  if (memoAddOne._memo[jsonX]) {
    return memoAddOne._memo[jsonX];
  }
  return memoAddOne._memo[jsonX] = x + 1;
};

memoAddOne([55]) // =&gt; '551'
memoAddOne(55) // =&gt; 56
</pre>

<p>
Sorted.
</p>
</div>
</div>

<div id="outline-container-orga8c76e0" class="outline-2">
<h2 id="the-general-case">The General Case</h2>
<div class="outline-text-2" id="text-the-general-case">
<p>
Now let's put together a function that can memoize <i>any</i> function - and
as a bonus, we can also hide that nasty <code>_memo</code> property behind a
closure:
</p>

<pre class="example">
function memoize (fn) {
  const memo = {};

  return function () {
    const args = Array.prototype.slice.call(arguments);
    const jsonArgs = JSON.stringify(args);

    if (memo[jsonArgs]) {
      return memo[jsonArgs];
    }
    return memo[jsonArgs] = fn.apply(null, args);
  };
};
</pre>

<p>
Much of this should now be familiar, but let's dig in. We take a single
argument, hopefully a function, and bind it to the variable <code>fn</code>. We now
get to declare <code>memo</code> inside our function - and hooray it's now
unavailable to anyone but the function we're returning. Now that's what
I call private - thank you closures!
</p>

<p>
The function we give back, well we don't know how many arguments it's
going to be given so why bind them to any parameters? We'll just leave
its parameters empty. Any arguments we do get we'll instantly turn into
an array by using the funky <code>Array.prototype.slice.call(arguments)</code>
dance. And that array we can <code>stringify()</code> on the next line and call
something useful like <code>jsonArgs</code>.
</p>

<p>
Then we do much the same as above, only instead of giving <code>x + 1</code> as the
value of <code>_memo[jsonX]</code>, we set the value of <code>memo[jsonArgs]</code> as the
result of applying the <code>args</code> array to the original function we were
given to memoize. Job done.
</p>

<p>
Again, throw some =console.log=s in there to see what's really going on.
</p>
</div>
</div>

<div id="outline-container-org350aef2" class="outline-2">
<h2 id="heres-one-i-made-earlier-installed-with-npm">Here's One I Made Earlier Installed With <code>npm</code></h2>
<div class="outline-text-2" id="text-heres-one-i-made-earlier-installed-with-npm">
<p>
The above is so incredibly useful that you'll not be surprised to learn
that it's implemented, with slight modifications, in functional
JavaScript libraries like [Underscore], [Lodash] and (personal niche
favourite) [Ramda].<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Let's take a look at [the Lodash implementation]:
</p>

<pre class="example">
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver &amp;&amp; typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new memoize.Cache;
  return memoized;
}
</pre>

<p>
Now, although this is a little more long-winded complicated than the
code above, it should be similar enough for us to see that they're doing
the same thing. The difference being that in the above we are to supply
an external function to hash the arguments (the <code>resolver</code> function),
and that Lodash offers a custom caching object with a <code>get()</code> and
<code>set()</code> interface, which we can overwrite if we like.
</p>

<p>
(Bonus Question: why does this implementation of <code>memoize</code> suck if we
don't supply a <code>resolver</code> argument?)
</p>

<p>
The above library code will save us all the hassle of writing a
memoization function ourselves - but now we can see how they work under
the hood, we can take a more informed decision about whether we need to
create a dependency on external library, or whether we just put together
the (relatively) simple piece of code ourselves.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
Seriously, this is the one to go for. It's amazing, it's
beautiful - it's <i>functional</i>. [the Lodash implementation]:
<a href="https://github.com/lodash/lodash/blob/4.6.1-npm/memoize.js#L48">https://github.com/lodash/lodash/blob/4.6.1-npm/memoize.js#L48</a>
[firstBlog]:
<i>posts/2015/3/21/%28basic%29-lazy-evaluation-and-memoization-in-javascript</i>
[Ramda]: <a href="http://ramdajs.com/0.20.0/index.html">http://ramdajs.com/0.20.0/index.html</a> [Underscore]:
<a href="http://underscorejs.org/">http://underscorejs.org/</a> [Lodash]: <a href="https://lodash.com/">https://lodash.com/</a> [memWik]:
<a href="https://en.wikipedia.org/wiki/Memoization">https://en.wikipedia.org/wiki/Memoization</a>
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2016-03-27-more-js-memoization.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Pre-commit Hooks in Git]]></title>
  <description><![CDATA[
<p>
Remembering to run your tests before you commit is hard:
</p>

<div class="org-src-container">
<pre class="src src-sh">* 84f7e2e 2016-02-06 | Another typo. And test[David Wickes]
* ef215f8 2016-02-06 | OMFG semicolons WAAAAAT [David Wickes]
* c20b65d 2016-02-06 | Typo [David Wickes]
* fca4aa8 2016-02-06 | Another fix for the same test[David Wickes]
* f0206a9 2016-02-06 | Fixes failing test [David Wickes]
* 657cc48 2016-02-06 | Amazing new feature [David Wickes]
</pre>
</div>

<p>
Yes, I suck. It's even worse when you've just pushed that <i>teensy-tiny,
insignificant</i> change to the CI pipeline and it throws a strop because
the JS linter is <i>super</i> fussy about semi-colons.
</p>

<p>
Don't get angry. Get even.
</p>

<p>
Wait, wut? Don't get even. Automate all the things!
</p>

<p>
Inside the unexamined recesses of the <code>.git</code> directory of every repo is
a folder called <code>hooks</code>. You should look inside it.
</p>

<div class="org-src-container">
<pre class="src src-sh">applypatch-msg.sample
commit-msg.sample
post-update.sample
pre-applypatch.sample
pre-commit.sample <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">&lt;--- This one here!</span>
pre-push.sample
pre-rebase.sample
prepare-commit-msg.sample
update.sample
</pre>
</div>

<p>
You'll see some pretty self-explanatory instructions on what it does,
but the tl;dr is:
</p>

<ul class="org-ul">
<li>It is a shell script that runs before you commit</li>
<li>You activate it by removing the <code>.sample</code> bit.</li>
</ul>

<p>
So say we have a Node project we're working on. A cool pre-commit hook
would look like:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #d9d9d9;">#</span><span style="color: #7f7f7f;">!/bin/</span><span style="color: #333333; font-weight: bold;">sh</span>

npm test
</pre>
</div>

<p>
Pop that in a file called <code>pre-commit</code> inside that <code>hooks</code> directory -
make sure it's executable like the sample ones - and see what you get.
</p>

<p>
So as long as you've set up you <code>package.json</code> file sensibly to run
tests when you run <code>npm test</code> you're golden. Same idea holds for <code>rake</code>
or <code>gradle</code> or whatever you're using as a task runner.
</p>

<p>
But you'd hate to do that for every project, right? Automate that too.
</p>

<p>
Try this:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ git config --global init.templatedir <span style="color: #666666;">'~/.git-templates'</span>
$ mkdir -p ~/.git-templates/hooks
</pre>
</div>

<p>
Inside the equally unexamined <code>.gitsettings</code> in your home directory you
should now see:
</p>

<pre class="example">
[init]
    templatedir = ~/.git-templates
</pre>

<p>
(you could've just written that in there by hand&#x2026; but here we are)
</p>

<p>
What this'll do is copy the contents of <code>.git-templates</code> to the <code>.git</code>
directories of new projects you clone or initialize.
</p>

<p>
We now need to make our hook more generic. Let's save the below off in
<code>~/.git-templates/hooks/pre-commit</code>:
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #d9d9d9;">#</span><span style="color: #7f7f7f;">!/bin/</span><span style="color: #333333; font-weight: bold;">sh</span>

<span style="color: #333333; font-weight: bold;">if</span> [ -f package.json ]; <span style="color: #333333; font-weight: bold;">then</span>
    <span style="color: #333333; font-weight: bold;">echo</span> <span style="color: #666666;">"detected package.json... running npm test"</span>
    npm test
<span style="color: #333333; font-weight: bold;">else</span>
    <span style="color: #333333; font-weight: bold;">echo</span> <span style="color: #666666;">"no testable project detected... so no tests before commit"</span>
<span style="color: #333333; font-weight: bold;">fi</span>
</pre>
</div>

<p>
<code>[ -f package.json ]</code> asks if there's a file called <code>package.json</code>, and
if there is we run <code>npm test</code>. The rest of the script is just a little
logging so we can see what's happening. Just remember to make it
executable<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> before you start to use it.
</p>

<p>
There we have it - the bare bones of a "generic" pre-commit hook. You
can easily embelish this with more tests and other
exciting/useful/amusing things to execute (is there a <code>Rakefile</code>
present? Do any of the files I'm commiting still contain a <code>console.log</code>
or a <code>puts</code>?).
</p>

<p>
As I said, this template will get added to everything that gets
<code>clone=ed or =init=ialized by Git from now on. For those projects that
have already been started, just run =git init</code> again to pull in the
template.
</p>

<p>
And there we are - have fun exploring the other sample templates, [read
the docs][docs], and experiment with other useful scripts. Then tell me
about them on Twitter so I can use them.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
<code>chmod a+x pre-commit</code> - you didn't need telling, but just in
case. [docs]:
<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks</a>
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2016-02-20-pre-commit-hooks-in-git.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Downloading a list of URLs]]></title>
  <description><![CDATA[
<p>
Say you've got a list of URLs - a long list of URLs - each of which
points to a file. Perhaps they're a set of logs, or backups, or
something similar. The file looks like this:
</p>

<pre class="example">
http:/www.somedomain.com/my/file/number-one.txt
http:/www.somedomain.com/my/file/number-two.txt
http:/www.somedomain.com/my/file/number-three.txt
...
http:/www.somedomain.com/my/file/number-five-hundred-and-x-ity-x.txt
</pre>

<p>
Now what we don't want to do is copy and paste each of those file names
into a browser to download the file. That would suck. What would be
ideal is to drop the file into a magic box, and that magic box just work
through the list, downloading the files until they're all done.
</p>

<p>
Happily every *nix command line comes with its very own tooling to build
a magic box like this.
</p>

<div id="outline-container-orga5a4900" class="outline-2">
<h2 id="wget"><code>wget</code></h2>
<div class="outline-text-2" id="text-wget">
<p>
My first instinct would be to use
<a href="https://www.gnu.org/software/wget/">wget</a>, which is certainly the
friendliest way I've seen to download files on the command line. Taking
a short read of the manual with <code>man wget</code> we can see the following:
</p>

<pre class="example">
-i file
   --input-file=file
       Read URLs from a local or external file.  If - is specified as file,
       URLs are read from the standard input.  (Use ./- to read from a file
       literally named -.)
</pre>

<p>
So the job is incredibly simple - we just type:
</p>

<pre class="example">
$ wget -i file-with-list-of-urls.txt
</pre>

<p>
and we just let wget do its magic.
</p>
</div>
</div>

<div id="outline-container-org83f11e1" class="outline-2">
<h2 id="url-and-xargs"><code>url</code> and <code>xargs</code></h2>
<div class="outline-text-2" id="text-url-and-xargs">
<p>
That was too easy - I love <code>wget</code> and usually wind up installing it on
any system I use for longer than 30 seconds. But sometimes it's
unavailable - maybe there's no package manager, or you have no rights to
install packages because you're remoting in to a tiny machine running a
very skinny Linux distro. In these cases we're going to have to rely on
<code>wget</code>'s older, less forgiving but far more flexible sibling
<a href="https://curl.haxx.se/">curl</a>.
</p>

<p>
The quick and generic <code>curl</code> command to download a URL is:
</p>

<pre class="example">
$ curl http://www.file.com/file.txt -LO
</pre>

<p>
<code>curl</code> has a wealth of uses and options - we're barely scraping the
surface with what we're doing here. Take a look at the full <code>man</code> page
and you'll see what I mean.
</p>

<p>
But for this command: the <code>-L</code> flag tells curl to follow redirects - if
it wasn't there we'd get the <code>30x</code> response saved rather than the file
at the location we're being redirected to. The <code>-O</code> flag means that curl
uses the name of the remote file to name the file it's saved as, saving
us the bother of naming the output.
</p>

<p>
In order to pass each of the URLs into curl one after another we get to
use <a href="https://en.wikipedia.org/wiki/Xargs">xargs</a>, which is a wonderful
piece of witchcraft you can use to pass lines from <code>STDIN</code> in as
arguments to another command.
</p>

<p>
The full command looks like this:
</p>

<pre class="example">
$ cat file-with-list-of-urls.txt | xargs -n 1 curl -LO
</pre>

<p>
<code>cat</code> we should be comfortable with, it sends each line of a file out to
<code>STDIN</code> one at a time. Here we're piping out each line to <code>xargs</code>.
</p>

<p>
<code>-n 1</code> tells <code>xargs</code> that it should be expecting one and only one
argument for each execution from <code>STDIN</code> - in other words each of the
URLs will be used as a sindle extra argument to <code>curl</code>. If we didn't do
this, how would <code>xargs</code> know how many additional arguments <code>curl</code>
wanted? It could just use every URL as an extra argument to a single
<code>curl</code> execution. Which would suck.
</p>

<p>
So we take in an extra argument from <code>STDIN</code>, here being piped in by
<code>cat</code>, and we apply it to the end of <code>curl -LO</code>. <code>xargs</code> will now run
<code>curl</code> for each of the URLs.
</p>
</div>
</div>

<div id="outline-container-orgc4a4a4c" class="outline-2">
<h2 id="optimization">Optimization</h2>
<div class="outline-text-2" id="text-optimization">
<p>
Five hundred or so files is going to take a long time to download. Try
passing <code>-P 24</code> to <code>xargs</code>, which tells it to run the multiple curls as
24 parallel processes. That'll whip along nicely (if your machine can
take it).
</p>

<p>
Another nice feature would be the ability to output to a filename that
was not the same as the remote file - the path could be really annoying
and long. Using <code>xargs</code> we'd be somewhat limited, and would have to
change the input file to include not only the new file name but also an
extra argument to curl, <code>-o</code>, which gives the output file name.
</p>

<p>
The URL file list would look like this:
</p>

<pre class="example">
http:/www.somedomain.com/my/file/number-one.txt
-o
number-one.txt
http:/www.somedomain.com/my/file/number-two.txt
-o
number-two.txt
</pre>

<p>
and the command would be
</p>

<pre class="example">
$ cat file-with-list-of-urls.txt | xargs -n 3 curl -L
</pre>

<p>
But the same can be achieved without changing the original file list
using <a href="http://www.gnu.org/software/parallel/">GNU parallel</a>, which is
a distinct improvement (apart from the three extra characters).
</p>

<pre class="example">
$ cat file-with-list-of-urls.txt | parallel curl -L {} -o {/}
</pre>

<p>
which passes the original URL to the <code>{}</code> and then removes the path from
it with the <code>{/}</code>. There's plenty more you can do with <code>parallels</code> -
take a look at
<a href="https://www.gnu.org/software/parallel/parallel_tutorial.html">the
tutorial</a>.
</p>

<p>
Finally, it would be remiss of me not to mention that all the uses of
<code>cat</code> above are entirely superfluous - the same could have been achieved
with:
</p>

<pre class="example">
$ &lt;file-with-list-of-urls.txt parallel curl -L {} -o {/}
</pre>
</div>
</div>

<div id="outline-container-org6d0528b" class="outline-2">
<h2 id="update">Update</h2>
<div class="outline-text-2" id="text-update">
<p>
And if you want to avoid reading all those logs and just get on with
your life, try sending the whole process to the background and
redirecting <code>stdin</code> and <code>stdout</code> to a file.
</p>

<pre class="example">
$ nohup cat filelist | xargs -n4 curl -L &amp;&gt;output &amp;
</pre>

<p>
<code>nohup</code> protects the process from being interrupted by the session
closing. So it'll keep on going even when you close your terminal or SSH
connection. Don't worry, you can still <code>kill</code> it if you've made a
mistake.
</p>

<p>
And the <i>four</i> arguments?
</p>

<pre class="example">
http:/www.somedomain.com/my/file/number-one.txt
--create-dirs
-o
a-directory/hierarchy/number-one.txt
</pre>

<p>
You get <code>curl</code> to make you a directory structure too.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2016-02-04-xargs-and-curl.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Using Vim as a SQL Server Client]]></title>
  <description><![CDATA[
<p>
Bad times - having to connect to my company's SQL Server database in
order to migrate data. The last time I looked at that database it was
through a connection to a Windows box running the Microsoft development
client. Laggy, slow, and an unfamiliar environment.
</p>

<p>
So what are my options on a Mac? Well, there are a couple of SQL Server
clients out there, but the one I tried out turned out to be buggy -
there's nothing less fun than losing a query you've been crafting for an
hour. And why should I spend time moving the query betweeen an editor
(Vi) and an awkward GUI interface?
</p>

<p>
Screw that - let's do it in Vim! This method has been tested on my Mac,
but should also work for another *nix based system. No guarantees
though.
</p>

<div id="outline-container-orgc517ca1" class="outline-2">
<h2 id="the-tools">The Tools</h2>
<div class="outline-text-2" id="text-the-tools">
<p>
To do this we need:
</p>

<ul class="org-ul">
<li>a way for the Mac to talk to the SQL Server database</li>
<li>a way for that connection to talk to Vim</li>
</ul>

<p>
And we will be using the following tools to do that:
</p>

<ul class="org-ul">
<li><a href="http://www.freetds.org/">FreeTDS</a></li>
<li><a href="http://www.unixodbc.com/">unixODBC</a></li>
<li>the Vim plugin
<a href="http://www.vim.org/scripts/script.php?script_id=356">dbext.vim</a></li>
<li>and the Perl libraries <a href="http://dbi.perl.org/">DBI</a> and
<a href="http://search.cpan.org/~mjevans/DBD-ODBC-1.52/ODBC.pm">DBD::ODBC</a>
(installed using
<a href="http://search.cpan.org/~mjevans/DBD-ODBC-1.52/ODBC.pm">CPAN</a>)</li>
</ul>

<p>
We'll start with a simple example - connecting dbext to a local instance
of PostgreSQL.
</p>
</div>
</div>

<div id="outline-container-org138a50b" class="outline-2">
<h2 id="dbext-with-postgresql">dbext with PostgreSQL</h2>
<div class="outline-text-2" id="text-dbext-with-postgresql">
<p>
Install dbext into Vim using whichever package manager or other you
like. Dbext is a 'proper' Vim extension, in that it comes with extensive
documentation in the form of Vim helpfiles. Access the full help with
<code>:h dbext</code> and check out the tutorial at <code>:h dbext-tutorial</code>.
</p>

<p>
If even the tutorial is fast enough, here's a quick start for PostgreSQL
locally. Let's assume you've already installed PostgreSQL, and that
you've not added any usernames or passwords. Somewhere in your Vim
initialization files (like <code>~/.vimrc</code>) add the following line:
</p>

<p>
<code>let g:dbext_default_profile_local_PSQL = 'type=PGSQL'</code>
</p>

<p>
Here we've set up a local profile for PostgreSQL, called it
<code>local_PSQL</code>, and told dbext that the type of connection this profile
will use is, well, Postgres. Now either restart Vim or evaluate that
command in your current session.
</p>

<p>
To use this profile with some SQL in Vim, first put some SQL into a
buffer. Try this: <code>SELECT * FROM bob</code>. Then, in the buffer, send the
command <code>:DBPromptForBufferParameters</code>. You'll get a menu with the
<code>local_PSQL</code> option on it. Select that option (probably option 1).
</p>

<p>
Now have a crack at running a query - put your cursor on the line with
the SQL statement on it and execute the query with the command
<code>&lt;Leader&gt;sel</code> (=s=ql =e=xecute =l=ine).
</p>

<p>
This won't work, but should give you a hint about what's going wrong:
PostgreSQL needs a <code>[.pgpass]</code> file for the password to the database -
even if there isn't a password(!). So just create an empty file called
<code>.pgpass</code> in your <code>$HOME</code> directory. Now it should work (or at least
return a reasonable error message if your default database doesn't have
a <code>bob</code> table).
</p>

<p>
Now&#x2026; go crazy! Dbext is great - read some of the docs in full and have
a play with some SQL queries. Ah, the joy of Vim! Come back when you
want to hook it up to a remote SQL Server.
</p>
</div>
</div>

<div id="outline-container-org885be36" class="outline-2">
<h2 id="sql-server-on-mac">SQL Server on Mac</h2>
<div class="outline-text-2" id="text-sql-server-on-mac">
<p>
Had fun? Right, this bit is a bit of a drag. Macs (and other *nix
systems) have no native support for TDS, the protocol by which we talk
to SQL Server databases. So we'll have to install a library called
<code>freetds</code>.
</p>

<p>
But before we do that we'll need to install an ODBC driver as the
<code>freetds</code> library does not provide sufficiently sophisticated binaries
for <code>dbext</code> to use to query a database directly.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
First up we'll install <code>unixodbc</code> - I'm using
<a href="http://brew.sh/">Homebrew</a>, but if you'd like to build your own
binaries be my guest.
</p>

<pre class="example">
brew install unixodbc
</pre>

<p>
And now that's done, let's get hold of <code>freetds</code>
</p>

<pre class="example">
brew install freetds --with-unixodbc --with-msdblib
</pre>

<p>
We're asking for <code>freetds</code> to be installed with <code>unixodbc</code> support, and
telling it that we want it to use the version of TDS that Microsoft
developed for SQL Server.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>
</p>

<p>
If you'd like to test the installation, <code>freetds</code> comes with a couple of
command line tools you can use to connect to a SQL Server DB. Run <code>tsql</code>
with the appropriate server, port, username and password passed in as
options and check to see if you can connect. Have a bit more of a play
around if you can - you've earned it.
</p>
</div>
</div>

<div id="outline-container-org3827af5" class="outline-2">
<h2 id="perl-dbi-and-dbdodbc">Perl: <code>DBI</code> and <code>DBD::ODBC</code></h2>
<div class="outline-text-2" id="text-perl-dbi-and-dbdodbc">
<p>
The final step is to get <code>dbext</code> talking to the ODBC installation. And
it wants to do this through a pair of Perl libraries. We'll install
these using CPAN, the Perl equivalent of RubyGems or NPM.<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> First
start the interactive interface as the super user:
</p>

<pre class="example">
sudo perl -MCPAN -e shell
</pre>

<p>
And then install the libraries we need:
</p>

<pre class="example">
install DBI
install DBD::ODBC
</pre>

<p>
Both of these will output a scarily verbose amount of logs - it's ok,
it's normal<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> - and by the end of it we've got everything installed
that we'll need. Almost there. Almost&#x2026;
</p>
</div>
</div>

<div id="outline-container-org2f09f67" class="outline-2">
<h2 id="configuration-files">Configuration files</h2>
<div class="outline-text-2" id="text-configuration-files">
<p>
Getting <code>freetds</code> and <code>unixodbc</code> working together happily is super
simple - but it took me a while to work out exactly what was needed.
Configuration for <code>freetds</code> can live either in its own configuration
file, or with the ODBC configuration. The simplest thing to do is to
push the configuration over to the ODBC side entirely.
</p>

<p>
What we're looking to do it to tell ODBC that there is a sort of
database called 'freeTDS' and to point it to where the files that
describe the protocol live - this is the database 'driver', just like a
printer driver. Then we need to give ODBC the details of the specific
database we want to connect to - think of this as the specific printer
you connect to using a printer driver, the network address etc.
</p>

<p>
The first step is to register <code>freetds</code> as a driver with <code>unixodbc</code> -
this is done in a file called <code>odbcinst.ini</code> which Homebrew has
(hopefully) symlinked into <code>/usr/local/etc/odbcinst.ini</code><sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup>. And in
that file we put the following:
</p>

<pre class="example">
[FreeTDS]
Description = TD Driver (MSSQL)
Driver = /usr/local/lib/libtdsodbc.so
Setup = /usr/local/lib/libtdsodbc.so
FileUsage = 1
</pre>

<p>
The top line is the name we're giving the driver, the second a
human-friendly description of what it does. Thee next two lines give
ODBC the driver and set up information - <code>libsdsodbc.so</code> was installed
with the <code>freeTDS</code> installation and put in <code>/usr/local/lib</code> as a symlink
by Homebrew (again, hopefully).
</p>

<p>
That's the driver bit done. Now let's point ODBC to your SQL Server
database by adding its details to the <code>~/.odbc.ini</code> file, which you'll
have to create.<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup> Put the following in there:
</p>

<pre class="example">
[MyMSSQLDB]
Driver = FreeTDS
Server = &lt;ip or domain name goes here&gt;
Database = &lt;database name goes here&gt;
Port = &lt;port number&gt;
</pre>

<p>
This connection information is called a DSN<sup><a id="fnr.7" class="footref" href="#fn.7">7</a></sup>, and we'll be using it
in <code>dbext</code>. Replace <code>MyMSSQLDB</code> with something more descriptive - it's
the name of the connection to your database that ODBC (and, by
extension, <code>dbext</code>) will use.
</p>

<p>
Success! One more small step to go
</p>
</div>
</div>

<div id="outline-container-orge6617f4" class="outline-2">
<h2 id="odbc-in-dbext">ODBC in <code>dbext</code></h2>
<div class="outline-text-2" id="text-odbc-in-dbext">
<p>
Now we've got an ODBC connection to play with, it's time to put its
details into <code>dbext</code>. This can bedone by putting the following into your
<code>.vimrc</code> - right next to where you declared your PostgreSQL connection
information.
</p>

<p>
<code>let g:dbext_default_profile_MyMSSQLDB = 'type=ODBC:user=&lt;username&gt;:passwd=&lt;password&gt;:dsnname=MyMSSQLDB'</code><sup><a id="fnr.8" class="footref" href="#fn.8">8</a></sup>
</p>

<p>
Pretty long, right? But comprehendible. We're giving similar information
to that which we used for the PostgreSQL connection, only we're
declaring that the type is <code>ODBC</code>, and we're declaring the DSN name that
we're using as well.
</p>

<p>
And that's it. Restart your Vim Session, <code>&lt;Leader&gt;sbp</code> (it's the same as
<code>:DBPromptForBufferParameters</code>) and pick MyMSSQLDB (feel free to give it
a better name later). You can now evaluate lines of SQL against the
database, and see the return value in a separate split below.
</p>
</div>
</div>

<div id="outline-container-org8ce808d" class="outline-2">
<h2 id="tldr">tl;dr</h2>
<div class="outline-text-2" id="text-tldr">
<ul class="org-ul">
<li><code>brew install unixodbc</code></li>
<li><code>brew install freetds --with-unixodbc --with-msdblib</code></li>
<li><code>sudo perl -MCPAN -e shell</code></li>
<li><code>install DBI</code> and <code>install DBD::ODBC</code> in the CPAN shell</li>
<li>Add the following to <code>/usr/local/etc/odbcinst.ini</code>:</li>
</ul>

<pre class="example">
[FreeTDS]
Description = TD Driver (MSSQL)
Driver = /usr/local/lib/libtdsodbc.so
Setup = /usr/local/lib/libtdsodbc.so
FileUsage = 1
</pre>

<ul class="org-ul">
<li>Add the following to <code>~/.odbc.ini</code>:</li>
</ul>

<pre class="example">
[MyMSSQLDB]
Driver = FreeTDS
Server = &lt;ip or domain name goes here&gt;
Database = &lt;database name goes here&gt;
Port = &lt;port number&gt;
</pre>

<ul class="org-ul">
<li>install <code>dbext</code> into Vim</li>
<li>Add
<code>let g:dbext_default_profile_MyMSSQLDB = 'type=ODBC:user=&lt;username&gt;:passwd=&lt;password&gt;:dsnname=MyMSSQLDB'</code>
to <code>~/.vimrc</code></li>
<li>Read the <code>dbext</code> manual (<code>:h dbext</code>)</li>
</ul>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
My details are <i>fuzzy</i> at best, but as far as I can see the
<code>osql</code> and <code>tsql</code> bins that come with <code>freetds</code> are not set up
for interactive querying, and can't be used in the same way that,
say, <code>osql</code> on a Windows machine would work.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Even when making their own standard, M$ can't help but diverge
from it.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
Or Maven or whatever.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
CPAN is running all the tests on each of the modules. Bit
excessive I know.
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
This inforamation can also be added using the <code>odbcinst</code> tool,
But this way seems easier to me. Read more about these files in
the unixODBC documentation
<a href="http://www.unixodbc.org/odbcinst.html">here</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
ODBC will also look in <code>/usr/local/etc/odbc.ini</code> for DSNs, but
these will be available to all users. So we're putting them in
the local user file it checks, <code>~/.odbc.ini</code>.
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7">7</a></sup> <div class="footpara"><p class="footpara">
Data Source Name - just so you know.
</p></div></div>

<div class="footdef"><sup><a id="fn.8" class="footnum" href="#fnr.8">8</a></sup> <div class="footpara"><p class="footpara">
The connection information used here can include the database,
but we've pushed that part down to the DSN defined above. It must
always include the <code>username</code> and <code>passwd</code> from what I've seen
through experimentation.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2016-01-06-vim-mac-mssql-client.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Backing up your Homebrew packages]]></title>
  <description><![CDATA[
<p>
/Update: while this is a good template to do a quick backup, a more
flexible solution exists in the
<a href="https://github.com/Homebrew/homebrew-bundle">Brew Bundle</a> project.
Thanks [@MacHomebrew](<a href="https://github.com/Homebrew/homebrew-bundle">https://github.com/Homebrew/homebrew-bundle</a>) for
the pointer!/
</p>

<p>
It's a good idea to keep track of what packages you've got installed in
Homebrew - good for provisioning a new Mac, good for recovering from a
disaster.
</p>

<p>
To get a list of the current packages is as simple as
</p>

<div class="org-src-container">
<pre class="src src-sh">brew ls
</pre>
</div>

<p>
but that gives us everything, dependencies and all. If we just want what
we explicitly installed, we should go for
</p>

<div class="org-src-container">
<pre class="src src-sh">brew leaves
</pre>
</div>

<p>
like the leaves of our dependency tree.
</p>

<p>
Just pipe that out into a file
</p>

<div class="org-src-container">
<pre class="src src-sh">brew leaves &gt; homebrew-packages.txt
</pre>
</div>

<p>
for safekeeping and get it under version control along with the rest of
you configuration files.
</p>

<p>
When it comes to recovery, we can save time and effort by using <code>xargs</code>
to pipe out each of the lines as an argument to <code>brew install</code>
</p>

<div class="org-src-container">
<pre class="src src-sh">cat homebrew-packages.txt | xargs brew install
</pre>
</div>

<p>
and everything will (re)install in one go. It may take some time.
</p>

<p>
Maybe you want to add to the list from one machine without overwriting
the current list? I just did (for one reason or another), and it's
fairly easy to handle. Instead of overwriting the text file, append to
the end of it
</p>

<div class="org-src-container">
<pre class="src src-sh">brew leaves &gt;&gt; homebrew-packages.txt
</pre>
</div>

<p>
Now you might have some repetitions in that file - get rid of them with
</p>

<div class="org-src-container">
<pre class="src src-sh">sort homebrew-packages.txt | uniq
</pre>
</div>

<p>
This sorts the original list into order, then removes any lines that are
repetitions of the one before, leaving only one. Pipe that out to a new
file
</p>

<div class="org-src-container">
<pre class="src src-sh">sort homebrew-packages.txt | uniq &gt; homebrew-packages-reconciled.txt
</pre>
</div>

<p>
and overwrite the old one if you need to (just don't do it in the pipe -
it doesn't like it and the file becomes blank. Boo.)
</p>

<p>
Did I mention that
<a href="file:///posts/2015/10/7/text-processing-with-ruby-by-rob-miller/">Text
Processing with Ruby</a> was an amazing book? I worked out how to do the
above from what I read in the section on Unix tools. Nice.
</p>
<div class="taglist"></div>]]></description>
  <link>/2015-10-16-homebrew-backup.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Text Processing with Ruby by Rob Miller]]></title>
  <description><![CDATA[
<p>
Plain text is at the root of everything we can do as developers - we
read it, we manipulate it, we write it back out as logs or files or
HTML. We write it as code to do all that, and at the end of the day we
use it to write blog posts like this. Rob Miller's
<a href="https://robm.me.uk/text-processing-with-ruby/"><i>Text Processing with
Ruby</i></a> shows you how to do it as quickly, and elegantly, as possible.
</p>

<p>
A standout feature is the book's use of command line tools. While there
are obviously ways to count the number of lines in a file in Ruby, none
are going to be as quick and as easy as <code>cat file.txt | wc -l</code>.<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
The book breaks down and blurs the edges between shell tools, Ruby
scripts and larger, more organised code in a really beautiful way.
</p>

<p>
We're shown tools like <code>cat</code>, <code>grep</code> and <code>cut</code>, and how to interoperate
them with Ruby code written straight into the command line. And as this
builds up we're then shown how to handle standard input and output
inside Ruby programs, allowing us to create our own command line tools
that will play nicely as a part of a pipeline with the rest of the Unix
tool chain.
</p>

<p>
For me this stuff is worth reading the book alone. Leveraging forty
years worth of text tools along side your Ruby code gets more done and
faster. The part of the book that demonstrates how to pipe out of a
process into <code>less</code> to generate paging output was one of the most
amazing things I've seen done in Ruby to date
</p>

<p>
Regular expressions are covered in greater depth than I have seen in
other Ruby books, and with a strong emphasis on their real-world
application. By the time I'd finished these sections I felt like a real
regex ninja.
</p>

<p>
The book also shows how to use Ruby's system variables (the ones
starting with <code>$</code>) to keep regex and other code short. Some people (OK,
my friend Andrea) dislike using anything starting with a <code>$</code> in their
code, and I can see their point as it can look a little esoteric and
obscure. But it felt right to me in the context of this book; maybe
you'd not want to use the system variables in larger, more modular
software, but they're perfect for the short, command line scripts often
used to process text.
</p>

<p>
We're also given a fun tour of parts of Ruby I've not seen - ERB
templating (outside of a web framework), SimpleDelegator - and a few
deep dives on popular text parsing and processing libraries such as the
ever-present Nokogiri and StringScanner. Natural language processing and
fuzzy matching using Phrasie and Text are shown off too.
</p>

<p>
I've found <a href="https://robm.me.uk/text-processing-with-ruby/"><i>Text
Processing with Ruby</i></a> a great exploration of working with text both
inside and outside of Ruby. Reading it has extended my knowledge of Ruby
significantly, while giving me a wealth of new techniques and tools to
use to manipulate text.
</p>

<p>
And that may be the biggest selling point of this book: I can apply it
<i>right away</i> - I am literally using the things I've learned at work
today. Perfect for the beginner to intermediate Rubyist, or any
programmer who wants some standout techniques for handling text whatever
language they're using.
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
The author gave an interesting example of the power available in
command line tools when I saw him speak at
<a href="http://brightonruby.com/">Brighton Ruby</a>, comparing the
processing speed of Hadoop against a laptop's UNIX tool chain
using small (~2GB) data sets. You can read more about this
comparison on
<a href="http://aadrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html">Adam
Drake's blog</a>.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2015-10-07-text-processing-with-ruby-review.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Clojure Dojo]]></title>
  <description><![CDATA[
<p>
I've just got back from
<a href="http://www.londonclojurians.org/dojos.html">Clojure Dojo</a> over at the
<a href="www.thoughtworks.com">Thoughtworks</a> offices in Soho. The Clojure
Dojos have been run by the <a href="www.londonclojurians.html">London
Clojurians</a> for about five years now and are still going strong. I've
been meaning to go to one for a while, and tonight the stars were right.
</p>

<p>
What's a Clojure Dojo? Developers gather in a room full of pizza<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>
with computers and chat about which editors they use.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup> Then someone
very sensibly says we should probably start.
</p>

<p>
First we introduce ourselves, tell everyone how much we know about
Clojure and what the first language we learned was.<sup><a id="fnr.3" class="footref" href="#fn.3">3</a></sup> There were a
good mix of people in tonight, a few who had been doing Clojure for
years, many for months, and a few like me who have been dabbling their
toes in the water for a while. I was heartened to see a Maker there who
had graduated on Friday - that takes some guts and enthusiasm.
</p>

<p>
Then we pitch ideas to hack on for the evening. They were all great
ideas, from Conway's Game of Life to Google Maps plugins that show
extinct species. The winner was a Twitter Markov Generator - an awesome
idea that generates new tweets based upon a history of tweets, picking
the next word based upon the likely hood that it follows from the
previous word in the history.
</p>

<p>
We were split into random groups of 3-4 and - just got on with it. After
about two hours the teams gathered together once more to show off their
(completely unfinished) products. Then we all went home.
</p>

<p>
The subject sounded fairly dry to me, but it turned out to be plenty to
get my teeth stuck in to - I'd almost recommend it as a kata. I was
working with three other devs - Fabio, who'd been working on Clojure for
about a year and had the most wicked Emacs/Cider<sup><a id="fnr.4" class="footref" href="#fn.4">4</a></sup> set up that was a
joy to watch him code with. There was also Francis who had been looking
at Clojure 'for about two weeks', but had a Lisp background that just
shone through. And happily we also had
<a href="https://twitter.com/ctford">Chris</a>, the convener of the Dojo who had
been working in Clojure for four years or so. He helped a lot, and was
great to chat with about practices, concepts and the style of Clojure.
</p>

<p>
I learned a lot in a short space of time, refreshing my brief exposure
to the language quite quickly.<sup><a id="fnr.5" class="footref" href="#fn.5">5</a></sup> But the best bit was when we
planned the data structure. Initially we were looking at nested hash-map
arrangement, with the inner map indicating the percentage chance of each
next word - something like:
</p>

<div class="org-src-container">
<pre class="src src-clojure">{ <span style="color: #666666;">"Word"</span> { <span style="color: #666666;">"nextWord1"</span> 1, <span style="color: #666666;">"nextWord2"</span> 10, <span style="color: #666666;">"nextWord3"</span> 79} }
</pre>
</div>

<p>
But then Francis suggested that we just hold a list of a hundred words
that represented the probability distribution:
</p>

<div class="org-src-container">
<pre class="src src-clojure">{ <span style="color: #666666;">"Word"</span> [<span style="color: #666666;">"nextWord1"</span>
          <span style="color: #666666;">"nextWord2"</span> <span style="color: #d9d9d9;">;; </span><span style="color: #7f7f7f;">ten times</span>
          <span style="color: #666666;">"nextWord3"</span>] <span style="color: #d9d9d9;">;; </span><span style="color: #7f7f7f;">eighty odd times</span>
}
</pre>
</div>

<p>
To which I responded that we may as well just collect up all of the next
words and randomly sample from it. I thought this would make everyone go
'oh, but that'd be too long' but, no, everyone liked it. So massive,
massive vectors it was.
</p>

<p>
My next favourite moment was when I wondered whether we'd be slowly
feeding the tweets in one by one to a function to build the hash-map.
No, Fabio (I think) said - we'll just combine them into one giant string
and feed it in.
</p>

<p>
One. Giant string. Of all the tweets. Mind blown. Not quite big data,
but I loved the epic processing powers it felt like we were harnessing -
lightning of the gods and all that good stuff.
</p>

<p>
I discovered is all my practice in functional languages over the last
few months means that I can put together a recursive function pretty
quickly and accurately. Unfortunately I also discovered I can't come up
with a decent name when typing - and I also found out that there's
little appetite for a refactor in a Dojo. That function's name is my
eternal shame.<sup><a id="fnr.6" class="footref" href="#fn.6">6</a></sup>
</p>

<p>
We had something fairly decent by the end of the Dojo. More exiciting
was seeing what the other teams had produced. One team had made this
glorious and terse looking almost one liner (and it really could have
done with being put on a few more lines) that seemed to have more
functionality than I could believe. Another team practiced their
TDD<sup><a id="fnr.7" class="footref" href="#fn.7">7</a></sup> and also created and elegant 'word shifting' move that
provided the word-nextWord pairs without any recursion. And the final
team wrote no code per se, but spent a productive few hours setting up a
Clojure project and investigating the useful libraries that could help
in the project.
</p>

<p>
I feel that I could see more of what the fuss about Clojure was about.
Each team had thought about the nature of the data they were going to
create and work on, linking it to the functions they were using to
translate the input into the output. The beauty came in the diverse
implementations, both in data and functions, and just how terse yet
expressive both were. It's left me wanting more.
</p>

<p>
A friendly atmosphere, enthusiastic programmers, a great language and
problem to play with - and did I mention the pizza? I'm already looking
forward to the next one.
</p>

<p>
Many, many thanks to <a href="https://twitter.com/ctford">Chris Ford</a> for
organising and Thoughtworks for hosting!
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
This is a widely used pattern that has proven highly performant
in all languages&#x2026; üòâ
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Developer smalltalk equivalent of 'how did you travel here?'
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3">3</a></sup> <div class="footpara"><p class="footpara">
One ML and one Turbo Pascal. Nice.
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4">4</a></sup> <div class="footpara"><p class="footpara">
I've also started to use Emacs - see the next footnote.
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5">5</a></sup> <div class="footpara"><p class="footpara">
I've been doing a lot of Lisp recently, which I'll get to
blogging about soon enough.
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6">6</a></sup> <div class="footpara"><p class="footpara">
<code>reduce-sum</code> - seriously? It wasn't even summing anything üò¢üêº
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7">7</a></sup> <div class="footpara"><p class="footpara">
I'm not even going to get into whether we should have been TDDing
or whether the repl can cover some of those requirements. I'll
call it a massive spike for now and move on to TDDing it when I
do it again.
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2015-08-25-clojure-dojo.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[How to code (almost) everywhere]]></title>
  <description><![CDATA[
<p>
'Always be coding' was a piece of advice I was given early on when I was
learning to be a developer, but it struck me today how incredibly easy
it can be. The trick is to treat your computer like a newspaper or a
novel. And the way to achieve this is to reduce the barriers (both
mental and physical) that prevent you from writing.
</p>

<p>
With the requirements for a development environment being just a
laptop - internet connection optional - you can start to hack on a
problem anwhere you have access to a lap (preferably your own). That's
anywhere you can sit down.
</p>

<p>
The only other physical limiting factor is how fast you can take out and
put away your laptop. Reducing the friction involved in starting (and
stopping) coding not only increases the time you have to dedicate to it,
it opens up new places you can code, and allows you to form interesting
new habits. Essentially you will become able to code in quick, short
bursts when that becomes possible.
</p>

<p>
I use a
<a href="http://www.amazon.co.uk/13-13-3-Notebook-Computer-MacBook-Briefcase/dp/B00GQT54GO">simple
soft case by Plemo</a> which has a pair of integrated carry handles. I
usually stash the case and Mac in my backpack, but the handles help me
carry it on its own for quick access if I know I'm going to be stopping
and starting a lot - say when changing trains on a commute. The Mac
wakes up from sleep in about 2-3 seconds.
</p>

<p>
This all means that I can dip in and out of coding with the ease of
reading a newspaper when travelling, when waiting for someone, when
grabbing lunch - it's easy to pick up and put away in a matter of
seconds. This means you can now code in shorter bursts - think of them
as 'microsessions'.
</p>

<p>
A side benefit of this is that you will spend (even) more time thinking
about code when away from the keyboard. The gaps between each will be
filled with thoughts about what you just did and what you will do next.
It encourages an increased refection on your practice as a result of the
natural pauses and interruptions that occur in life, and not the
artificial ones that are generated by techniques like
<a href="http://pomodorotechnique.com/">Pommodoro</a>.
</p>

<p>
Try taking your laptop everywhere for a week and see what the shortest
viable time to do something useful on it is. I've managed to get
something worthwhile done between two stops on the tube.
</p>

<p>
(And if you can't sit down you can always
<a href="file:///posts/2015/5/18/clojure-on-the-tube/">do some Clojure on your
phone</a>).
</p>
<div class="taglist"></div>]]></description>
  <link>/2015-06-17-code-everywhere.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Clojure on the Tube]]></title>
  <description><![CDATA[
<p>
Thought I should share this, as it surprised me. I solved one of the
<a href="http://www.4clojure.com/">4Clojure</a> problems on the London
Underground today while commuting home, using my smart phone.
</p>

<p>
I didn't think it would be possible to write anything useful on such a
small device, but with a bit of persistance I was not only able to write
some Clojure, I was also able to run it inside a REPL to see what I was
doing wrong and iterate on my solution.
</p>

<p>
If you've got an Android phone the REPL I used was
<a href="https://play.google.com/store/apps/details?id=com.sattvik.clojure_repl">Clojure
REPL</a> and the local instance of the 4Clojure problems were held on the
<a href="https://play.google.com/store/apps/details?id=org.bytopia.foreclojure">4Clojure
app</a>. Both apps are pretty nifty. The only thing that slowed me down
was trying to type all those parens on the native keyboard.
</p>

<p>
4Clojure is good resource of problems to help learn Clojure; I've been
getting rusty recently as my main focus has been JavaScript. And
planning my wedding.
</p>

<p>
For the record, this is the function I wrote:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(<span style="color: #333333; font-weight: bold;">fn</span> <span style="color: #333333; font-weight: bold;">flatn</span> [lst]
  (<span style="color: #333333; font-weight: bold;">if</span> (coll? lst)
    (apply concat (map flatn lst))
    [lst]))
</pre>
</div>

<p>
Note that this was done at the north end of the Victoria line, near
Finsbury Park. I don't think I'd have managed it on the Northern line in
the City&#x2026;
</p>
<div class="taglist"></div>]]></description>
  <link>/2015-05-18-clojure-tube.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Logging with =tail -f=]]></title>
  <description><![CDATA[
<p>
Debugging a series of microservices locally can be a pain. You need to
see all of the logs for each service, live, and hopefully all in one
place to save you time trying to work out what's going on at the same
time.
</p>

<p>
You could run each service in a separate terminal, but that doesn't help
manage reading the logs at once and doesn't scale well. Alternatively
the services can be run in the background and we could send their output
to the same terminal. But that is going to look messy - how will we know
which service is logging?
</p>

<p>
So let's send STDERR and STDOUT to a couple of files - we can do this in
whatever we use to launch the services, but in bash it looks something
like this:
</p>

<div class="org-src-container">
<pre class="src src-sh">run_service &gt; service_name.log 2&gt; service_name.err &amp;
</pre>
</div>

<p>
Now we've got a lot of files, slowly filling with logs. But we're
definitely not reading them all at once. Enter the hero of the piece,
<code>tail -f</code>. <code>tail</code> is a nice little Unix command that has the standard
behaviour of reading the last 10 line of a file. Handy now and then, but
no big deal. <code>tail -f</code>, though, is a superhero. It "causes tail to not
stop when end of file is reached, but rather to wait for additional data
to be appended to the input" (I'm quoting straight from the <code>man</code> page).
</p>

<p>
What that means is that <code>tail</code> waits for more lines to be added to the
file, and prints them when they are. Live logs are back - but only for
one file. But <code>tail</code> has another neat feature: reading from multiple
files. Just put them all in as arguments or splat them with a <code>*</code> like
<code>tail -f *.log *.err</code>.
</p>

<p>
Which has this lovely looking output:
</p>

<div class="org-src-container">
<pre class="src src-sh">==&gt; service_one.err &lt;==
Here are some errors from service_one

==&gt; service_one.log &lt;==
And here are some logs from service_one

==&gt; service_two.err &lt;==
With the same deal...

==&gt; service_two.log &lt;==
... for service_two
</pre>
</div>

<p>
And just carries on outputting as your services run, letting you keep an
eye on all of them at once while you get back to work.
</p>
<div class="taglist"></div>]]></description>
  <link>/2015-04-10-tail-f-logs.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[(Basic) Lazy Evaluation and Memoization in JavaScript]]></title>
  <description><![CDATA[
<p>
Calculation takes time and effort. If I needed to know what, say
</p>

<pre class="example">
4719340 + 397394
</pre>

<p>
was (and I didn't have a calculator), it would take a few minutes to
work out. Right now, I don't need to know. Maybe I'll never need to
know. I could put those two numbers and the <code>+</code> sign on a piece of paper
and stick it in my pocket.
</p>


<figure>
<img src="file:///images/sum.png" alt="sum.png">

<figcaption><span class="figure-number">Figure 1: </span>4719340 + 397394</figcaption>
</figure>

<p>
If I ever wanted to know the answer, I could get the paper out and do
the maths. I should write 'Answer to silly blog sum' on the top of the
paper.
</p>


<figure>
<img src="file:///images/sum-with-title.png" alt="sum-with-title.png">

<figcaption><span class="figure-number">Figure 2: </span>4719340 + 397394 with title</figcaption>
</figure>

<p>
Now I know what the sum is there for. And why I'm carrying a piece of
paper around.
</p>

<p>
That's lazy evaluation - holding on to an expression and only evaluating
it when you need it. It pairs neatly with <b>memoization</b> - keeping the
results of evaluated expressions in memory so that you don't have to
evaluate them every time you need their result.
</p>

<p>
(Which figures as, if I ever do work out what <code>4719340 + 397394</code> is, I
never want to work it out again. Ever.)
</p>

<p>
Let's take a look at doing some lazy evaluation in JavaScript - in other
languages, such as Clojure, we get <a href="http://clojure.org/sequences">a lot
of this baked in</a>, but in JavaScript there's some work to do. Let's
take a simple function:
</p>

<pre class="example">
function add (a, b) {
  return a + b;
}
</pre>

<p>
And we'd like to make that function lazy - with another function,
naturally. Something like:
</p>

<pre class="example">
var addThisLater = lazyEval( add, 4, 5 );

addThisLater() //=&gt; 9
</pre>

<p>
<code>lazyEval()</code> takes a function name, some more arguments, and returns a
function that, when it evaluates, returns the result of evaluating the
passed in function with the other arguments.
</p>

<p>
So far so good - but what needs to be returned from <code>lazyEval()</code> to make
it work as described above? As it turns out, not that much:
</p>

<pre class="example">
function lazyEval (fn) {
  return fn.bind.apply(fn, arguments);
}
</pre>

<p>
And this is where things get exciting. We've
<a href="file:///posts/2015/2/19/%28not-quite%29-currying-in-javascript/">seen
<code>bind()</code> before</a>, so let's take a look at <code>apply()</code>, what happens when
we chain it with <code>bind()</code>, and what's happening with <code>arguments</code>
keyword.
</p>

<div id="outline-container-org9083632" class="outline-2">
<h2 id="apply"><code>apply()</code></h2>
<div class="outline-text-2" id="text-apply">
<p>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply()</code></a>
is pretty simple - it's a method that all functions have. It takes two
arguments. When its evaluated it returns the result of evaluating the
function within the scope of the first argument (just like <code>bind()</code>).
The second argument is an array (or an array-like object - that's
important) of arguments for the function to be evaluated with. Which all
sounds scary, but if I do this:
</p>

<pre class="example">
add.apply(this, [ 1, 2 ]) //=&gt; 3
</pre>

<p>
I hope that begins to makes more sense. Now let's take a closer look at
<code>arguments</code>.
</p>
</div>
</div>

<div id="outline-container-org4c78a3f" class="outline-2">
<h2 id="arguments-and-argument-binding"><code>arguments</code> and Argument Binding</h2>
<div class="outline-text-2" id="text-arguments-and-argument-binding">
<p>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments"><code>arguments</code></a>
is an array-like object (it lacks a number of methods that arrays have)
which contains, unsurprisingly, all of the arguments passed to the
current function you're in the scope of - even ones not bound to a
variable.
</p>

<p>
JavaScript functions, unlike some other languages, can take as many
parameters as you like. Which means that this:
</p>

<pre class="example">
add(1, 2) //=&gt; 3
</pre>

<p>
works just like this:
</p>

<pre class="example">
add(1, 2, 'peace', ['love'], { and: 'understanding' }) //=&gt; 3
</pre>

<p>
<code>add()</code> binds its first two arguments to <code>a</code> and <code>b</code>. Those extra
arguments get ignored - <code>add()</code> just goes on adding as usual. But that
does not mean that those arguments go nowhere. They're still available
to the function in the <code>arguments</code> array array-like object.
</p>

<p>
Look, try this:
</p>

<pre class="example">
function echo () {
  return arguments
}

echo(1) //=&gt; { 0: 1 }

echo('peace', ['love'], { and: 'understanding' })
//=&gt; { '0': 'peace','1': [ 'love' ], '2': { and: 'understanding' } }

echo('faith', 'hope', 'charity')[2] //=&gt; 'charity'
</pre>

<p>
OK, back on track. When <code>apply(fn, arguments)</code> is evaluated, it is
passing the arguments <code>fn, 4, 5</code> along to the function that <code>apply()</code> is
being called on. Namely, in this case, <code>bind()</code>.
</p>

<p>
(As a comparison, if <code>apply()</code> was replaced by its close cousin,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call()</code></a>,
which takes more traditional looking arguments, it would look like this:
<code>bind.call(fn, fn, 4, 5)</code>)
</p>

<p>
<code>fn, 4, 5</code> gets passed along to <code>bind()</code>, where <code>fn</code> becomes the <code>this</code>
argument for <code>bind()</code>, providing the scope, and the <code>4, 5</code> get bound as
the arguments of the function that <code>bind()</code> is being called on (in our
examples, <code>add()</code>). And so we get the <code>add()</code> function back, but with
all its arguments already bound, ready to be evaluated with a flick of
our <code>()</code>.
</p>
</div>
</div>

<div id="outline-container-org5c47217" class="outline-2">
<h2 id="memoization">Memoization</h2>
<div class="outline-text-2" id="text-memoization">
<p>
All of which is great, but what's the point if you have to evaluate the
function every time it's called? Wouldn't it be better if the function
'remembered' the result, and returned the remembered result the second
time it was called rather than evaluating it all over again? Or, to
continue the increasingly strained example, I should write the answer
down on my piece of paper once I've worked it out the first time, rather
than having to do the sum every time I need to know the answer.
</p>

<p>
And that's <a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>, a
way of optimizing code so that it will return cached results for the
same inputs. This might get a little more complicated with functions
that have more than one input, but for our little <code>lazyEval</code> function
it's not all that hard (there's no arguments at all!):
</p>

<pre class="example">
function lazyEvalMemo (fn) {
  var args = arguments;
  var result;
  var lazyEval = fn.bind.apply(fn, args);
  return function () {
    if (result) {
      console.log("I remember this one!");
      return result
    }
    console.log("Let me work this out for the first time...");
    result = lazyEval()
    return result;
  }
}
</pre>

<p>
Let's give it a function - a <code>sum</code> that does a little reporting for
us&#x2026;
</p>

<pre class="example">
function sum (a, b) {
  console.log("I'm calculating!");
  return a + b;
}
</pre>

<p>
And let it rip!
</p>

<pre class="example">
var lazyMemoSum = lazyEvalMemo(sum, 4719340, 397394)

lazyMemoSum()
//=&gt; Let me work this out for the first time...
//=&gt; I'm calculating!
//=&gt; 5116734

lazyMemoSum()
//=&gt; I remember this one!
//=&gt; 5116734
</pre>

<p>
It does the calculation the first time, and every subsequent call uses
the memoized result.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2015-03-21-lazy-eval-and-memo.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[(not quite) Currying in JavaScript]]></title>
  <description><![CDATA[
<p>
Currying, yet another <i>I've heard the cool kids saying that</i> word.
Acually, having done some reading, it turns out the cool kids may be
misusing it, but we'll get to that part later. Let's just spend a minute
looking at the wonder of <code>.bind()</code>.
</p>

<p>
Here's a function:
</p>

<pre class="example">
function addition(a, b) {
    return a + b
}

addition(1, 2) //=&gt; 3
</pre>

<p>
Let's say we always wanted to be adding twenty-two - we could make
ourselves a shiny new function, or we could build on the way <code>addition</code>
works using <code>.bind()</code>
</p>

<pre class="example">
var addTwentyTwo = addition.bind(this, 22)
addTwentyTwo(1) //=&gt; 23
</pre>

<p>
<code>bind()</code>, as you'll see in the
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">MDN
docs</a>, is a method you can call on a function in JavaScript. It creates
a new function based on the old one, with the <code>this</code> keyword of the new
function set to the first argument to <code>bind()</code>, and other arguments
given being set to the arguments of the original function. Confusing,
right? Well, it's probably best to ignore the first arpument, the <code>this</code>
reassignment for now, unless there's a pressing need to change it, and
focus on the rest. Here, let's do it again:
</p>

<pre class="example">
var twentyFive = addTwentyTwo.bind(this, 3)
twentyFive() //=&gt; 25
</pre>

<p>
When we use <code>.bind()</code> we can change the <i>arity</i> (number of ardguments)
of the function returned, setting the values of any of all of the
arguments in the original function:
</p>

<pre class="example">
var twoHundred = addition.bind(this, 50, 150)
twoHundred() //=&gt; 200
</pre>

<p>
What bind allows us to do is <i>partial application</i>, fixing values of a
function and returning one of smaller arity:
</p>

<pre class="example">
function addTheseFourUp(a, b, c, d) {
    return a + b + c + d
}

var addTwoAndTheseThreeUp = addTheseFourUp(this, 2)

addTwoAndTheseThreeUp(1, 2, 3) //=&gt; 8
</pre>

<p>
This is technically not <i>currying</i>, which
<a href="https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application">should
only return functions with an arity of 1</a>. Currying <code>addTheseFourUp</code>
would look something like this:
</p>

<pre class="example">
function curriedFour(a) {
    return function(b) {
        return function(c) {
            return function (d) {
                return a + b + c + d
            }
        }
    }
}

curriedFour(1)(2)(3)(4) //=&gt; 10
</pre>

<p>
Which we could also play around with like this&#x2026;
</p>

<pre class="example">
function applyFourTimes(fun) {
    return function(num) {
        return fun(fun(fun(fun(num))))
    }
}

function double(num) {
    return num + num
}

applyFourTimes(double)(3) //=&gt; 48
</pre>

<div id="outline-container-org565072e" class="outline-2">
<h2 id="postscript">Postscript</h2>
<div class="outline-text-2" id="text-postscript">
<p>
Not only is partial function application not currying - but currying
should probably be called <i>Sch√∂nfinkelization</i> after its true
originator,
<a href="https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel">Moses
Sch√∂nfinkel</a>, to whom
<a href="https://en.wikipedia.org/wiki/Haskell_Curry">Haskell Curry</a>
attributed the concept. That said, W. V. O. Quine points out that the
idea had already been hit upon by
<a href="https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel#Work">Frege</a>.
</p>

<p>
From JavaScript to philosophy in but a few skips&#x2026;
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2015-02-19-not-quite-js-currying.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Arrays in JavaScript]]></title>
  <description><![CDATA[
<p>
Arrays are easy, right? Pretty basic go-to data structure. Pretty
primative. So if we did something like this - we wouldn't be messing
with the array would we?
</p>

<pre class="example">
array = ["tom", "alan", "harry"]
array.suprise = "dave"
</pre>

<p>
surely not?
</p>

<pre class="example">
for (index in array) { console.log(index) }

//=&gt; 0
//=&gt; 1
//=&gt; 2
//=&gt; surprise

console.log(array)
//=&gt; ["tom", "alan", "harry", suprise: "dave"]
</pre>

<p>
Which might just be a good reason not to use <code>for... in</code>, or trusting it
to put things as strings in a sensible way, but is a good demonstration
of&#x2026;
</p>

<pre class="example">
typeof bob
//=&gt; "object"
</pre>

<p>
Because everything is an object in JS, the interface for arrays is kinda
hacked together out of object properties. Arrays are built on top of
objects, they are not a simpler data-type, and objects in JS are just
<b>collections of strings that point at things</b>.
</p>

<p>
(and there aren't just arrays to consider - when there's the world of
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects">Array-like
objects</a> to look at. But more on that another time.)
</p>
<div class="taglist"></div>]]></description>
  <link>/2015-02-14-javascript-arrays.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Hoisting in JavaScript]]></title>
  <description><![CDATA[
<p>
Working at <a href="http://www.mergermarket.com/info/">Mergermarket</a> is fun.
Not only am I getting to grips with a new language,
<a href="http://groovy.codehaus.org/">Groovy</a>, in a nice, agile environment,
on a project that's challenging but to which I can make some small and
increasing contributions to. Not only that, but I'm also working with
some damn clever and patient people who are happy to explain things to
me as we go along.
</p>

<p>
So my next thsee posts will be about some of what I've learned about
JavaScript in the last month with Mat, Mike, Danielle, Nick and many
others.
</p>

<p>
###Hoisting At the top of my list of "words I'd heard associated with JS
but didn't have the foggiest", <i>hoisting</i> or, more transparently,
variable hoisting. Behold the following:
</p>

<pre class="example">
function printThis(showLog) {

    if(showLog === true){
        var logMessage = 'MESSAGE!';
        console.log(logMessage);
    }

    console.log(logMessage);
}
</pre>

<p>
Which you may be inclined to think would return two outputs to the
console when called with <code>printThis(true)</code>, one of <code>MESSAGE!</code> and then
the ubiquitous JS <code>undefined</code>. Because <code>logMessage</code> isn't defined at the
second <code>console.log()</code>.
</p>

<p>
Does it?
</p>

<pre class="example">
MESSAGE!
MESSAGE!
</pre>

<p>
Because the interpreter looks at the code and does this to it:
</p>

<pre class="example">
function a(showLog) {

    var logMessage;

    if(showLog === true){
        logMessage = 'MESSAGE!';
        console.log(logMessage);
    }

    console.log(logMessage);
}
</pre>

<p>
The variable is 'hoisted' out of its declaration in the block and
created at the top of the function. The assignment still takes place in
the same place, but because the scope of <code>logMessage</code> is the entire
function, the variable is still available at the last <code>console.log</code>.
This is because (motto alert) <b>JS has function-level scope, not
block-level scope</b>. The interpreter just ignores those little <code>{</code> and
<code>}</code> unless they're backed up with a function declaration.
</p>
<div class="taglist"></div>]]></description>
  <link>/2015-02-01-hoisting-js.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Evaluating Ruby in Vim]]></title>
  <description><![CDATA[
<p>
I was watching <a href="https://twitter.com/avdi">Avdi Grimm</a>'s
<a href="http://www.rubytapas.com/">Ruby Tapas</a> videos - well, trying to watch
them. I got stuck when I saw him do something in Vim Emacs that I'd not
seen before. Something magical.
</p>

<p>
On screen he had an expression - something like this:
</p>

<div class="org-src-container">
<pre class="src src-ruby">p = <span style="color: #333333; font-weight: bold; font-style: italic;">Point</span>.new(2,3)
</pre>
</div>

<p>
In one keypress it became:
</p>

<div class="org-src-container">
<pre class="src src-ruby">p = <span style="color: #333333; font-weight: bold; font-style: italic;">Point</span>.new(2,3) <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt;</span>
</pre>
</div>

<p>
And then quick as a flash:
</p>

<div class="org-src-container">
<pre class="src src-ruby">p = <span style="color: #333333; font-weight: bold; font-style: italic;">Point</span>.new(3,5) <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; #&lt;Point:0x000000038862d0 @x=3 @y=5&gt;</span>
</pre>
</div>

<p>
I immediately stopped paying attention to the
<a href="http://www.rubytapas.com/episodes/7-Constructors?filter=free">excellent
video about constructors</a> and started to look up what was going on. So
here we go down the Vim rabbit hole again&#x2026;
</p>

<p>
The magic is performed by either
<a href="http://rubygems.org/gems/rcodetools">rcodetools</a>' xmpfilter tool or
<a href="https://github.com/JoshCheek/seeing_is_believing">seeing<sub>is</sub><sub>believing</sub></a>,
hooked up to Vim via
<a href="https://github.com/t9md/vim-ruby-xmpfilter">vim-ruby-xmpfilter</a>,
(which works for both) or
<a href="https://github.com/hwartig/vim-seeing-is-believing">vim-seeing-is-believing</a>.
Take your pick as I can't really see the difference at the moment.
</p>

<p>
I've got xmpfilter set up with the following in my <code>.vimrc</code>
</p>

<pre class="example">
autocmd FileType ruby nmap &lt;buffer&gt; &lt;F4&gt; &lt;Plug&gt;(xmpfilter-mark)
autocmd FileType ruby xmap &lt;buffer&gt; &lt;F4&gt; &lt;Plug&gt;(xmpfilter-mark)
autocmd FileType ruby imap &lt;buffer&gt; &lt;F4&gt; &lt;Plug&gt;(xmpfilter-mark)

autocmd FileType ruby nmap &lt;buffer&gt; &lt;F5&gt; &lt;Plug&gt;(xmpfilter-run)
autocmd FileType ruby xmap &lt;buffer&gt; &lt;F5&gt; &lt;Plug&gt;(xmpfilter-run)
autocmd FileType ruby imap &lt;buffer&gt; &lt;F5&gt; &lt;Plug&gt;(xmpfilter-run)
</pre>

<p>
Now you too can evaluate Ruby code on the fly in Vim. And I can get back
to watching more of Avdi.
</p>
<div class="taglist"></div>]]></description>
  <link>/2015-01-01-Ruby-Eval-in-Vim.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Three Ways with Clojure]]></title>
  <description><![CDATA[
<p>
I've been working with <a href="http://clojure.org/">Clojure</a> in the last few
days, both looking at the <a href="http://clojurekoans.com/">Clojure Koans</a>
and another resource I've discovered
<a href="http://www.4clojure.com/">4clojure.com</a>. I'd like to share a nice
problem I saw there, and some of the solutions to it which I think
expose some of the things I'm beginning to appreciate about the
language.
</p>

<div id="outline-container-org8d5e3ad" class="outline-2">
<h2 id="the-problem">The Problem</h2>
<div class="outline-text-2" id="text-the-problem">
<p>
as stated on
<a href="http://www.4clojure.com/problem/21#prob-title">4clojure</a>.
</p>

<blockquote>
<p>
Write a function which returns the Nth element from a sequence.
(Without using <code>nth</code>)
</p>
</blockquote>

<p>
<code>nth</code> is the obvious answer to the problem, as it returns the nth
element in a sequence:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(= 2 (nth 1 '(1 2 3 4)))
</pre>
</div>

<p>
We need to get to a function that will do the same, something that will
fit in the blank space below:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(= (___ '(4 5 6 7) 2) 6)
</pre>
</div>
</div>
</div>

<div id="outline-container-orge8a8ff2" class="outline-2">
<h2 id="solution-1-recurring">Solution 1: recurring</h2>
<div class="outline-text-2" id="text-solution-1-recurring">
<div class="org-src-container">
<pre class="src src-clojure">(<span style="color: #333333; font-weight: bold;">fn</span> <span style="color: #333333; font-weight: bold;">my_nth</span> [seqn n] (<span style="color: #333333; font-weight: bold;">if</span>
    (zero? n)
    (first seqn)
    (my-nth (rest seqn) (dec n))))
</pre>
</div>

<p>
Here we use recurrance, setting the breaking point as the iteration
where <code>n</code> is zero using <code>if</code>, at which point the function returns the
<code>first</code> value of the sequence. If it's not, we fire the function again,
but this time chopping off the first member of the sequence
(<code>(rest seqn)</code> returns the rest) and <code>dec=rementing the value of =n</code> by
one. We walk through the sequence, losing items from the front of the
sequence <code>n</code> times, until we get to the index.
</p>

<p>
We've named the function <code>my_nth</code>, but we could easily anonymize it:
</p>

<div class="org-src-container">
<pre class="src src-clojure">(<span style="color: #333333; font-weight: bold;">fn</span> [seqn n] (<span style="color: #333333; font-weight: bold;">if</span>
    (zero? n)
    (first seqn)
    (<span style="color: #333333; font-weight: bold;">recur</span> (rest seqn) (dec n))))
</pre>
</div>

<p>
<code>recur</code> is neat - it executes the expressions that follow it, then
rebinds the values hey produce to the bindings of the recursion point,
in this case the <code>fn</code> method. We then get moved back to that method with
the new values, causing the recusion. Very cool.
</p>

<p>
Usually recursion is a neat way of writing a short function; here it's
pretty longwinded. We can get smaller&#x2026;
</p>
</div>
</div>

<div id="outline-container-orgbd15254" class="outline-2">
<h2 id="solution-2-taking">Solution 2: taking</h2>
<div class="outline-text-2" id="text-solution-2-taking">
<div class="org-src-container">
<pre class="src src-clojure">(<span style="color: #333333; font-weight: bold;">fn</span> [seqn n] (last (take (inc n) seqn)))
</pre>
</div>

<p>
Here we <code>take</code> the first one-more-than-n (<code>inc</code> increments its argument)
items from the sequence, and then take the <code>last</code> one from the end of
that new list- which will be the nth element.
</p>

<p>
<code>take</code> is used in many of the examples I've seen as a way of accessing a
sequence which may be infinite like the Fibonacci series - see some of
the examples over at
<a href="https://en.wikibooks.org/wiki/Clojure_Programming/Examples/Lazy_Fibonacci">Wikibooks</a>.
</p>

<p>
We can squeeze more succinctness in there using some alternative syntax:
</p>

<div class="org-src-container">
<pre class="src src-clojure">#(last (take (inc <span style="color: #333333;">%2</span>) <span style="color: #333333;">%1</span>))
</pre>
</div>

<p>
But if you want to be really succinct:
</p>

<p>
###Solution 3: ripping off Java
</p>

<div class="org-src-container">
<pre class="src src-clojure">.get
</pre>
</div>

<p>
Clojure gives you access to Java methods and fields through the use of
the dot (<code>.</code>) operator, which takes the form
<code>(.instanceMember instance arguments*)</code>. Here we're using the <code>get()</code>
method from the Java
<a href="http://docs.oracle.com/javase/tutorial/collections/interfaces/list.html">Lists
interface</a>, which we get to use on these instances as they are, well,
Java lists. which takes one argument - and luckily for us its the index!
We're calling <code>get(6)</code> on the list, which gives us the answer we want.
</p>

<p>
This is pretty close to cheating, but it goes to show how Clojure's
access to Java gives us a whole other language of libraries and methods
to play with.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2014-12-21-clojure-thoughts.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Book Review: Computer Science Programming Basics in Ruby]]></title>
  <description><![CDATA[
<p>
I recently finished reading
<a href="http://shop.oreilly.com/product/0636920028192.do">Computer Science
Programming Basics in Ruby</a> by Ophir Frieder, Gideon Frieder and David
Grossman. I was looking for something that would extend my knowledge of
computer science fundamentals - the title appealed as I've done the
majority of my coding up to this point in Ruby, so I was hoping the
familiar language would allow me to concentrate more on the computer
science theory.
</p>

<p>
I was ultimately disappointed - the book isn't so much a computer
science primer as a programming primer. The concepts being taught in
this book tend to be basic ones - control flow, simple data structures,
how a computer works. It's pitched at an entry level, and for that I'm
sure it's ideal, but it's not quite what I was after.
</p>

<p>
Idiomatic Ruby is avoided in the book in favour of using patterns that
are more generic to all programming languages. This is a good idea as it
introduces core programming concepts in a non language specific way, but
the lack of common Ruby methods like <code>each</code> might be concerning to some.
The book teaches programming basics in Ruby, but I don't think it
teaches a great deal of Ruby while doing so.
</p>

<p>
That said I learned a great deal in Chapter 7, Sorting and Searching.
The comparison of different search and sort algorithms make a good
introduction to algorithms in general and made me think a bit harder
about the magic that goes on under the hood of Ruby methods and
operators that I take for granted. I'm going to try and learn more about
algorithms in the next few weeks (see my
<a href="file:///posts/2014/12/8/exposing-my-ignorance/">last post</a> for the rest of
my hit list).
</p>

<p>
Maybe borrow this book from the library and give it a skim read if
you're already familiar with Ruby, because I'm sure you'll find some
useful stuff there. If you're interested in learning Ruby from the
ground up you should probably pair this book with something like
<i><a href="http://www.manning.com/black2/">The Well Grounded Rubyist</a></i> in order
to see why Ruby's so precious and shiny. Otherwise it's a well
structured, detailed and approachable introductory text, if maybe a
touch academic. Just not for me right now.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-12-14-book-review-compsci-basics-ruby.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Exposing my ignorance]]></title>
  <description><![CDATA[
<p>
I am currently reading (on impeccable advice),
<i><a href="http://shop.oreilly.com/product/9780596518387.do">Apprenticeship
Patterns</a></i> by <a href="https://twitter.com/davehoover">Dave Hoover</a> and
<a href="https://twitter.com/ade_oshineye">Adewale Oshineye</a>. The book is
written as a series of 'patterns', a method of analysing and solving
problems which is derived from a book I've always meant to read but
haven't, <i><a href="https://en.wikipedia.org/wiki/A_Pattern_Language">A Pattern
Language</a></i> by Christopher Alexander, Sara Ishikawa and Murray
Silverstein. There a pattern is a solution to an architectural design
pattern, a "best guess as to what arrangement of the physical
environment will work to solve the problem presented." Here the patterns
are 'best guesses' as to how to solve the problems of becoming a better
developer.
</p>

<p>
Two patterns I've been looking at in the last few days are "Expose Your
Ignorance" and "Confront Your Ignorance". The first pattern declares
that, as an apprentice you don't know how to do a lot of things that you
are going to have to do. A first instinct (OK, <i>my</i> first instinct) is
to hide that ignorance, nod blithely as the person describes the thing
you don't understand and then do a lot of reading and experimenting when
you're back home. 'Fake it till you make it'.
</p>

<p>
This can work, but it's incredibly inefficient. Other people know
already, most importantly the people who are asking you complete a task.
Just say that you don't know - that way you open up the opportunity for
them to help you where you struggle. Take route A, the shortest path
between two points, and ask questions. This quote sums it up:
</p>

<blockquote>
<p>
"Tell people the truth. Let them know that you're starting to
understand what they want and you're in the process of learning how to
give it to them. If you reassure them, reassure them with your ability
to learn, not by pretending to know something you don't. In this way,
your reputation will be built upon your learning ability rather than
what you already know."
</p>
</blockquote>

<p>
My quality as a programmer is not defined by what I know, but rather by
what I can know. But the hardest person to expose that ignorance to is
always yoursel
</p>

<p>
The corollary to "Exposing Your Ignorance" is "Confronting Your
Ignorance". An old colleague of mine would always say that he'd forgive
anything, other than 'willful ignorance'. There's little point in
declaring your ignorance if you're not actively addressing those gaps in
your knowledge. Asking questions is a start, but oher techniques like
pair programming, building example projects, and good old fashioned
reading, are there too.
</p>

<p>
Each pattern has a set of actions associated with it. "Exposing Your
Ignorance" asks that you write down five things that you don't
understand about your work and put it where others can see it:
</p>

<ol class="org-ol">
<li>Can I build a toy app in Java?</li>
<li>How do I use mocks in Java (London style TDD)?</li>
<li>How do I implement a 'hexagonal' design, and what does that even
mean?</li>
<li>What are generics (in Java and elsewhere)?</li>
<li>What is the best way for me to structure AngularJS and other
JavaScript projects?</li>
<li>What is functional programming? I mean, <i>really</i>?</li>
<li>What is an algorithm and how do I measure its efficiency?</li>
<li>Refactoring. I (think I) know what it means but can I learn some
patterns to do it better?</li>
</ol>

<p>
Not exactly five, but I could probably write fifty at the moment. There
are lots of other things I don't know (list as long as my arm). But,
you've got to start somewhere.
</p>

<p>
The action for "Confronting Your Ignorance" is to pick one of the things
on your list and, well, learn it. Nice and simple - show your ignorance
and own your ignorance, and fix your ignorance. That's a powerful tool.
</p>

<p>
I'm enjoying the book. I'll hopefully provide a fuller review at a later
date. And also provide an update of which of my ignorances I've
confronted.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-12-08-exposing-myself.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Programming Language Koans]]></title>
  <description><![CDATA[
<p>
I finished the <a href="https://github.com/neo/ruby_koans">Ruby Koans</a> today.
I'd been pretty close to the end before I started study at Makers
Academy, but it's good to have them done. I noticed I flew through the
last few regardng metaprogramming - I've been taught well.
</p>

<p>
Koans are an interesting tool to learn a language. Instead of teaching a
fact, they instead encourage solving a problem. The problems are koans
in the sense that the solution to each one reveals a new aspect of Ruby
to the student. This starts with simple operators and ends with
metaprogramming techniques. The solution tends to be of the 'fill in the
blank' form, although sometimes they require editing a class.
</p>

<p>
What I admire about this technique is the following:
</p>

<ul class="org-ul">
<li>Each problem is, in effect, a test. TDD is baked in from the
beginning, even if you don't happen to know what testing is. Think of
it as test driven learning.</li>

<li>The lessons are inseperable from the questions. Simply by answering
the question you are learning. There is no text with a list of
questions at the end to ensure understanding.</li>

<li>Hands on keyboard. You're reading, and writing, code in an active way.
There is no passive learning with writing koans.</li>
</ul>

<p>
If you've not tried out a set of koans, here's a short an incresingly
long list to try out:
</p>

<ul class="org-ul">
<li><a href="https://github.com/marcinbunsch/bash_koans">Bash</a></li>
<li><a href="https://github.com/torbjoernk/CppKoans">C++</a></li>
<li><a href="https://github.com/functional-koans/clojure-koans">Clojure</a></li>
<li><a href="https://github.com/liammclennan/coffeescript-koans">CoffeeScript</a></li>
<li><a href="https://github.com/google/lisp-koans">Common Lisp</a></li>
<li><a href="https://github.com/butlermatt/dart_koans">Dart</a></li>
<li><a href="https://github.com/CoryFoy/DotNetKoans">DotNet</a></li>
<li><a href="https://github.com/dojo-toulouse/elixir-koans">Elixir</a></li>
<li><a href="https://github.com/patrickgombert/erlang-koans">Erlang</a></li>
<li><a href="https://github.com/ChrisMarinos/FSharpKoans">F#</a></li>
<li><a href="https://github.com/cdarwin/go-koans">Go</a></li>
<li><a href="https://github.com/cjudd/groovy_koans">Groovy</a></li>
<li><a href="https://github.com/HaskVan/HaskellKoans">Haskell</a></li>
<li><a href="https://github.com/liammclennan/JavaScript-Koans">JavaScript</a></li>
<li><a href="https://github.com/matyb/java-koans">Java</a></li>
<li><a href="https://github.com/kikito/lua_missions">Lua</a></li>
<li><a href="https://github.com/chicagoruby/MongoDB_Koans">MongoDB</a></li>
<li><a href="https://github.com/forcedotcom/PerlKoans">Perl</a></li>
<li><a href="https://github.com/neo/ruby_koans">Ruby</a></li>
<li><a href="https://github.com/mankyKitty/rust-koans">Rust</a></li>
<li><a href="http://scalakoans.webfactional.com/">Scala</a></li>
<li><a href="https://www.hpi.uni-potsdam.de/hirschfeld/trac/SqueakCommunityProjects/wiki/smalltalk_koans">Squeak/Pharo
Smalltalk</a></li>
<li><a href="https://www.hpi.uni-potsdam.de/hirschfeld/trac/SqueakCommunityProjects/wiki/smalltalk_koans">GNU
Smalltalk</a></li>
</ul>

<p>
I've started the
<a href="https://github.com/functional-koans/clojure-koans">Clojure Koans</a>.
Where the Ruby Koans were verbose, these are terse. I like terse. Very
often I felt like I was being told what to write as the answer to the
Ruby Koans. That was right for Ruby, but not for Clojure.
</p>

<p>
So - go learn something new today!
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-11-22-koans.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Java]]></title>
  <description><![CDATA[
<p>
Java. Java is the
(<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">second</a>)
most popular programming language in the world. Java is over twenty
years old. Java is everywhere.
</p>

<p>
Java is giving me a headache.
</p>

<p>
Based on a job opportunity I started to try and learn Java last week.
Flailing around for guidance, Enrique told me to install an IDE.
<a href="https://www.jetbrains.com/idea/">IntelliJ</a> to be precise - mainly to
get something to manage my dependencies for me.. That's a whole story in
itself, but I hacked around a bit, ran some tutorials, and eventually I
got a <code>Hello World</code> out into the world. Finally I understood why things
in Java could be <code>public static void</code>, finally I understood the syntax.
Squint a little and it just looks like JavaScript. Ish.
</p>

<p>
Step two: testing. <a href="http://junit.org/">jUnit</a> turned out to be a
testing framework for Java and should not be confused with
<a href="http://en.wikipedia.org/wiki/G-Unit">G-Unit</a>. This I also got going,
but not without reservations. Turns out I don't like IDEs, for some
reason they make me feel seperated from the code I'm writing. Also I
felt ike I didn't have the time to learn a whole new environment. I use
<a href="http://www.vim.org/">Vim</a>, and I use it on the command line, and I
like it that way.
</p>

<p>
So I thought I'd try it from the command line. Not my greatest decision.
You've got two choices about how to manage dependencies and builds from
the terminal: <a href="http://maven.apache.org/">Maven</a> and
<a href="http://www.gradle.org/">Gradle</a>. Maven uses XML to describe the
project, one of my least favourite formats to read (I think I'm faster
reading binary), so I settled rapidly on Gradle, which is actually
written in
<a href="https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=groovy">Groovy</a>,
a dynamic language based on Java.
</p>

<p>
But back to the command line. I did manage to manage my projects from
there - and it did give me a feeling of greater control than through the
IDE. But it also revealed what a lot of work the IDE was doing. I feel
like I've been relatively spoiled using <a href="https://www.npmjs.org/">npm</a>
and <a href="http://bundler.io/">Bundler</a> - just <code>require</code> what you need and
it's there - magick. Java - even with
<a href="http://www.gradle.org/">Gradle</a>'s help - is horrible to look at. A
long mess of <code>com.something.somethingElse.someMethodHere</code>, each
individual damn thing being summoned individually. And me with no idea
of how it all works. I can only imagine what it would be like without a
dependency manager helping out.
</p>

<p>
I (by the end) managed to deploy a horrifically simple and untested app
to the <a href="http://aws.amazon.com/elasticbeanstalk/">AWS Elastic
Beanstalk</a>. But I never managed to get mocks in
<a href="https://code.google.com/p/mockito/">Mockito</a> off the ground. And I
never really felt like I knew what I was doing.
</p>

<p>
But after a week of Java, and a week helping out with
<a href="http://nodejs.org/">Node</a> at Makers, getting my hands back on Ruby
was lke coming home. How do I feel after experiencing my first
<a href="http://en.wikipedia.org/wiki/Strong_and_weak_typing">strongly typed</a>,
<a href="http://en.wikipedia.org/wiki/Compiled_language">compiled</a> programming
language? Overall I'm OK. I learned a lot about
<a href="http://en.wikipedia.org/wiki/Software_design_pattern">design
patterns</a> and the
<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a>
principles - chiefly about where they're from. A lot of the language
about interfaces makes a lot more sense when you're building an
interface seperately and implementing it in one of perhaps many classes.
And forcing me to declare the type of returned object for each method
(if any), and the type of each argument, and especially whether they're
public or private, made me think harder about methods in general.
</p>

<p>
Travel broadens the mind!
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-11-12-java-java-java.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Segmentation Fault]]></title>
  <description><![CDATA[
<p>
This is dedicated to my mother. It's her birthday today. It's also
<a href="http://findingada.com/">Ada Lovelace day</a>.
</p>

<p>
<a href="http://en.wikipedia.org/wiki/Ada_Lovelace">Augusta Ada King, Countess
Lovelace</a> was the daughter of a poet, a friend and collaborator with
Babbage, a socialite and a wit. She also wrote the world's first
computer program. If there were a patron saint for the creative coder it
would be her.
</p>

<p>
Ada Lovelace day is a celebration of women in Science, Technology,
Engineering and Mathematics. It's also a day to reflect on the issues
that face women who work in those fields. The biggest one being "Why are
there so few women in tech?"
</p>

<p>
Makers Academy is commited to equality - the first day here when I told
my partner how many women were students here she was surprised; "That
many?". I'm rubbish at statitics, but looking around the room you could
guess at maybe 40-50% are women. It's a good sign.
</p>

<p>
We're holding a round table discussion on Women in Tech today (which is
another good sign).
</p>

<p>
One of the panel (I'm awful with names) has just said that he's
horrified, as a father, about the segmentation that's present in
culture. He's raising a son to be as gender neutral as possible - as
happy playing in a kitchen as with a laptop. But he's constantly
battling against a culture that genders everything - pink and blue
Kinder eggs with Barbie and Transormers respectively was his example.
</p>

<p>
My mum can do the numbers challenge on 'Countdown' faster than anyone I
know. She'd be disappointed if it wasn't done <i>before</i> Carol Vordeman
pressed the button. She hates the anagrams. She's always hated the
anagrams. I hate the anagrams too. I love numbers because she loves
numbers. If I'm good at coding then she's had a hand in that.
</p>

<p>
She was told to be an English teacher when she was eighteen because she
told the careers adviser that she quite liked English. She went on the
be an amazing and dedicated teacher and retired this year. But what
might she have done if she'd said she liked maths? Or science? Or almost
anything else? Maybe she'd be a computer programmer now, retiring after
a long life in COBOL and C and helping me with my JavaScript. Or maybe
not - she was an amazing teacher. But who knows!
</p>

<p>
Or, worse, if her father hadn't made her feel good and proud about being
good at maths? Where would I be if my mum <i>hadn't</i> liked puzzles and
maths?
</p>

<p>
The problem isn't 'inside' tech, it's <i>throughout</i> society and culture.
It might make you dispair. It makes me dispair sometimes. But don't
dispair - look, here - I'll summarise the roundtable 'take away' actions
for everyone to do. Fix the world one stupid ignorant problem at a time.
</p>

<p>
###Women### - Go talk to children about what you do. - Call men out when
they say something offensive or just plain wrong. They're proabably
completely oblivious to the issue, so be polite.
</p>

<p>
###Men### - Listen. And be there and be nice. But mainly listen more. -
Don't think it's not problem; educate yourselves and recognise the
problem.
</p>

<p>
And one for everyone: 'Own Your Ignorance' (now that's wise) - don't
bluff it, don't fake it, don't ignore it, don't be scared of it. Your
scope for improvement <i>is</i> your ignorance. (Maybe that should also
involve owning <i>other</i> people's ignorance too, feeding in to the points
above&#x2026;)
</p>

<p>
Oh, and one I hadn't heard before &#x2013; apparently the first version of
Siri knew how to get you to a stripclub but had no idea how to get you
emergency contraception.
</p>

<p>
Sexism, whether deliberate or accidental, is, like all evil (I'll stand
briefly with Plato on this) a consequence of ignorance of one form or
another. Would you trust a coder who wanted to be deliberately ignorant?
</p>

<p>
Ignorance sucks.
</p>

<p>
Happy Birthday Mum :)
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-10-14-segmentation_fault.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Mocha tests with MongoDB and Mongoose]]></title>
  <description><![CDATA[
<p>
I've been continuing my assault on Node.js - I refuse to let it lie. I
decided two weeks ago to try and get a version of the Makers Academy
chitter project (a twitter clone) up and running using Node, Express
and - because you may as well go straight in at the deep end - MongoDB.
Let's call it 'Chitter.js'.
</p>

<p>
The biggest pain I've had is getting the tests to run. This may not
sound like a big deal to someone on the outside, but without tests I
feel a little lost &#x2013; I mean, how do you know if what you're doing is
working? Or your refactoring hasn't changed anything?
</p>

<p>
Anyway, enough of the TDD rant - and maybe let's just approach this as
an intellectual exercise. Mocha is the test framework we're using &#x2013;
along with the Chai library of assertion (so I can write <code>expect</code>) a
lot.
</p>

<p>
Now the first thing to bear in mind is just how asynchronous
<i>everything</i> is when working in JavaScript. You may <i>think</i> you
understand, but you proaably don't. My entire cohort at Makers is
replete with tales about testing in Mocha ("It passed one time &#x2013; but
then it didn't" &#x2026; "I ran it, it should've failed. But it passed.
Twice.").
</p>

<p>
Happily Mocha gives us <code>done</code>. You can pass any test block (OK, not
block, anonymous function. But I'm Ruby till I die) an argument of
<code>done</code>, which is a function you can call when the test is&#x2026; well, when
the test is done. It basically means that you can make thinga happen
when you want them to happen, and not in faster-than-a-speeding-bullet
JS timeframes.
</p>

<p>
So, here's a test straight out of my actual project. The key thing to
note is the fact that the expectations are sitting in the callback for
the <code>save</code> function - you'll only want to test the database once the
save has saved (i.e. once its calledback).
</p>

<p>
(The following is all in CoffeeScript - which I'm agnostic about. It
definitely has the advantage of brevity, which is a quality all of its
own.)
</p>

<pre class="example">
it 'saves users', (done) -&gt;
    bob = new user {username: "bob", password: "pisswird"}
    bob.save (error, saved_bob) -&gt;
        expect(saved_bob.username).to.equal "bob"
        expect(saved_bob.password).to.equal "pisswird"
        done()
</pre>

<p>
You would expect this to run, test the expectations, and then let you
know it's all finished with the <code>done()</code> call at the end of the
callback. And it does do exactly that &#x2013; but only so long as the
expectations pass. If they don't the whole thing just times out - which
is not what we're after.
</p>

<p>
I tried a number of solutions to this problem (in fact the above <i>is</i>
one of those solutions - the first attempts were even more worthless),
including a few experiments with the
<a href="http://chaijs.com/plugins/chai-as-promised">Chai as Promised</a> library
which includes such great statements as <code>to.eventually.deep.equal</code> But
the problem wasn't resolved until I hit upon the following pattern:
</p>

<pre class="example">
it 'saves users', (done) -&gt;
  user = new User {username: "bob", password: "pisswird"}
  user.save (error, saved_user) -&gt;
    try
      expect( saved_user.username ).to.eql "bob"
      done()
    catch error
      done(error)
</pre>

<p>
What wizardry is this? Let me try to explain&#x2026;
</p>

<ol class="org-ol">
<li>The reason everything timed out on the expectation failing was that
the expectation statement is no longer in the scope of the <code>it()</code>.</li>
<li>Expectations pass when they pass &#x2013; but when they fail they raise an
exception which is caught by the <code>it()</code> function the whole lot is
wrapped in.</li>
<li>So when the statement goes out of scope, it means that the error
never 'bubbles up' to the <code>it</code>, the <code>done()</code> never gets called, and
the whole thing just times out.</li>
<li>So we need a way to send the error for the failed expectation up to
the <code>it()</code>.</li>
<li>This is where the <code>try/catch</code> comes in - if the expectation fails it
raises an error that then gets passed to the <code>done</code> function in the
catch - which the <code>done</code> then dutifully carries back up to the <code>it</code>
with the essential error information about what exactly went wrong.</li>
</ol>

<p>
And so now we can write tests. Hurrah! But, more importantly, we've
gained an insight into how testing frameworks work. When I first
encountered testing in RSpec I went through the various patterns of test
as ritual &#x2013; 'this is how you do it' &#x2013; but the more I work with tests
the more I'm respecting the hard work that's gone in to making them look
like magick.
</p>

<p>
So I'm really greateful for Mocha being a bit of a pain to test with
over the last few weeks, as it's made me have to think a bit harder
about testing in general and the dark arts of JS.
</p>

<p>
That said, it's not done much for the development of chitter.js&#x2026;
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-10-13-mocha_tests.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Silence is the Enemy]]></title>
  <description><![CDATA[
<p>
I've been thinking about this post for a few weeks, but
<a href="@benjilanyado">Benji Lanyado</a> from
<a href="https://www.picfair.com/">Picfair</a> has just given a great talk about
starting his business. Great for a number of reasons (he's a very
charismatic speaker to begin with), but the key thing I'm taking home
with me is what he's just said about, well - talking.
</p>

<blockquote>
<p>
Talk to everyone. Get out of your flat.
</p>
</blockquote>

<p>
It's easy to forget that in a few weeks I'm not going to be around here
at Makers. And that the best thing - the <i>best</i> thing - about being here
is talking to people.
</p>

<p>
At every stage of coding - whether in solving a problem, learning a
language, fixing a bug - silence is the enemy. You know your pairing is
going wrong when nobody is saying anything. Say <i>something</i>, even if
you're just restating the problem. Pairing is made to make you talk
about what's going on - making your brain work around the problem by
putting it in your mouth. How incredible is that?
</p>

<p>
This becomes really apparent when you've been coding on your own for a
while. You tend to find yourself going crazy over small bugs that are
really apparent when you're looking at them in someone else's code. This
is why <a href="http://c2.com/cgi/wiki?RubberDucking">rubber ducking</a>
happens - that experience you've had of going to someone for help and
suddenly realizing the solution halfway through explaing the problem to
them - they've become your rubber duck (remember to thank them with a
quack).
</p>

<p>
Same goes for teaching - the number of things I've got down solidly by
having to explain it to someone, out loud. It's mind blowing. You can't
skip over anything when you're talking, your brain can't trick you into
false confidence by waving its hands over a bit you don't understand. I
gave a talk about bitwise operators a few days ago - I thought I had it
all covered, but when I got a question about
<a href="http://en.wikipedia.org/wiki/Two's_complement">two's complement</a> it
became <i>really</i> apparent that I didn't have a clue. Embarassing? Yes, a
little - but now at least I know where I'm ignorant, rather than being
surprised about it later.
</p>

<p>
Silence is the enemy of good and happy coding. Keep talking - even if
it's just to yourself.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-10-07-silence.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Slaying The JavaScript Dragon]]></title>
  <description><![CDATA[
<blockquote>
<p>
Hey folks!
</p>

<p>
The Node and JavaScript dragons have been hard to fight&#x2026; Do you
remember you used to look at precious stones?
</p>
</blockquote>

<p>
That's how Enrique's email introduced the Friday challenge at the end of
week 8 at Makers. Week 8 has been Hell Week. It was a beasting. It was
hard. It was NodeJS.
</p>

<p>
I was looking forward to this week more than any other - it's a great
idea. More and more devs and companies are using Node, Rails is so
opinionated as to be stifiling - so why not do another week of
JavaScript dedicated to Node? Throw some CoffeeScript in there for good
measure along with a seasoning of WebSockets and you've got a recipe for
succeess.
</p>

<p>
Nope. See above. You've got a recipe for Hell Week.
</p>

<p>
JavaScript was a severe shock to the system for everyone. I was already
relatively comfortable with the language - it wasn't entirely new to me.
But I still struggled with getting Express and Node.
</p>

<p>
I knew that JS was asynchronous - but I didn't really <i>know</i> it, if you
take my meaning. The difference between Sinatra and Express became
apparent from the beginning. Where on Sinatra it was fairly easy to get
RSpec and Capybara performing tests out of the box, with Mocha it felt
like I was contantly and actively fighting against the framework.
Callbacks came back unexpectedly or not at all. Tests passed - twice -
when they should've failed.
</p>

<p>
The final straw came when we collectively couldn't get read/write
operations working consistently. I suddenly realised how spoiled I've
been by using Ruby, RSpec et al &#x2013; these are really mature pieces of
software that act as you expect. I feel that Node and Express are
amazing - don't get me wrong. But I've found it nigh-on impossible to
test them.
</p>

<p>
And if you can't test it, then it doesn't exist.
</p>

<p>
I'm still pressing on with Node/Express on the side, because I do really
enjoy the environment to work in. I just need to slay the Mocha dragon
and everything will be fine.
</p>

<p>
The Ruby refresher that was presented as the weekend work was like a
beautiful sorbet - so refreshing after the hard week. As I answered the
questions with simple one-liner methods I realised exactly how much I'd
learned in the last eight weeks. I feel like I've got a firm foothold in
the Ruby world.
</p>

<p>
Now on to the Mocha.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-09-28-the_JS_dragon.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Data Mapper Woes]]></title>
  <description><![CDATA[
<p>
I love <a href="http://datamapper.org/">DataMapper</a>, the lightweight Object
Relational Mapper for Ruby. We've been using it with Sinatra. It's
skinny, it's simple, it's clever, it makes the right tables happen in
Postgres and the syntax is surprisingly simple. For instance, the email
field for a user table:
</p>

<div class="org-src-container">
<pre class="src src-ruby">property <span style="color: #333333; font-weight: bold;">:email</span>, <span style="color: #333333; font-weight: bold;">unique:</span> <span style="color: #333333; font-weight: bold;">true</span>, <span style="color: #333333; font-weight: bold;">required:</span> <span style="color: #333333; font-weight: bold;">true</span>, <span style="color: #333333; font-weight: bold;">format</span>: email_address
</pre>
</div>

<p>
Look! It's amazing &#x2013; not only do we set the property, but we've made it
required and unique, and we've validated that it's an email address.
Amazing!
</p>

<p>
I love it, but like all wonderful DSLs when it's good it's very very
good, but when it's bad it's <i>horrid</i>.
</p>

<p>
In the example I was working on I was creating a user which could be
associated with many posts - it was a basic Twitter like app. The user
had some requirements as above - specifically those listed for the
email, but also that the user name was unique and that the password was
more than six characters long. So far so incredibly boring.
</p>

<p>
I set the wheels in motion, I write a feature test in Cucumber to see if
as a user, when logged in, and I create a new post, then the post count
goes up by one (I like speaking in Gherkin). Everything looked OK - but
the post wasn't saving. And there were no useful error messages.
</p>

<p>
<a href="http://alexpeattie.com/">Alex Peattie</a> is a hero. He's left Makers
now, but before he did he hacked through what was going on with my
problem. And I mean hacked in the manner of destroying briar patches and
slaying dragons - my mouth dropped in awe as he systematically got to
the source of the problem ("So, let's force it to save&#x2026; it saves the
post fine, but doesn't update the user&#x2026; hmmm&#x2026;"), then started
dropping <code>puts</code> into the DataMapper source code after identifying the
problematic lines in the backtrace.
</p>

<p>
As it turns out, it was the password length that was the problem. As the
User was being updated with the new post it is being associated with,
the password requirement (6 letters or more) was kicking in - even when
no password was being submitted with the update. So the post was fine -
just the user didn't, and so prevented the post from saving.
</p>

<p>
Simple to fix (just tell the user model to only validate password length
on creation), but difficult to identify. I won't make that mistake
again, but Alex remains my hero for sorting that out (and giving a great
demonstration debugging). <a href="http://alex-farewell-card.herokuapp.com/">We
all miss him</a>.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-09-20-data_mapper.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Environmentalism]]></title>
  <description><![CDATA[
<p>
I've never really seen the point of environment variables until today.
They've been slowly introduced into the syllabus at Makers during the
bookmark manager project. To start with they were a way determine which
database to use; whether the one for the test suite or the one for
playing around on the local server.
</p>

<p>
Something like
</p>

<div class="org-src-container">
<pre class="src src-ruby">env = <span style="color: #333333; font-weight: bold; font-style: italic;">ENV</span>[<span style="color: #666666;">"RACK_ENV"</span>] || <span style="color: #666666;">"development"</span> <span style="color: #333333; font-weight: bold; font-style: italic;">DataMapper</span>.setup(<span style="color: #333333; font-weight: bold;">:default</span>,
<span style="color: #666666;">"postgres://localhost/bookmark_manager_</span><span style="color: #333333;">#{env}</span><span style="color: #666666;">"</span>)
</pre>
</div>

<p>
Which is all well and good. Then it comes to getting the app up - let's
say on Heroku.
</p>

<p>
Heroku has PostgreSQL support, so that's taken care of by adding a
plugin on the dashboard. Tick. Pushing the application to Heroku is easy
enough (as long as you haven't spelled <code>Gemfile</code> in all caps at any
point in your Git history. Who would do that?). But then you hit the
buffers, because the database isn't where you've told Sinatra it is.
</p>

<p>
So where is it? Hiding somewhere over at Amazon apparently. If you run
<code>heroku config</code> you'll see a great (OK, tiny) stack of&#x2026; you guessed
it&#x2026; environment variables. The two key ones to look at are
<code>DATABASE_URL</code> and <code>HEROKU_POSTGRES_PINK_URL</code>. Next to them both is a
long URL that lets you know that the nice folks at Amazon are taking
care of your instance of Postgres on the behalf of Heroku.
</p>

<p>
So we just jam that URL into the DataMapper setup right?
</p>

<pre class="example">
ruby DataMapper.setup(:default,
"postgres://whole-mess-of-letters.compute-1.amazonaws:porty_goodness_here")
</pre>

<p>
Wrong. That URL is a magic number, it's specific to the Heroku server
you're pushing to. But what about James? What about Vincent? Maybe they
want to have an instance of their own. Or what if Heroku go and migrate
your database to another cloud supplier? Bad times.
</p>

<p>
Environment variables to the rescue. Look, it's right there in the
config: <code>DATABASE_URL</code>. Just jam that sucker into the DataMapper setup.
Of course, you need to make sure that you're using it in Heroku, so
maybe some sort of <code>if</code> statement to make sure you're using it in the
right place. Not pretty, but&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-ruby"><span style="color: #333333; font-weight: bold;">if</span> env.include?(<span style="color: #666666;">/heroku/</span>)
    <span style="color: #333333; font-weight: bold; font-style: italic;">DataMapper</span>.setup(<span style="color: #333333; font-weight: bold;">:default</span>, <span style="color: #333333; font-weight: bold; font-style: italic;">ENV</span>[<span style="color: #666666;">"DATABASE_URL"</span>])
<span style="color: #333333; font-weight: bold;">else</span>
    <span style="color: #333333; font-weight: bold; font-style: italic;">DataMapper</span>.setup(<span style="color: #333333; font-weight: bold;">:default</span>, <span style="color: #666666;">"postgres://localhost/bookmark_manager_</span><span style="color: #333333;">#{env}</span><span style="color: #666666;">"</span>)
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
Environment variables. No longer a 'nice to have'.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-09-12-environmentalism.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[For fun!]]></title>
  <description><![CDATA[
<p>
So the last post was a bit of a downer, right? I thought I'd get it down
while things were still fresh in the mind.
</p>

<p>
But things aren't bad at all. Makers remains a lot of fun - if you're in
a bit of a funk the general environment of fun just pulls you through.
With running (yeah, back to running) you're not just interested in
making the distance - running in and of itself is fun. Believe me, the
best days of running I've had are ones where I find a comfortable pace
and just see where that quiet country lane will take me. Preferably in
beautiful sunshine.
</p>

<p>
Likewise coding. No, really.
</p>

<p>
A few days ago <a href="https://twitter.com/optilude">Martin Aspell</a> from
<a href="http://www.deloittedigital.com/us/">Deloitte Digital</a> came in and
gave us a lunchtime presentation. The lunchtime presentations at Makers
are one of the best perks of being here. You sit on beanbags while
people from the industry come and talk to you for twenty minutes about
what they do. This can be as diverse as data security, insurance
databases, restaurant bookings and - I'll write about this later - and a
fantastic talk from <a href="http://www.deloittedigital.com/us/">Rozemary
King</a> from Pivotal labs about Product Management (amazing insight into
how an agile process is managed in the trenches).
</p>

<p>
But back to Martin. He gave a talk about his life, what he's done and
worked on and a little about Deloitte Digital as well. What stuck with
me most was something he said about his relationship with writing code:
he comapred it to an addiction. He finds it relaxing - he said it calms
him down in the evening, like doing a crossword or sudoku.
</p>

<p>
I thought it sounded a little mad, but he's right. The last few days
I've been taking breaks from the course by rewriting the Battleships
project, playing around with ideas and seeing what works. And for fun!
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-09-09-for-fun.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[The Wall (and getting over it)]]></title>
  <description><![CDATA[
<p>
Ever run a marthon? No, me neither. I've run a few halfs, so let's
pretend that's adequate experience to talk about marathon running.
</p>

<p>
Long distance runners talk about this moment when the glycogen in your
body runs out entirely. You'll get about two hours, maybe more if you
train. But it'll happen, and all your energy just - goes. Seratonin
levels go up, which might sound fun until I tell you that your dopamine
goes down as well. This might be causing some of the little voices in
your head to tell you that you can't do it. You may hallucinate. You may
not be able to stand.
</p>

<p>
I hit the mental equivalent of the wall sometime over the week we
started learning <a href="http://www.sinatrarb.com/">Sinatra</a> at Makers. I'd
done my preparation, I'd learned and digested solidly. I'd say I was one
of the better prepared for the next twelve weeks.
</p>

<p>
But you can only delay the wall - you can't put it off entirely. I ran
out of whatever mental stamina I had. And it hurt. A lot.
</p>

<pre class="example">
Depressesed? Disheartened? Hate coding? Hate what you're doing to yourself? Hate
Sinatra (the framework)? Hate Sinatra (the singer)? Wonder what you're still
doing here? How *can* anyone learn to code in twelve weeks? Stupid. Impossible.
You'd be better back at the library. Hell, you'd be better back at the cannary.
Stupid brain that won't work. Stupid.
</pre>

<p>
We can reach for another running metaphor: second wind. Even at the
point of greatest exertion, you can find a way to carry on. Going even
faster sometimes. Like you can push through the wall and find yourself
suddenly back to normal again.
</p>

<p>
This happened too - and kept happening. Because I didn't just hit one
wall. I've hit at least three since the first one. You get <i>used</i> to it.
Flailing ignorance and mental exhaustion is aleviated by the next piece
of hard-won knowldege and skill.
</p>

<p>
I've found relaxation to be as important as work. I'm reading fiction
again, getting to bed in good time, appreciating a quiet beer. Taking
your mind off the problem until it's ready to be solved.
</p>

<p>
Thinking about philosophy, and Deleuze &amp; Guattari's
<a href="http://en.wikipedia.org/wiki/A_Thousand_Plateaus">A Thousand
Plateaus</a>, I think of the organism that can only grow by dying a little
every day. Growth is painful. Growth is hard. But nothing worthwhile was
ever easy.
</p>

<p>
You beat it. I couldn't do Sinatra, I couldn't make it do what I wanted
it to do. But I made it do something, learned my limitations. And I
enjoyed myself. And now <a href="http://rpssd.gypsydave5.com/">you can play
with it</a>.
</p>

<p>
The pace is picking up this week. Last week threw Sinatra in our faces.
This week is databases. Learning to program is one thing - keeping all
these spinning plates up in the air at the same time is another.
</p>

<p>
And only half the race run.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-09-06-the-wall.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Lessons Learned]]></title>
  <description><![CDATA[
<p>
Things I've learned so far from my teachers:
</p>

<div id="outline-container-org8392813" class="outline-2">
<h2 id="stephen---succinct-semantics"><a href="https://twitter.com/Stephen_lloyd">Stephen</a> - Succinct Semantics</h2>
<div class="outline-text-2" id="text-stephen---succinct-semantics">
<p>
I felt a little smug about my code when Steve sat next to me to see how
I was doing. I was seeing if there were any broken bikes in an array,
something like
</p>

<div class="org-src-container">
<pre class="src src-ruby">bikes.select {|bike| bike.broken?}.count &gt; 1
</pre>
</div>

<p>
He took a quick look and pointed out that this was a little on the long
side. Does Ruby have an <code>any?</code> method for <code>Array=s? Sure enough, there
in =Enumerable</code>
</p>

<div class="org-src-container">
<pre class="src src-ruby">bikes.any? {|bike| bike.broken?}
</pre>
</div>

<p>
Better. I would have been happy. But Steve then says, try passing a the
symbol for <code>broken?</code> as a proc - something I'd seen and not used.
</p>

<div class="org-src-container">
<pre class="src src-ruby">bikes.any?(&amp;<span style="color: #333333; font-weight: bold;">:broken?</span>)
</pre>
</div>

<p>
See how that's better? It says exactly what it does? Yes, I did. And I'd
learned that you don't have to sacrifice succinctness to semantics and
vice versa. Ruby has enough well-named methods and techniques to create
a short statement that someone who didn't know Ruby would still
understand. Lesson learned.
</p>
</div>
</div>

<div id="outline-container-orgc72825f" class="outline-2">
<h2 id="mihai---delete-your-code"><a href="https://twitter.com/liviu_23">Mihai</a> - Delete Your Code</h2>
<div class="outline-text-2" id="text-mihai---delete-your-code">
<p>
I asked Mihai for some help changing my tests for the Boris Bikes
project. I was trying to change the RSpec tests I'd written from
<a href="http://programmers.stackexchange.com/questions/123627/what-are-the-london-and-chicago-schools-of-tdd">Chicago
to London style</a> having just been shown how to do doubles.
</p>

<p>
Start again, Mihai said. Don't be precious or treasure what you've
written - just get rid of it and start again. You'll learn more that
way.
</p>

<p>
Since then I've taken immense pleasure in wiping entire projects out.
And learned more by doing that. Lesson learned.
</p>
</div>
</div>

<div id="outline-container-orgaa3d04a" class="outline-2">
<h2 id="orgaa3d04a"><a href="https://twitter.com/ecomba">Enrique</a> - Cooking without ever</h2>
<div class="outline-text-2" id="text-orgaa3d04a">
<p>
having have Eaten
</p>
<p>
:CUSTOM<sub>ID</sub>: enrique&#x2014;cooking-without-ever-having-have-eaten
</p>

<p>
Late in the day I asked Enrique about program design. I was worried,
really worried, that I didn't know the right way to proceed with writing
a program. He'd just introduced the idea of design patterns that day, so
I asked him to recommend a book, or a checklist, or a mantra - the best
way to learn some patterns.
</p>

<p>
Even as I spoke, Enrique started moving him hands, miming typing in
front of me. Remember what I said earlier, he said, about coding being
entirely artificial. It's not like cooking where you know what food is
and what it tastes like. It's like cooking when you've never eaten food,
have no idea what good or bad food tastes like. The only way you'll
learn is by writing code, a lot of code. Then your instincts, your taste
and intuition, will improve.
</p>

<p>
It was only later that I connected this advice up with
<a href="http://en.wikipedia.org/wiki/Henri_Bergson#Creativity">Bergson's ideas
about creativity, specifically the swimming example</a>. You wouldn't
think a person could swim if you only ever saw them walk, the argument
goes. For swimming to be intellectually comprehendable, you've got to
throw yourself in the water first. You can't theorize about things you
haven't done - intuition must take the lead, intelligence is a not a
speculative faculty, but a practical one.
</p>

<p>
Mind blown, I staggered home, ignored <i>The RSpec Book</i> and wrote more
code. Lesson learned.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2014-08-24-lessons_learned.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Bitwise and Permission]]></title>
  <description><![CDATA[
<p>
So I thought I'd try and write about what happened last day of the first
week at <a href="http://www.makersacademy.com/">Makers</a>, as mentioned in
<a href="file:///posts/2014/8/9/makers:-day-5/">my last post</a>, about the failing
RSpec test for the Unix task. Just because I learned a lot about both
permissions on a Unix like system, about bitwise operators in Ruby,
about how RSpec works, and how (not) to fix things.
</p>

<p>
So&#x2026; the test checking file permissions in a directory by running the
following RSpec test.
</p>

<div class="org-src-container">
<pre class="src src-ruby">it <span style="color: #666666;">"Should only allow the owner to change into my/private/files"</span> <span style="color: #333333; font-weight: bold;">do</span>
  folder = <span style="color: #666666;">"my/private/files"</span>
  permissions = <span style="color: #333333; font-weight: bold; font-style: italic;">File</span>.stat(folder).mode
  expect(permissions &amp; 0000100).to be_true
  expect(permissions &amp; 0000010).to eq(0)
  expect(permissions &amp; 0000001).to eq(0)
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
When we first ran it, it failed on the first expectation above - even
though we knew that the file had the right permissions. So what was
going on - both in terms of how it was meant to work, and why it wasn't
working?
</p>

<div id="outline-container-org9ec89fd" class="outline-2">
<h2 id="permissions">Permissions</h2>
<div class="outline-text-2" id="text-permissions">
<p>
Let's start with that first expectation.
</p>

<div class="org-src-container">
<pre class="src src-ruby">expect(permissions &amp; 0000100).to be_true
</pre>
</div>

<p>
<code>permissions</code> is a variable representing the result of
<code>File.stat(folder).mode</code>, where <code>folder</code> is the directory being checked.
The <code>mode</code> method
<a href="http://www.ruby-doc.org/core-2.1.2/File/Stat.html#method-i-mode">returns
the permissions-bits of the Unix <code>stat</code> command</a> - which you can take a
look at in detail with a quick <code>man stat -a</code> (as it's <code>stat(2)</code> you're
looking at.
</p>

<p>
What does all this mean? It means that we're getting back an integer
which represents the current permissions on the file. And how does an
integer represent permissions? If you've been using <code>chmod</code> to change
permission with commands like <code>chmod go-w filename</code> (remove write from
group and others), well - you've been missing a trick and a whole lot of
fun.
</p>

<p>
The fun way to set permission is using the <i>absolute mode</i>, which sets
the permissions absolutely every time you use it (rather than relatively
removing or adding them from the current state - see <code>man chmod</code> for
more). There are three settings (read, write and execute) for each of
the three permissions groups (user, group, other) on a file. Each of
those permissions sets is represented by a single octal digit (from 1 to
7), and the settings are literally added to each one - the setting for
read is 4, write is 2 and execute is 1.
</p>

<p>
Any combination of these numbers will produce a unique number - read +
write = 6, write + execute = 3, just read = 4. And you can combine them
into a three-digit octal number which represents the file permissions
for any given file, where the first digit is user, the second is group
and the third is other.
</p>

<p>
In practice: <code>chmod 777</code> gives permissions for everything. <code>chmod 644</code>
gives read/write to user, and just read to group and other. <code>755</code> is
read/write/execute for user, and just read/execute for the group and
other.
</p>
</div>
</div>

<div id="outline-container-org2ca6486" class="outline-2">
<h2 id="the-science-bit">The science "bit"</h2>
<div class="outline-text-2" id="text-the-science-bit">
<p>
Notice how none of the octal numbers ever 'carry' over to the next one
when they're added together? This is a piece of computer science
wizzardry - because they're in octal, I can look at them as both an
actual integer or as a series of switches (or maybe dials), setting
permissions for each permissions group up and down. Thing is, for your
computer, these two ways of looking at it <i>are exactly the same</i>.
</p>

<p>
<code>777</code> in decimal notation is <code>511</code> (do the maths if you like), but also
has a binary representation of&#x2026; <code>111111111</code>. Hey, look - all the 1s!
It's like all the switches are turned on - and they really are!. This is
because octal digits map really neatly to binary digits - they're a
three-digit long collection of binary digits. 'Binary digit' is a bit of
a mouthful (pun intended), so let's use the shorthand word - bit. Each
set of three bits represents one of the permission statuses for a
particular permissions set. So the first three 1s above are the
permissions for the user, and in particular the first one is the read,
second write and the third the execute - all set to 1 or 'on'.
</p>

<p>
(Experiment in a Ruby repl like pry or irb - you can switch between
binary, octal and decimal really quickly in Ruby. Any integer you type
in with a leading <code>0</code> (say <code>0777</code>) will automatically be translated as
an octal (<code>0777</code> will return <code>511</code> - the decimal representation). And
you can flip to a binary representation with <code>to_s(2)</code> - the <code>(2)</code>
setting the base of the conversion, so that <code>0777.to_s(2)</code> will return
<code>"111111111"</code>. Try some other numbers!)
</p>

<p>
So when <code>mode</code> returns an integer, it's the integer that represents the
current permissions on that file - a file with read, write and exeute
permissions for all the sets would give you the number <code>511</code> (which is
the same as <code>777</code> and <code>111111111</code>).
</p>
</div>
</div>

<div id="outline-container-org31c4eff" class="outline-2">
<h2 id="bitwise">Bitwise</h2>
<div class="outline-text-2" id="text-bitwise">
<p>
Now we get to the fun stuff - <code>permissions &amp; 0000100</code>. What's the <code>&amp;</code>
doing? And those leading 0s? As mentioned above, the leading zeroes are
just Ruby's way of saying that this number is in octal. So (repls open)
<code>0000100</code> just becomes <code>64</code>. But the thing doing the work here is <code>&amp;</code> -
not our friendly Boolean <code>&amp;&amp;</code>, but a differnent beast - this is the
<a href="http://en.wikipedia.org/wiki/Bitwise_operation#AND"><b>bitwise AND</b></a>.
</p>

<p>
Bitwise operators, of which <code>&amp;</code> is an example, really tear the lid off
the computer and get a little bit closer to the bare metal. Computers
aren't made of objects, or lines of code, strings and integers. They're
made of 0s and 1s. And bitwise operators work on 0s and 1s - or,
specifically, binary numbers.
</p>

<p>
Let's take a pair of binary numbers, say <code>111</code> and <code>100</code> (known to you
and me as 7 and 4). Bitwise AND compares the bit in each position, and
asks the question "are you both <code>1</code>?" If they are, you get a <code>1</code>,
otherwise it's a <code>0</code>. So <code>111 &amp; 100</code> will return <code>100</code> as the third bit
(counting from the right) is the only one that matches in each number
</p>

<p>
(Think of it just like a regular logical AND - but <code>1</code> is <code>true</code> and <code>0</code>
is <code>false</code> - running on each bit position.)
</p>

<p>
We now have enough knowledge to look at the test again
</p>
</div>
</div>

<div id="outline-container-org4a3b861" class="outline-2">
<h2 id="back-to-the-test">Back to the test</h2>
<div class="outline-text-2" id="text-back-to-the-test">
<p>
To recap, the test looks like this:
</p>

<p>
`=ruby   it "Should only allow the owner to change into my/private/files" do     folder = "my/private/files"     permissions = File.stat(folder).mode     expect(permissions &amp; 0000100).to be<sub>true</sub>     expect(permissions &amp; 0000010).to eq(0)     expect(permissions &amp; 0000001).to eq(0)   end=
</p>

<p>
The key line being:
</p>

<div class="org-src-container">
<pre class="src src-ruby">expect(permissions &amp; 0000100).to be_true
</pre>
</div>

<p>
Now let's pretend that the directory currently has permissions of
<code>700</code> - read, write and execute ('execute' is 'open' for a folder &#x2013;
allowing you to <code>cd</code> into it). We run <code>mode</code> on it and get the
permissions integer back - in octal, that's <code>700</code> again. We then run a
bitwise AND - the <code>&amp;</code> against it using the octal number <code>100</code> (all those
=0=s at the beginning are just saying 'hey! I'm octal!' to Ruby).
</p>

<p>
Converting octal to binary, <code>700</code> is <code>111000000</code>, and <code>100</code> is <code>1000000</code>
(Don't trust me? Fire up a repl!). Maybe think of <code>1000000</code> as
<code>001000000</code> for the next bit. Comparing the two binary numbers, the only
place they match is at the seventh bit - and so we get <code>1000000</code> as the
returned value. Which, in octal is <code>100</code> and in decimal is <code>64</code>.
</p>

<p>
The neat thing about this is that it will return <code>64</code> for any permission
set that includes user executable permission on a file - <code>700</code>, <code>500</code>,
<code>177</code>, <code>355</code>, <code>777</code> &#x2013; they <i>all</i> work. Say we've got <code>355</code> - in binary
that's <code>011101101</code>. <code>&amp;=ing it with =001000000</code> again will give us&#x2026;
<code>001000000</code> again - hey, it's <code>64</code>! Try it with as many numbers as you
like.
</p>

<p>
The other two tests are to check whether the Group or Other sets also
have execute permission &#x2013; that's <code>010</code> becoming <code>000001000</code> and <code>001</code>
to <code>000000001</code>, bitwised against the permissions making sure they
<i>don't</i> have that bit set. They come out as <code>0</code> &#x2013; no matches!
</p>

<p>
And so that's how it all hangs together. But why didn't it work? Simply
put everyone on the course had just installed the latest version of
RSpec, and <code>be_true</code> is not in the latest version's syntax. So all we
needed to do was change <code>be_true</code> over to <code>eq(64)</code> and it would've been
fixed.
</p>

<p>
Of course, that's not what we <i>actually</i> did. What we did was hack
around until it worked, and even then we ended up with <code>is_not eq(0)</code>
instead of the neater (and more correct) answer of <code>eq(64)</code>. It was only
when thinking about it over the weekend that I really got a handle on
what was going on
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2014-08-15-bitwise-and-permissions.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Makers: day 5]]></title>
  <description><![CDATA[
<p>
I thought I'd be writing a blog post everyday about my experience at
<a href="http://www.makersacademy.com/">Makers</a>. Or at least every two days.
That went out of the window pretty damn quickly. Things move quickly, so
let's go for a quick update and review before I get along with my
Saturday&#x2026;
</p>

<div id="outline-container-orgbd5c1af" class="outline-2">
<h2 id="day--2">Day -2</h2>
<div class="outline-text-2" id="text-day--2">
<p>
Headed to the graduation of the cohort 12 weeks ahead of ours and met
some of the guys joining me in the August group, as well as the
'seniors' (that's seniors by a full 6 weeks &#x2013; I don't thinks they'll be
taking my lunch money). Got to see the different final projects that had
been created &#x2013; really beautiful stuff such as the artist portfolio
site, and a fun way to work out which film to watch with your friends
using the IMDB API. I was struck with how polished these projects
looked - fleshed out and beautiful.
</p>
</div>
</div>

<div id="outline-container-org33770c1" class="outline-2">
<h2 id="day-0">Day 0</h2>
<div class="outline-text-2" id="text-day-0">
<p>
First day. Start early and meet everyone. We all introduce each other
with interesting facts (much antipathy towards mushrooms), and the
Makers team do the same. Many of the names have sinces wondered off into
the sunset of my memory, but we're mainly being taught by
<a href="https://github.com/ecomba">Enrique</a>,
<a href="https://github.com/Stephen_lloyd">Stephen</a> and
<a href="https://github.com/roidriscoll">Roi</a> who's the TA (and who has <i>only
just finished the course</i> &#x2013; amazing) at the moment.
</p>

<p>
Our first challenge is to get set up and create a web app that generates
motivational posters from a Google image search. In one day. And,
amazingly, we all manage it. There's some pretty hairy moments to begin
with (imagine a room full of people all downloading the same software at
the same time using the same WiFi). But it happens.
</p>

<p>
I asked Enrique whether I should stick with the Linux laptop or try out
one of the MacBook Pros the Makers kindly offer for students to borrow
during the course. He used to use Linux himself but was converted in a
single day having borrowed a friend's. So I thought I'd try it out&#x2026;
</p>

<p>
I'm typing this on the Mac. Enough said.
</p>
</div>
</div>

<div id="outline-container-org96a70bc" class="outline-2">
<h2 id="day-1">Day 1</h2>
<div class="outline-text-2" id="text-day-1">
<p>
And it's straight into the first project - creating a student directory
for our cohort using Ruby and the command line. We're all at different
levels of experience at the moment - I'd describe myself as confident
with a CLI and Ruby having prepared (over-prepared?) extensively for the
last few&#x2026; months (I was just looking at GitHub and I've been pushing
there since February. Time flies!). The exercises are kept as a text
document on GitHub with links to pills on how to use Git and the Unix
command line. I pair with <a href="https://github.com/flickoid">Chris</a> who I'd
met on the open day. We have a great time getting through the work.
</p>
</div>
</div>

<div id="outline-container-orge47f549" class="outline-2">
<h2 id="day-2">Day 2</h2>
<div class="outline-text-2" id="text-day-2">
<p>
There are lectures throughout the day &#x2013; one in the morning and one in
the afternoon &#x2013; with additional talks during the day from other people
coming in to the building. Today was the turn of the technology heads
from <a href="http://www.typematrix.com/">Compare the Market.com</a> to talk to
us. It was interesting to hear them talk about how their technology and
culture had chnged over the last ten years, especially the shift to an
Agile culture. The more I hear and read about Agile the more excited it
makes me feel about working as a programmer - not just writing code but
having a wide-ranging input into what is being developed. It was also
cool to hear the coders described as being, essentially,
'customer-facing' &#x2013; that they were the closest staff memebers to actual
customer experience and so were expectd to both feedback as such,
generate ideas, and importantly care for the web app all the time, with
flexible working hours. I'd never thought of it that way, but in a world
where a company's only contact with their customers is through the web,
coders become the customer facing members of staff with all th
responsibility that entails.
</p>

<p>
We also get talks from the cohort above us &#x2013; the seniors. It's great
seeing these guys wanting to pass on the knowledge, the hints, the
tricks &#x2013; everything they've picked up in the last few weeks, on to us.
This tradition started spontaneously but fits so well with the ethos of
Makers. I'm looking forward to maybe doing one myself.
</p>

<p>
Erique talks about his keyboard layout for five minutes today &#x2013; well
maybe more than five minutes. Not only is he a Vi(m) weezard but he also
uses (1) COLMAC layout on both (2) the MacBook if he's out and about or
(3) the <a href="http://www.typematrix.com/">scariest keyboard in the world</a>
if he's wanting to type a lot.
</p>

<p>
Vim is enough for me, although Andy in our cohort borrows the keyboard
for a day and starts to learn Colemak. Brave.
</p>
</div>
</div>

<div id="outline-container-org3a80ad3" class="outline-2">
<h2 id="day-3">Day 3</h2>
<div class="outline-text-2" id="text-day-3">
<p>
I'm ahead. A few of us are ahead. In fact a few of us are wondering why
we're not useing OOP methods to write this code because, frankly, it's
looking a bit messy right now. My code is particularly awful until [Ben]
and I chat about it and he suggests refactoring to make more but shorter
methods with much better names. I kick myself &#x2013; I knew that! &#x2013; but bad
habits die hard.
</p>

<p>
But I don't mind being ahead &#x2013; I'm not straining at the bit. At the
beginning Enrique and Stephen said that we're as strong as our weakest
member, and that we should never leave a man behind. I think of my
cohort as a team, and I'm responsible. So I float around answering
questions and trying to help out where I can. I had a great moment in
the morning with <a href="https://github.com/ruthearle">Ruth</a> in which we both
learned new things about symbols, and I've enjoyed speaking to
<a href="https://github.com/silver-io">Javier</a> about &#x2013; well lots of things.
We have pretty similar motivations for getting in to Makers; we both
want a better, more fulfilling work life. I'm more sure now that I've
found it.
</p>

<p>
And I like talking about code! I hadn't realised that this is what I was
missing so much. Talking and working everyday in Ruby has increased my
confidence and my knowledge. Helping others helps yourself, teachers
learn more from their students. The last time I felt this way was at
University, and it's a great feeling.
</p>

<p>
Stephen and Roi introduce the finer points of using Git today in a
fantastic lecture. I've found myself getting tangled up in my own
branches so much that it was good to have things explained carefully and
accurately, and with a demonstration as well. I learned a lot.
</p>
</div>
</div>

<div id="outline-container-org7ab50e9" class="outline-2">
<h2 id="day-4">Day 4</h2>
<div class="outline-text-2" id="text-day-4">
<p>
Test Driven Developmet (TDD) drops with a bang today as Enrique and
Stephen introduce <a href="http://rspec.info/">RSpec</a> and a completely
different way of writing code. Really. I'd heard of TDD, I'd heard
people moan about or praise it &#x2013; but I'd not seen it until Enrique
started hammering away at Vim on the projector to create
<a href="https://ithub.com/gypsydave5/fizzbuzz">FizzBuzz</a> by first defining
what the code ought to be doing and then making it do it, then expanding
the spec', making the code fail, making the code pass, expanding the
spec'&#x2026; repeat, rinse&#x2026; it was amazing. He hooked it up with the idea
of both the scientific method and a good doctor washing their hands. And
it made sense &#x2013; declaring where you're going and then getting there,
rather than just blindly, messily, hacking around until something drops
out.
</p>

<p>
We should be able to repeat these steps, write a FizzBuzz implementation
using TDD, in less that five minutes. My first try was 33. I think it's
a great way to practice.
</p>

<p>
We also had a talk by <a href="https://twitter.com/rubenkostucki">Reuben</a> and
Sam who both work to get Makers students placements when they graduate.
It was a really good idea to have them introduce themselves and talk
about what we could do to make their lives (and so our lives) easier.
Which boiled down to:
</p>

<ol class="org-ol">
<li>Pair. A Lot.</li>
<li>Always TDD. Always.</li>
<li>Push often and always to GitHub.</li>
<li>Don't worry about the job. Do the course.</li>
</ol>

<p>
Which was a load off everyone's mind.
</p>

<p>
The Friday Challenge was CLI based, so I waltzed blithly through (and
had a really good time remembering some fun commands). Excitingly it was
marked with an RSpec file which checked whether your changes 'passed' &#x2013;
literally. Unfortunately the file was written in an earlier version of
the RSpec syntax and so the tests failed even when they should've
passed. So <a href="https://github.com/spike01">Spike</a> and I got to do our own
Friday Challenge and fix the RSpec file. I say challenge &#x2013; we made more
of a mountain out of that molehill than maybe we should've, but we
learned a lot about octal, binary, Unix permissions and bitwise
operators on the way, as well as Rspec.
</p>

<p>
Mulling over what was going on with <code>permissions &amp; 0000100</code> while
leaning on a beanbag, talking the problem through with a new friend
while drinking a cold beer at six-thirty on a Friday, I felt happier
than I have in years. In the last week I've literally eaten and slept
code (I dreamed in Ruby one night. It was odd) almost every hour of the
day. And I love it.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2014-08-09-makers-day-five.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[One week to go]]></title>
  <description><![CDATA[
<p>
For those who know me, or have been following my
<a href="https://twitter.com/gypsydave5">Twitter feed</a>, you may know that I'll
be starting at <a href="http://www.makersacademy.com/">Makers Academy</a> on the
4th of August. That's in a week's time. Part of the reason I've been
keeping this blog is to monitor my progress in preparing for that day.
</p>

<p>
So, why Makers?
</p>

<p>
My New Year's resolution was to change my life (aren't they always?). I
didn't want to spend the next thirty-plus years working in a career I
was adequately suited for (marketing) and being the guy in the
department who got to do all the maths-y/computery stuff while not being
at all enthusiastic about&#x2026; well, about everything else he was doing.
At the time I was having a terrible time in my job
</p>

<p>
I sought advice from everyone I knew, and talked incessantly about
software development with anyone who would listen. I'm blessed with
good, patient friends who were happy to put up with this, a number of
who work in the industry already. They've steered me and mentored me
over the last few months (specifically
[@shapeshed]<a href="https://twitter.com/shapeshed">george</a> and
[@asbrookes]<a href="https://twitter.com/asbrookes">andrew</a>), shown me where
<a href="http://www.codecademy.com/">codecademy</a> was, and generally answered
any of my questions. I recognised that this career change was going to
work - the more I learned the more I wanted to learn, and the more there
was to learn the more a learned (a happy virtuous circle). An interest
in tech and programming became a passion (my partner can attest to
this - barely an evening without being glued to the laptop, tapping
away). I became confident in my decision.
</p>

<p>
I mentioned my intentions to my friend Mike. "Oh," he said, "sort of
like what <a href="https://twitter.com/jamesjoshuahill">Josh</a> did at that
Maker's place?" So I caught up with Josh who raved about his experience,
the atmosphere and the amount he learned. I showed the course to my
other dev friends. They hadn't heard of Makers, but were generally
impressed by the programme. One expressed concern about the Ruby/Rails
focus, in a world where [NodeJS][Node] was becoming the next big thing.
They suggested I ask the question.
</p>

<p>
So I wrote a short email to Makers, saying - 'hey, why Rails?' And I got
a well thought out, well written, extensive email in reply, arguing
that, yes, Node was important, but that Makers teachers how to be a
developer in a culture/method sense of that word, and that Rails was
just a good platform to start from - not the be all and end all.
</p>

<p>
Cost was of course an issue - nobody spends the best part of ¬£10,000
pounds on a whim. And if I could achieve the same results just through
educating myself the Makers experience would be pointless. But I know a
few things about myself:
</p>

<ol class="org-ol">
<li>I <i>like</i> difficult things</li>
<li>I work in intense bursts</li>
<li>I work best under pressure</li>
<li>I prefer to be in a gang working towards the same goal</li>
</ol>

<p>
I know that I'd work best with a goal, in an immersive environment,
surrounded by bloody clever people all working towards the same thing
and supporting each other. It's what saw me through University. I took
particular note of <a href="http://www.startuprob.com/learn-to-code/">this
article</a> by one of the co-founders of Makers,
<a href="https://twitter.com/startuprob">Rob Johnson</a>. I also knew that I
couldn't hang around, that if this was the right decision then it was
the right decision <i>now</i>, and it had to happen as quickly and
efficiently as possible.
</p>

<p>
I looked at other other bootcamps, mainly
<a href="https://generalassemb.ly/london">General Assembly</a>, who definitely
have scale and experience on their side. But I was sold on Makers after
spending some time with the other finalists of the
<a href="http://blog.skimlinks.com/2014/03/12/skimlinkstomakers-competition-introducing-the-finalists/">#SkimlinksToMakers</a>
competition during the final interviews, and at the Makers open days.
Meeting the instructors (I especially remember talking with
<a href="https://twitter.com/rubenkostucki">Ruben</a> - and a slightly confusing
attempt to talk with passion about <i>Person of Interest</i>, the Turing
test, chess and some other things. Enthusiastic, yes. Coherent&#x2026;?). I
also read the (numerous) blogs of former students - I found
<a href="http://davewood.me/blog/2014/01/18/makers-academy-rewound/">Dave
Wood</a>'s description pretty exciting and useful, and of course
<a href="http://jamesjoshuahill.tumblr.com/">Josh</a>'s. I also had a
forty-minute phone conversation with
<a href="https://twitter.com/JordanPoulton">Jordan</a> (he sent the great email),
who again answered all my questions in an open, non-salesy way. He'd
<a href="http://www.jordanpoulton.com/blog/makers-academy-12-hours-to-lift-off/">done
the course himself</a>, which gave a unique perspective, and spent at
least ten minutes trying to put me off.
</p>

<p>
He failed. I applied. The interview went well (Jordan again - felt like
he was stalking me&#x2026;), although it was far from a push over (it's
amazing how difficult basic maths when someone's looking over your
shoulder - and a US keyboard layout threw me for at least a minute&#x2026;).
But I left wanting to get in more than ever, and did a (pretty big)
whoop of joy when I received the email telling me that I had been
accepted.
</p>

<p>
So here I am, feeling pretty ready. Nervous, and excited. I've studied
some of the basics as hard as I could, know more about Ruby than I did
six months ago, and eager for more. I'm really looking forward to
learning something new everyday. First step is meeting the rest of my
cohort this Friday (exciting!). I'll be blogging as I go along (probably
nowhere near as extensively as this), just to keep a record on how I'm
doing.
</p>

<p>
But, so far, it looks like this is my best New Year's resolution. Ever.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-07-28-one-week.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Many Enumerable Returns]]></title>
  <description><![CDATA[
<p>
As threatened then, here's the followup to my
<a href="posts/2014/7/12/destructuring-in-a-method-block/">last post</a> on
the <code>#Enumerables</code> section from <a href="https://rubymonk.com/">Ruby Monk</a>,
how I felt like a bit of an idiot for a few hours, and what I learned
from that.
</p>

<p>
tl;dr - enumerable blocks aren't magic; <code>yield</code> is magic.
</p>

<p>
This question is a little further along from the last, and was framed
so:
</p>

<blockquote>
<p>
Try implementing a method called occurrences that accepts a string
argument and uses inject to build a Hash. The keys of this hash should
be unique words from that string. The value of those keys should be
the number of times this word appears in that string.
</p>
</blockquote>

<p>
So far so, so good. So I wrote this:
</p>

<div class="org-src-container">
<pre class="src src-ruby"><span style="color: #333333; font-weight: bold;">def</span> <span style="color: #333333; font-weight: bold;">occurrences</span>(str)
  str.scan(<span style="color: #666666;">/\w+/</span>).inject(<span style="color: #333333; font-weight: bold; font-style: italic;">Hash</span>.new(0)) <span style="color: #333333; font-weight: bold;">do</span> |hashy, i|
    hashy[i.downcase] += 1
  <span style="color: #333333; font-weight: bold;">end</span>
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
Which spat out:
</p>

<blockquote>
<p>
<code>TypeError can't convert String into Integer</code>
</p>
</blockquote>

<p>
And left me confused for a good few minutes. OK, getting on for a
quarter of an hour. What was going on? - what I'd written was very
similar to the example above:
</p>

<div class="org-src-container">
<pre class="src src-ruby">[4, 8, 15, 16, 23, 42].inject({}) { |a, i| a.update(i =&gt; i) }
</pre>
</div>

<p>
So I caved and looked at the answer:
</p>

<div class="org-src-container">
<pre class="src src-ruby"><span style="color: #333333; font-weight: bold;">def</span> <span style="color: #333333; font-weight: bold;">occurrences</span>(str)
    str.scan(<span style="color: #666666;">/\w+/</span>).inject(<span style="color: #333333; font-weight: bold; font-style: italic;">Hash</span>.new(0)) <span style="color: #333333; font-weight: bold;">do</span> |build, word|
        build[word.downcase] +=1
        build
    <span style="color: #333333; font-weight: bold;">end</span>
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
Which left me none the wiser. Why was the block re-iterating the
accumulator function at the end? To test this I played around with
<code>p</code>-ing the lines of the block&#x2026; and discovered something interesting.
Namely,
</p>

<div class="org-src-container">
<pre class="src src-ruby">a.update(i =&gt; i) <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; a</span>
</pre>
</div>

<div id="outline-container-org72c0047" class="outline-2">
<h2 id="but">But&#x2026;</h2>
<div class="outline-text-2" id="text-but">
<div class="org-src-container">
<pre class="src src-ruby">build[word.downcase] +=1 <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; build[word.downcase], the new value of that key</span>
</pre>
</div>

<p>
The block <i>needs to return the accumulator</i> - the first example is just
lucky that it does so already!
</p>

<p>
The only reason the accumulator in an <code>Enumerable#inject</code> accumulates is
that <i>it's returned from the block on each iteration</i>. In other words,
somewhere in the definition of <code>#inject</code> for each class that can be made
enumerable, the method =yield=s to the block, and then keeps the value
returned to be passed in again as the new accumulator argument.
</p>

<p>
I'd previously thought of <code>#inject</code> as working by <i>magic</i>, whereas in
fact it was working by a method I could probably write myself given
enough time. Something like this&#x2026;
</p>

<div class="org-src-container">
<pre class="src src-ruby">bob = [1,2,3,4,5,6]

<span style="color: #333333; font-weight: bold;">def</span> bob.<span style="color: #333333; font-weight: bold;">inject</span>(default = <span style="color: #333333; font-weight: bold;">nil</span>)
  accumulator = default || <span style="color: #333333; font-weight: bold;">self</span>[0]
  <span style="color: #333333; font-weight: bold;">if</span> default
    <span style="color: #333333; font-weight: bold;">self</span>.each <span style="color: #333333; font-weight: bold;">do</span> |element|
      accumulator = <span style="color: #333333; font-weight: bold;">yield</span>(accumulator, element)
    <span style="color: #333333; font-weight: bold;">end</span>
  <span style="color: #333333; font-weight: bold;">else</span>
    <span style="color: #333333; font-weight: bold;">self</span>.drop(1).each <span style="color: #333333; font-weight: bold;">do</span> |element|
      accumulator = <span style="color: #333333; font-weight: bold;">yield</span>(accumulator, element)
    <span style="color: #333333; font-weight: bold;">end</span>
  <span style="color: #333333; font-weight: bold;">end</span>
  <span style="color: #333333; font-weight: bold;">puts</span> <span style="color: #666666;">"all adds up to: "</span>   <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">just to prove it's this method being</span>
                            <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">called, not the superclasses...</span>
  <span style="color: #333333; font-weight: bold;">p</span> accumulator
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
Which gives us such fun as:
</p>

<div class="org-src-container">
<pre class="src src-ruby">bob.inject() {|a,e| a += e}
<span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; all adds up to: 21</span>
bob.inject(10) {|a,e| a += e}
<span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; all adds up to: 31</span>
bob.inject([]) {|a,e| a &lt;&lt; e**2}
<span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; all adds up to: [1, 4, 9, 16, 25, 36]</span>
bob.inject({}) {|a,e| a[e] = <span style="color: #666666;">"x"</span>*e; a}
<span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; {5=&gt;"xxxxx", 6=&gt;"xxxxxx", 1=&gt;"x", 2=&gt;"xx", 3=&gt;"xxx", 4=&gt;"xxxx"}</span>
</pre>
</div>

<p>
I relied on <code>#each</code> here, but we could easily write an <code>each</code> method
using a <code>for... in...</code> loop or similar. The genius is in <code>yield</code>, which
is the <i>real magic</i> that's going on here.
</p>

<p>
<a href="https://rubymonk.com/">Ruby Monk</a> has more about the
<a href="http://rubymonk.com/learning/books/1/chapters/34-lambdas-and-blocks-in-ruby/lessons/78-blocks-in-ruby">magic
of yield</a>, and why it's weird in a language that professes that
everything is an object. Like a lot in Ruby, I discovered a small thing
didn't work, patiently played with it until I found out why, and then
'worked' that small new piece of knowledge to give me greater insight
into what was going on. I'm finding this to be the most satisfying
method to learn by, both because it makes me feel like I'm learning to a
deeper degree than I would by just reading the answers out of a book,
and in addition, when the books do cover the subject, I can better apply
what's written there to what I've seen in action.
</p>
</div>

<div id="outline-container-org96232a3" class="outline-4">
<h4 id="postscipt---27714"><i>postscipt</i> - 27/714</h4>
<div class="outline-text-4" id="text-postscipt---27714">
<p>
Of course, David Black covers the same ground, but better (gets <code>each</code>
off the ground using a <code>for</code> loop), in chapter 6 of
<a href="http://www.manning.com/black2/"><i>The Well Grounded Rubyist</i></a>. Love
that book.
</p>
</div>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2014-07-18-ruby_enumerable_returns.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Destructuring in a Method Block]]></title>
  <description><![CDATA[
<p>
I went from genius to idiot - very rapidly - when looking at
Enumerable#map and #inject in <a href="https://rubymonk.com/">Ruby Monk</a>, a
free resource to help learn ruby that I've found really useful. Let's
start with 'genius' (although not really genius, more wrong but lucky).
</p>

<p>
The
<a href="https://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/44-collections/lessons/98-iterate-filtrate-and-transform#solution4313">question</a>
was as follows:
</p>

<blockquote>
<p>
Exploit the fact that map always returns an array: write a method
<code>hash_keys</code> that accepts a hash and maps over it to return all the
keys in a linear Array.
</p>
</blockquote>

<p>
Exciting, right?
</p>

<p>
The solution that RM gave was this:
</p>

<div class="org-src-container">
<pre class="src src-ruby"><span style="color: #333333; font-weight: bold;">def</span> <span style="color: #333333; font-weight: bold;">hash_keys</span>(hash)
    hash.map { |pair| pair.first }
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
But I went for:
</p>

<div class="org-src-container">
<pre class="src src-ruby"><span style="color: #333333; font-weight: bold;">def</span> <span style="color: #333333; font-weight: bold;">hash_keys</span>(hash)
    hash.map {|key,value| key}
<span style="color: #333333; font-weight: bold;">end</span>
</pre>
</div>

<p>
Not much difference, but enough. I had become confused when I entered my
code, thinking more about the <code>each_with_index</code> method mentioned in the
same page above. I was forgetting that <code>#map</code> would be sending back a
single value, an array of the key-value pair. Ruby Monk's solution used
that fact to use the method <code>#first</code> on the array, to get the first
element (the key) out.
</p>

<p>
But, by chance, my solution worked - it split the array by telling the
block for map that it would be getting two arguments - checking with the
good people on the #ruby channel on IRC (a chap called bannisterfiend to
be precise), this is
<a href="http://tony.pitluga.com/2011/08/08/destructuring-with-ruby.html"><i>destructuring</i></a>,
binding a set of values to a corresponding set of values that you can
normally bind to a single variable (that's the definition as given in
<a href="http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node252.html">Common
Lisp</a>, but makes sense here).
</p>

<p>
What we're seeing is this:
</p>

<div class="org-src-container">
<pre class="src src-ruby">x, y = [1,2]
x <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; 1</span>
y <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; 2</span>
</pre>
</div>

<p>
But done as a loop for all the arrays pulled out of the hash by <code>#map</code>.
Tony Pitluga sings the praises of destructuring block arguments (which
is what this is) in his longer article on
<a href="http://tony.pitluga.com/2011/08/08/destructuring-with-ruby.html">destructuring
in Ruby</a>.
</p>

<p>
There's an improvement in the semantics of the method (would you rather
have <code>key</code> or <code>pair.first</code>?) and a saving of writing/time in any later
work you might want to do on the values. Of course, we wouldn't want to
do this to longer arrays - too many elements to bind to values.
</p>

<p>
Unless we used the 'unarray' or, 'star' or (best name evar)
<a href="http://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/">splat
operator</a> to collect some of the other elements.
</p>

<p>
Consider:
</p>

<div class="org-src-container">
<pre class="src src-ruby">x, *y = [1,2,3,4,5,6j
x <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; 1</span>
y <span style="color: #d9d9d9;"># </span><span style="color: #7f7f7f;">=&gt; [2,3,4,5,6]</span>
</pre>
</div>

<p>
There's a lot more on the magic of the splat in the second edition of
<a href="http://www.manning.com/black2/">The Well Rounded Rubyist</a> which has
just been published (and which I'm enjoying immensely).
</p>

<p>
OK, I'll write up my other mistake (the one that broke the <code>#map</code> block)
later in the week.
</p>

<p>
PS - noticed when getting links for this post that Ruby 2.0 introduces
the double-splat operator for
<a href="http://stackoverflow.com/questions/18289152/what-does-double-splat-operators-do-in-ruby">turning
keyword-value pairs in argument lists into a hash</a>. Which is also
exciting.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-07-12-destructuring.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Windows Silver Surfer]]></title>
  <description><![CDATA[
<p>
Adding to my list of <a href="file:///posts/2014/7/4/surviving-windows/">ways to fix
the Windows experience</a>, I have to pay due respect to
<a href="http://blog.kowalczyk.info/">Krystoff Kowalcyzk</a>, a developer who has
ported
<a href="http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/">Ag
(aka The Silver Surfer)</a> over to Windows. He's also authored a really
elegant (and for elegant please read lightweight and customizable) PDF
viewer
<a href="http://blog.kowalczyk.info/software/sumatrapdf/free-pdf-reader.html">SumatraPDF</a>.
Both of these have improved my life today.
</p>

<p>
I've been looking at alternatives to Adobe Reader on the Ubuntu box as
well - currently I'm enjoying the simplicity of
<a href="http://www.mupdf.com/">muPDF</a>, but there are many other options out
there.
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-07-07-ag_windows.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Surviving Windows]]></title>
  <description><![CDATA[
<p>
I've worked within Windows and Microsoft OSs for&#x2026; well, most of my
computing life now I think about it. I'm pretty sure that most people
are the same. And like most people I've always had my little moans about
it. Too many to mention.
</p>

<p>
This has come to a head since I [switched to Linux][LinuxSwitch] a few
months ago. Not that Linux (Ubuntu in my case) doesn't have it's own
long list of problems, but they all feel more like problems I should be
fixing myself - rather than things I'll just moan about and put up with.
Yes, Ubuntu (and the Unity desktop specfically) has 'spoiled' me. I'd
rather be working in that environment than any earlier version of
Windows. Woo-hoo. Hear the whoop from camp Linux, joy shall be in heaven
over one sinner that repenteth, etc etc usw.
</p>

<p>
But there's still so much of my life that has to be done in Windows.
Work spreadsheet has VBA macros? Work machine in Vista?
<a href="https://launchpad.net/pipelight">Netflix requires Silverlight</a>? It's
inevitable.
</p>

<p>
So instead of moaning I've been trying to fix Windows to make it usable
like I want it to be. And I think I've found some good options. The
first thing to note is that I've been so used to putting up with Windows
that I was under the impression that there was very little that could be
done to it. Lay that thought to rest - there's hundreds of hacks,
options, fixes, and bits of software we can use to make Window's a
happier place to be. Or, if not actively happy, then at least
survivable&#x2026;
</p>

<div id="outline-container-orgc62ea5d" class="outline-2">
<h2 id="winsplit-revolution">Winsplit Revolution</h2>
<div class="outline-text-2" id="text-winsplit-revolution">
<p>
OK, not the greatest name. What I missed most about Ubuntu when stuck on
Vista was the way I could throw windows around the desktop using the
numpad. This feauture is neatly emulated with
<a href="http://download.cnet.com/WinSplit-Revolution/3000-2072_4-10971915.html">Winsplit
Revolution</a>, which is small and, well, works. You can customize the
shortcuts too. (Looks like the original website is no longer around so
I've linked to the CNET page).
</p>
</div>
</div>

<div id="outline-container-orgf2506db" class="outline-2">
<h2 id="put-the-taskbar-on-the-side">Put the taskbar on the side</h2>
<div class="outline-text-2" id="text-put-the-taskbar-on-the-side">
<p>
Oh this sounds dumb I know, but nobody even thinks of doing it on
Windows because it's a change. Totally inspired by the Unity set up, it
just makes more sense. If most of what I'm doing involves reading down a
page on the screen - code, text, etc - then I really want optimize the
vertical space on the screen. So slam the taskbar to the side and get
yourself a couple of centimeters for free. If you were going to try one
new thing this week make it this.
</p>
</div>
</div>

<div id="outline-container-orgf8a849a" class="outline-2">
<h2 id="gvim">GVim</h2>
<div class="outline-text-2" id="text-gvim">
<p>
All that Vim goodness - <a href="http://www.vim.org/download.php#pc">now on
your Windows</a>. And you can use the same config files. And you can set
the config depending on the environment (Windows, Linux, OSX). And you
could save all those files onto Dropbox, make symlinks to them&#x2026; OK -
too far. But get GVim for Windows.
</p>
</div>
</div>

<div id="outline-container-orgf0b9deb" class="outline-2">
<h2 id="autohotkey">Autohotkey</h2>
<div class="outline-text-2" id="text-autohotkey">
<p>
I'll write something about the what effect of removing the caps lock
button from my keyboard has been (no, not physically) at a later date.
But for fun keyboard hacks like this and more I've been enjoying
<a href="http://www.autohotkey.com/">Autohotkey</a>, which has its own simple
scripting language to allow you to remap and rewite your keyboard to
your hearts content.
</p>
</div>
</div>

<div id="outline-container-orge906d56" class="outline-2">
<h2 id="get-gnuy">Get GNUy</h2>
<div class="outline-text-2" id="text-get-gnuy">
<p>
I've tried <a href="https://www.cygwin.com/">Cygwin</a> before - part of working
using a Linux only font tool. But I found it&#x2026; big. Powerful, yes - but
big. So big I didn't use it. Second time around I've been using
<a href="https://github.com/bmatzelle/gow/wiki">Gow</a> - which brings all the
*nix-y command line goodness to your <code>cmd</code> shell in Windows.
</p>
</div>
</div>

<div id="outline-container-org308a102" class="outline-2">
<h2 id="chocolatey">Chocolatey</h2>
<div class="outline-text-2" id="text-chocolatey">
<p>
Missing <code>apt-get</code> or similar package management utilities on Windows?
<a href="http://chocolatey.org/">Chocolatey</a> to the rescue. Install Git!
Install Node! Install everything listed above and more, and get them all
updated from the command line. It's brilliant.
</p>

<p>
Ah, that's it for now. All I'd finish off by saying is that the only
thing holding me back from improving my experience of Windows was&#x2026;
ignorance. And indolence. GNU/Linux makes you change things to fit the
way you work, and as soon as you've learned how to do that it's easier
to avoide complacence with other OSes. . A good lesson.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>/2014-07-04-surviving_windows.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Rails for Zombies]]></title>
  <description><![CDATA[
<p>
Just been looking at <a href="http://railsforzombies.org/">Rails for Zombies</a>
again in preparation for my forthcoming interview with
<a href="http://railsforzombies.org/">Makers Academy</a> (because it's never too
late and you can always do more).
</p>

<p>
It strikes me what a difference a few months of Ruby and a course
redesign makes. Now when faced with the first set of exercises I wasn't,
as before, struggling to keep up and make sense. Instead I was
interrogating what was going on - "Wait, <code>Zombie.find(1)</code> - what's it
finding? Capital Z&#x2026; is it a class? Let's find out
<code>Zombie.class =&gt; Class</code> - cool, so the tables are represented by
different classes in Ruby&#x2026; what sort of methods does a Zombie have
anyway? <code>Zombie.find(1).methods</code>&#x2026;" and so on.
</p>

<p>
This was great - using the techniques I'd picked up from Ruby Monk and
Ruby Koans to work out for myself what was going on (and not have an
instructor tell me). By the end of the course (and the first part of the
sequel) I had suddenly gained an insight not only into what Rails can
do, but how it does it, and why it does it the way it does. I could also
see what MVC was, not just as a theory but literally in the code - this
is the controller, this is a model.
</p>

<p>
The guys at <a href="https://www.codeschool.com/">Codeschool</a> have changed the
course since my first attempt at it &#x2014; they describe it as Rails for
Zombies: Redux &#x2014; and it's a huge improvement. Definitely worth a look.
And it's FREE!
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-05-01-rails-for-zombies.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Late in the day Linux]]></title>
  <description><![CDATA[
<p>
Late in the day yesterday I finally decided that I wanted &#x2014; no, I
needed &#x2014; to install Linux. There are a few reasons for this:
</p>

<ul class="org-ul">
<li>I can't afford a Mac.</li>
<li>I need to familiarize myself with the *nix CLI.</li>
<li>I'm tired of the grinding noises that Windows 7 makes.</li>
<li>Nobody will buy me a Mac.</li>
<li>I'm also sick of every damn tutorial I read seeming to be geared up or
an OS X or Linux machine.</li>
<li>Excitement and adventure, fortune and glory &#x2014; as always.</li>
<li>And the lack of Mac.</li>
<li>(Seriously, I'm beginning to suspect that Mac envy is a disease&#x2026; I'm
not proud of myself)</li>
</ul>

<p>
The last time I tried to do this was back in around 2005 or 6, when I
was dipping my toes into the open source waters to see what could
happen. And I was relatively underwhelmed. Not only did I have no idea
what I was doing, but there didn't seem to be much to do. I'd installed
watever version of Ubuntu was around on a partition on my old whatever
version of Windows PC. I was impressed that it worked, that it all came
together - but then was left struggling over issues of compatibility of
certain bits of hardware - I remember something to do with the WiFi&#x2026;
and then at the end of it all I still had something which wasn't quite
as good as XP, and I had no reason to stay around.
</p>

<p>
Well, see above for reasons to stay around this time. And how's the
experience second time around? In a word: flawless. I went with
<a href="http://www.ubuntu.com/">Ubuntu</a>, threw it onto partition and waited
to see what happened. The installation compared favourably with every
Windows installation I've ever done (a few by now), it reached out to my
home Wifi to update itself, it recommended some packages to install.
Bliss. The interface is prettier that I could ever have imagined.
</p>

<p>
And the other difference from ten years or so ago: applications. There
are actual, genuine, real things for me to use. not just web apps &#x2014;
threw Chrome on pretty sharpish though and everything I have set up
there synchronized neatly &#x2014; but the new versions of LibreOffice look
to be more than enough for what I'll ever need, Dropbox dropped in well
&#x2014; heck, there's even Steam. Steam! It was all I could do not play
Super Hexagon all afternoon.
</p>

<p>
Finally, the juiciness of all that fun developer-oriented functionality
that comes out of the box (or just within reach). The command line just
pops up, things run from the command line &#x2014; it's much easier to get my
head around.
</p>

<p>
So if you're a little scared of Linux, or perhaps are a little twice-shy
like I was, don't be. It's a different, and beautiful, beast out there.
</p>

<p>
Now, on to install Rails 4.0.whatever it is right now!
</p>
<div class="taglist"></div>]]></description>
  <link>/2014-04-29-late-in-the-day-linux.md.html</link>
  <pubDate>Wed, 16 Sep 2020 23:57:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Lambda Calculus 1 - Syntax]]></title>
  <description><![CDATA[
<p>
The word 'lambda' comes up more and more the longer you work as a
programmer. There it is as a keyword in Python for an anonymous
function. Same again in Scheme. Oh look, there it is in Ruby. Look at
the logos for Racket, Clojure, MIT. Lambdas everywhere. The
interest/obsession goes back to the mathematical roots of Lisp,
specifically Alonzo Church's <i>lambda calculus</i>.
</p>

<div id="outline-container-org00a232a" class="outline-2">
<h2 id="why">Why?</h2>
<div class="outline-text-2" id="text-why">
<p>
Church was researching the foundations of mathematics - particularly
computation. The notation he came up with is a way of expressing any
computation at all - if a computer can do it, it can be written in the
syntax of the lambda calculus. But, interestingly for us, it is not
concerned about <i>how</i> he computer does it; rather it just has some
simple rules about <i>what</i> a computer can do. It is, if you like, a very
simple declarative programming language.
</p>
</div>
</div>

<div id="outline-container-org97dbd07" class="outline-2">
<h2 id="syntax">Syntax</h2>
<div class="outline-text-2" id="text-syntax">
<p>
The lambda calculus gets its name from its use of the Greek letter
lambda - \(\lambda\) to represent a function that takes a single argument.
</p>

<p>
After the \(\lambda\) comes the name that that single argument is bound
to - say \(x\).
</p>

<p>
And after that we write a \(.\) to say that we're inside the 'body' of the
function.
</p>

<p>
The \(x\) is a bound variable - it stands for some value that the function
can be applied to.
</p>

<p>
And to apply a value to a function, you call it by putting them next to
each other (maybe with some brackets to make it clearer what's the value
and what's the body).
</p>

<p>
That's it. That's everything in the lambda calculus - it's a syntax for
writing about functions of one argument.
</p>

<p>
So where in JavaScript we have:
</p>

<div class="org-src-container">
<pre class="src src-javascript">x =&gt; x + 1
</pre>
</div>

<p>
and in Scheme we have
</p>

<div class="org-src-container">
<pre class="src src-scheme"><span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #0287c8;">(</span>x<span style="color: #0287c8;">)</span> <span style="color: #0287c8;">(</span>+ x 1<span style="color: #0287c8;">)</span><span style="color: #40883f;">)</span>
</pre>
</div>

<p>
in the lambda calculus syntax we have:
</p>

<p>
\[ \lambda x.x + 1 \]
</p>
</div>
</div>

<div id="outline-container-org0f8d1f6" class="outline-2">
<h2 id="only-one-argument">Only one argument?</h2>
<div class="outline-text-2" id="text-only-one-argument">
<p>
So you might see some limitations here. Only one argument, you may say,
what if I need another one? Happily we can just return another function
to bind a new argument. Hooray - everything is <a href="file:///posts/2015/2/19/%28not-quite%29-currying-in-javascript/">curryed</a>.
</p>

<p>
So where in JavaScript:
</p>

<div class="org-src-container">
<pre class="src src-javascript">x =&gt; y =&gt; x + y
</pre>
</div>

<p>
and in Scheme:
</p>

<div class="org-src-container">
<pre class="src src-scheme"><span style="color: #40883f;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #0287c8;">(</span>x<span style="color: #0287c8;">)</span> <span style="color: #0287c8;">(</span><span style="color: #333333; font-weight: bold;">lambda</span> <span style="color: #b85c57;">(</span>y<span style="color: #b85c57;">)</span> <span style="color: #b85c57;">(</span>+ x y<span style="color: #b85c57;">)</span><span style="color: #0287c8;">)</span><span style="color: #40883f;">)</span>
</pre>
</div>

<p>
so in the lambda calculus we have:
</p>

<p>
\[ \lambda x.\lambda y.x + y \]
</p>

<p>
Although usually<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> we'd just write:
</p>

<p>
\[ \lambda xy.x + y \]
</p>

<p>
But we would of course remember that, if the function had only one
argument applied to it, it would return a function that expected the
next argument.
</p>
</div>
</div>

<div id="outline-container-org8b5fea0" class="outline-2">
<h2 id="alpha-conversion-beta-reduction">&alpha;-conversion, &beta;-reduction</h2>
<div class="outline-text-2" id="text-alpha-conversion-beta-reduction">
<p>
These terms do absolutely nothing to dispell the feeling that the lambda
calculus is a bit elitist. Look, even more Greek letters - it must be
complicated and clever because just writing about it requires me to know
how to say \(\alpha\)!
</p>

<p>
Really though, these are just big words for 'substitution' and
'application', the basics of which you probably picked up in high school
algebra.
</p>

<p>
'Œ±-conversion' (alpha-conversion) just means that we can change the name
of a bound variable in a Lambda expression. So if we've got:
</p>

<p>
\[ \lambda xy.x + y \]
</p>

<p>
We can just change all the \(x\)s to \(a\)s
</p>

<p>
\[ \lambda ay.a + y \]
</p>

<p>
And the expression hasn't changed its meaning one iota.<sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>
</p>

<p>
'Œ≤-reduction' (beta-reduction) is a little more complicated - what it
means is that, when a value is applied to a function, we can substitute
all the variables that name that argument with the value the function is
applied to. For instance, in JavaScript:
</p>

<div class="org-src-container">
<pre class="src src-javascript">(x =&gt; y =&gt; x + y)(5)
</pre>
</div>

<p>
under Œ≤-reduction becomes
</p>

<div class="org-src-container">
<pre class="src src-javascript">y =&gt; 5 + y
</pre>
</div>

<p>
We unwrap the outer function and replace occurances of its variable with
the supplied value. In lambda land:
</p>

<p>
\[ (\lambda xy. x + y)\ 5 \]
</p>

<p>
Becomes
</p>

<p>
\[ \lambda y. 5 + y \]
</p>

<p>
(I threw some parentheses around that other Lambda expression to make it
clear that the \(5\) was getting applied to the whole function and to
separate it from the body \(x + y\) - there's no hard and fast rules as
far as that goes).
</p>

<p>
Next up - <a href="file:///2017-09-13-church-numbers.md.html">numbers made of functions</a>. Wait, what?
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
To save on the world's dwindling supply of \(\lambda\)s
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
Greek alphabet pun. BOOM!
</p></div></div>


</div>
</div><div class="taglist"></div>]]></description>
  <link>/2017-09-11-lambda-calculus.md.html</link>
  <pubDate>Mon, 11 Sep 2017 01:00:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA["Brew Cask"]]></title>
  <description><![CDATA[
<p>
<a href="http://brew.sh/">Homebrew</a> is wonderful, and if you're using a Mac to
develop on and aren't using it to manage your command line applications
then I'd be surprised. Actually, I'd assume you were using
<a href="https://www.macports.org/">MacPorts</a>.
</p>

<p>
I've recently started to take advantage of an additonal library of
prebuilt binaries for Homebrew called
<a href="https://github.com/caskroom/homebrew-cask">Cask</a>. This gives access
to many (if not all) of the larger, often graphical, applications that
you need, such as Chrome, IntelliJ, Vagrant&#x2026; it's a long list.
</p>

<p>
It even integrates well with my favourite Mac productivity tool,
<a href="http://www.alfredapp.com/">Alfred</a>. And, yes, you can install that
with Cask too.
</p>

<p>
Set up with:
</p>

<div class="org-src-container">
<pre class="src src-sh">brew install caskroom/cask/brew-cask
</pre>
</div>

<p>
and then install software with:
</p>

<div class="org-src-container">
<pre class="src src-sh">brew cask install alfred
</pre>
</div>
<div class="taglist"></div>]]></description>
  <link>/2014-03-21-brew-cask.md.html</link>
  <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
</item>
</channel>
</rss>
