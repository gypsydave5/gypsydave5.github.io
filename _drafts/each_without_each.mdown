
Each with each

{% highlight ruby %}
class FibonacciNumbers
  NUMBERS = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
	def each
      NUMBERS.each {|number| yield(number)}
    end
end

f=FibonacciNumbers.new
f.each do |fibonacci\_number|
  puts "A Fibonacci number multiplied by 10: #{fibonacci\_number\*10}"
end
{% endhighlight %}


Each without each

{% highlight ruby %}
class FibonacciNumbers
  NUMBERS = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
	def each
      for i in 0..((NUMBERS.length) -1)
        yield(NUMBERS[i])
      end
    end
end

f=FibonacciNumbers.new
f.each do |fibonacci\_number|
  puts "A Fibonacci number multiplied by 10: #{fibonacci\_number\*10}"
end
{% endhighlight %}

Each without each without yield

{% highlight ruby %}
class FibonacciNumbers
  NUMBERS = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
	def each (&block)
      for i in 0..((NUMBERS.length) -1)
        block.call(NUMBERS[i])
      end
    end
end

f=FibonacciNumbers.new
f.each do |fibonacci\_number|
  puts "A Fibonacci number multiplied by 10: #{fibonacci\_number\*10}"
end
{% endhighlight %}


