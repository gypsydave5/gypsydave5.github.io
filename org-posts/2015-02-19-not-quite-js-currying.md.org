#+TITLE: (not quite) Currying in JavaScript

#+DATE: [2015-02-19]

Currying, yet another /I've heard the cool kids saying that/ word.
Acually, having done some reading, it turns out the cool kids may be
misusing it, but we'll get to that part later. Let's just spend a minute
looking at the wonder of =.bind()=.

Here's a function:

#+BEGIN_EXAMPLE
  function addition(a, b) {
      return a + b
  }

  addition(1, 2) //=> 3
#+END_EXAMPLE

Let's say we always wanted to be adding twenty-two - we could make
ourselves a shiny new function, or we could build on the way =addition=
works using =.bind()=

#+BEGIN_EXAMPLE
  var addTwentyTwo = addition.bind(this, 22)
  addTwentyTwo(1) //=> 23
#+END_EXAMPLE

=bind()=, as you'll see in the
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind][MDN
docs]], is a method you can call on a function in JavaScript. It creates
a new function based on the old one, with the =this= keyword of the new
function set to the first argument to =bind()=, and other arguments
given being set to the arguments of the original function. Confusing,
right? Well, it's probably best to ignore the first arpument, the =this=
reassignment for now, unless there's a pressing need to change it, and
focus on the rest. Here, let's do it again:

#+BEGIN_EXAMPLE
  var twentyFive = addTwentyTwo.bind(this, 3)
  twentyFive() //=> 25
#+END_EXAMPLE

When we use =.bind()= we can change the /arity/ (number of ardguments)
of the function returned, setting the values of any of all of the
arguments in the original function:

#+BEGIN_EXAMPLE
  var twoHundred = addition.bind(this, 50, 150)
  twoHundred() //=> 200
#+END_EXAMPLE

What bind allows us to do is /partial application/, fixing values of a
function and returning one of smaller arity:

#+BEGIN_EXAMPLE
  function addTheseFourUp(a, b, c, d) {
      return a + b + c + d
  }

  var addTwoAndTheseThreeUp = addTheseFourUp(this, 2)

  addTwoAndTheseThreeUp(1, 2, 3) //=> 8
#+END_EXAMPLE

This is technically not /currying/, which
[[https://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application][should
only return functions with an arity of 1]]. Currying =addTheseFourUp=
would look something like this:

#+BEGIN_EXAMPLE
  function curriedFour(a) {
      return function(b) {
          return function(c) {
              return function (d) {
                  return a + b + c + d
              }
          }
      }
  }

  curriedFour(1)(2)(3)(4) //=> 10
#+END_EXAMPLE

Which we could also play around with like this...

#+BEGIN_EXAMPLE
  function applyFourTimes(fun) {
      return function(num) {
          return fun(fun(fun(fun(num))))
      }
  }

  function double(num) {
      return num + num
  }

  applyFourTimes(double)(3) //=> 48
#+END_EXAMPLE

*** Postscript
    :PROPERTIES:
    :CUSTOM_ID: postscript
    :END:

Not only is partial function application not currying - but currying
should probably be called /Schönfinkelization/ after its true
originator,
[[https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel][Moses
Schönfinkel]], to whom
[[https://en.wikipedia.org/wiki/Haskell_Curry][Haskell Curry]]
attributed the concept. That said, W. V. O. Quine points out that the
idea had already been hit upon by
[[https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel#Work][Frege]].

From JavaScript to philosophy in but a few skips...
